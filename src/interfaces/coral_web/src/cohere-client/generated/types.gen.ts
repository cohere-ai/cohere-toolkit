// This file is auto-generated by @hey-api/openapi-ts

/**
 * Public agent schema
 */
export type AgentPublic = {
  /**
   * User ID for the Agent
   */
  user_id: string;
  /**
   * Agent ID
   */
  id: string;
  /**
   * When the agent was created
   */
  created_at: string;
  /**
   * When the agent was updated
   */
  updated_at: string;
  /**
   * Name of the Agent
   */
  name: string;
  /**
   * Version of the Agent
   */
  version: number;
  /**
   * Agent Description
   */
  description?: string | null;
  /**
   * The preamble for the Agent
   */
  preamble?: string | null;
  /**
   * The temperature for the Agent
   */
  temperature: number;
  /**
   * List of tools for the Agent
   */
  tools?: Array<string> | null;
  /**
   * List of tool metadata for the Agent
   */
  tools_metadata?: Array<AgentToolMetadataPublic> | null;
  /**
   * Deployment for the Agent
   */
  deployment?: string | null;
  /**
   * Model for the Agent
   */
  model?: string | null;
  /**
   * If the Agent is private
   */
  is_private?: boolean | null;
};

/**
 * Agent tool metadata schema
 */
export type AgentToolMetadata = {
  /**
   * Agent tool metadata ID
   */
  id: string;
  /**
   * When the agent tool metadata was created
   */
  created_at: string;
  /**
   * When the agent tool metadata was updated
   */
  updated_at: string;
  /**
   * User ID for the agent tool metadata
   */
  user_id?: string | null;
  /**
   * Agent ID for the agent tool metadata
   */
  agent_id: string;
  /**
   * Tool Name for the agent tool metadata
   */
  tool_name: string;
  /**
   * Artifacts for the agent tool metadata
   */
  artifacts: Array<{
    [key: string]: unknown;
  }>;
};

/**
 * Public agent tool metadata schema
 */
export type AgentToolMetadataPublic = {
  /**
   * Agent tool metadata ID
   */
  id: string;
  /**
   * When the agent tool metadata was created
   */
  created_at: string;
  /**
   * When the agent tool metadata was updated
   */
  updated_at: string;
  /**
   * Agent ID for the agent tool metadata
   */
  agent_id: string;
  /**
   * Tool Name for the agent tool metadata
   */
  tool_name: string;
  /**
   * Artifacts for the agent tool metadata
   */
  artifacts: Array<{
    [key: string]: unknown;
  }>;
};

/**
 * Supported values for Agent Visibility
 */
export enum AgentVisibility {
  PRIVATE = 'private',
  PUBLIC = 'public',
  ALL = 'all',
}

export type Body_batch_upload_file_v1_agents_batch_upload_file_post = {
  files: Array<Blob | File>;
};

export type Body_batch_upload_file_v1_conversations_batch_upload_file_post = {
  conversation_id?: string;
  files: Array<Blob | File>;
};

/**
 * A list of previous messages between the user and the model, meant to give the mode
 * conversational context for responding to the user's message.
 */
export type ChatMessage = {
  role: ChatRole;
  /**
   * Contents of the chat message.
   */
  message?: string | null;
  /**
   * Contents of the tool plan.
   */
  tool_plan?: string | null;
  /**
   * Results from the tool call.
   */
  tool_results?: Array<{
    [key: string]: unknown;
  }> | null;
  /**
   * List of tool calls generated for custom tools
   */
  tool_calls?: Array<{
    [key: string]: unknown;
  }> | null;
};

/**
 * Chat Response Event
 */
export type ChatResponseEvent = {
  /**
   * Type of stream event
   */
  event: StreamEvent;
  /**
   * Data returned from chat response of a given event type
   */
  data:
    | StreamStart
    | StreamTextGeneration
    | StreamCitationGeneration
    | StreamQueryGeneration
    | StreamSearchResults
    | StreamEnd
    | StreamToolInput
    | StreamToolResult
    | StreamSearchQueriesGeneration
    | StreamToolCallsGeneration
    | StreamToolCallsChunk
    | NonStreamedChatResponse;
};

/**
 * One of CHATBOT|USER|SYSTEM to identify who the message is coming from.
 */
export enum ChatRole {
  CHATBOT = 'CHATBOT',
  USER = 'USER',
  SYSTEM = 'SYSTEM',
  TOOL = 'TOOL',
}

/**
 * Schema for a citation
 */
export type Citation = {
  /**
   * Citation text
   */
  text: string;
  /**
   * Start position for the citation
   */
  start: number;
  /**
   * End position for the citation
   */
  end: number;
  /**
   * Documents used for the citation
   */
  document_ids: Array<string>;
};

/**
 * Dictates how the prompt will be constructed. Defaults to "AUTO_PRESERVE_ORDER".
 */
export enum CohereChatPromptTruncation {
  OFF = 'OFF',
  AUTO_PRESERVE_ORDER = 'AUTO_PRESERVE_ORDER',
}

/**
 * Request shape for Cohere Python SDK Streamed Chat.
 * See: https://github.com/cohere-ai/cohere-python/blob/main/src/cohere/base_client.py#L1629
 */
export type CohereChatRequest = {
  /**
   * The message to send to the chatbot
   */
  message: string;
  /**
   * A list of entries used to construct the conversation. If provided, these messages will be used to build the prompt and the conversation_id will be ignored so no data will be stored to maintain state.
   */
  chat_history?: Array<ChatMessage> | null;
  /**
   * To store a conversation then create a conversation id and use it for every related request
   */
  conversation_id?: string;
  /**
   *
   * List of custom or managed tools to use for the response.
   * If passing in managed tools, you only need to provide the name of the tool.
   * If passing in custom tools, you need to provide the name, description, and optionally parameter defintions of the tool.
   * Passing a mix of custom and managed tools is not supported.
   *
   * Managed Tools Examples:
   * tools=[
   * {
   * "name": "Wiki Retriever - LangChain",
   * },
   * {
   * "name": "Calculator",
   * }
   * ]
   *
   * Custom Tools Examples:
   * tools=[
   * {
   * "name": "movie_title_generator",
   * "description": "tool to generate a cool movie title",
   * "parameter_definitions": {
   * "synopsis": {
   * "description": "short synopsis of the movie",
   * "type": "str",
   * "required": true
   * }
   * }
   * },
   * {
   * "name": "random_number_generator",
   * "description": "tool to generate a random number between min and max",
   * "parameter_definitions": {
   * "min": {
   * "description": "minimum number",
   * "type": "int",
   * "required": true
   * },
   * "max": {
   * "description": "maximum number",
   * "type": "int",
   * "required": true
   * }
   * }
   * },
   * {
   * "name": "joke_generator",
   * "description": "tool to generate a random joke",
   * }
   * ]
   *
   */
  tools?: Array<Tool> | null;
  /**
   * Documents to use to generate grounded response with citations. Example:
   * documents=[
   * {
   * "id": "national_geographic_everest",
   * "title": "Height of Mount Everest",
   * "text": "The height of Mount Everest is 29,035 feet",
   * "url": "https://education.nationalgeographic.org/resource/mount-everest/",
   * },
   * {
   * "id": "national_geographic_mariana",
   * "title": "Depth of the Mariana Trench",
   * "text": "The depth of the Mariana Trench is 36,070 feet",
   * "url": "https://www.nationalgeographic.org/activity/mariana-trench-deepest-place-earth",
   * },
   * ]
   *
   */
  documents?: Array<{
    [key: string]: unknown;
  }>;
  /**
   * The model to use for generating the response.
   */
  model?: string | null;
  /**
   * A non-negative float that tunes the degree of randomness in generation. Lower temperatures mean less random generations, and higher temperatures mean more random generations.
   */
  temperature?: number | null;
  /**
   * Ensures only the top k most likely tokens are considered for generation at each step.
   */
  k?: number | null;
  /**
   * Ensures that only the most likely tokens, with total probability mass of p, are considered for generation at each step. If both k and p are enabled, p acts after k.
   */
  p?: number | null;
  /**
   * A string to override the preamble.
   */
  preamble?: string | null;
  /**
   * List of File IDs for PDFs used in RAG for the response.
   */
  file_ids?: Array<string> | null;
  /**
   * When set to true a list of search queries are generated. No search will occur nor replies to the user's message.
   */
  search_queries_only?: boolean | null;
  /**
   * The maximum number of tokens the model will generate as part of the response. Note: Setting a low value may result in incomplete generations.
   */
  max_tokens?: number | null;
  /**
   * If specified, the backend will make a best effort to sample tokens deterministically, such that repeated requests with the same seed and parameters should return the same result. However, determinism cannot be totally guaranteed.
   */
  seed?: number | null;
  /**
   * A list of up to 5 strings that the model will use to stop generation. If the model generates a string that matches any of the strings in the list, it will stop generating tokens and return the generated text up to that point not including the stop sequence.
   */
  stop_sequences?: Array<string> | null;
  /**
   * Used to reduce repetitiveness of generated tokens. Similar to frequency_penalty, except that this penalty is applied equally to all tokens that have already appeared, regardless of their exact frequencies.
   */
  presence_penalty?: number | null;
  /**
   * Used to reduce repetitiveness of generated tokens. The higher the value, the stronger a penalty is applied to previously present tokens, proportional to how many times they have already appeared in the prompt or prior generation.
   */
  frequency_penalty?: number | null;
  /**
   * Dictates how the prompt will be constructed. Defaults to 'AUTO_PRESERVE_ORDER'.
   */
  prompt_truncation?: CohereChatPromptTruncation | null;
  /**
   * A list of results from invoking tools recommended by the model in the previous chat turn. Results are used to produce a text response and will be referenced in citations.
   */
  tool_results?: Array<{
    [key: string]: unknown;
  }> | null;
  /**
   * If set to true, the model will generate a single response in a single step. This is useful for generating a response to a single message.
   */
  force_single_step?: boolean | null;
  /**
   * The agent ID to use for the chat.
   */
  agent_id?: string | null;
};

/**
 * Schema for a public conversation file
 */
export type ConversationFilePublic = {
  /**
   * Unique identifier of the file
   */
  id: string;
  /**
   * When file was created
   */
  created_at: string;
  /**
   * When file was updated
   */
  updated_at: string;
  /**
   * Name of the file
   */
  file_name: string;
  /**
   * Size of the file in bytes
   */
  file_size?: number;
  /**
   * Unique identifier for who created the file
   */
  user_id: string;
  /**
   * Unique identifier for the conversation the file is associated to
   */
  conversation_id: string;
};

/**
 * A public conversation which removes the User ID and Organization ID
 */
export type ConversationPublic = {
  /**
   * Unique identifier for the conversation
   */
  id: string;
  /**
   * When the conversation was created
   */
  created_at: string;
  /**
   * When the conversation was updated
   */
  updated_at: string;
  /**
   * Title of the conversation
   */
  title: string;
  /**
   * The conversation messages
   */
  messages: Array<Message>;
  /**
   * List of files for the conversation
   */
  files: Array<ConversationFilePublic>;
  /**
   * Description of the conversation
   */
  description?: string | null;
  /**
   * Unique identifier for the agent used in the conversation
   */
  agent_id?: string | null;
  /**
   * If conversation is pinned
   */
  is_pinned: boolean;
  readonly total_file_size: number;
};

/**
 * A public conversation without messages attached
 */
export type ConversationWithoutMessages = {
  /**
   * Unique identifier for the conversation
   */
  id: string;
  /**
   * When the conversation was created
   */
  created_at: string;
  /**
   * When the conversation was updated
   */
  updated_at: string;
  /**
   * Title of the conversation
   */
  title: string;
  /**
   * List of files for the conversation
   */
  files: Array<ConversationFilePublic>;
  /**
   * Description of the conversation
   */
  description?: string | null;
  /**
   * Unique identifier for the agent used in the conversation
   */
  agent_id?: string | null;
  /**
   * If conversation is pinned
   */
  is_pinned: boolean;
  readonly total_file_size: number;
};

/**
 * Schema to create an agent
 */
export type CreateAgentRequest = {
  /**
   * Name of the Agent
   */
  name: string;
  /**
   * Version of the Agent
   */
  version?: number | null;
  /**
   * Agent Description
   */
  description?: string | null;
  /**
   * The preamble for the Agent
   */
  preamble?: string | null;
  /**
   * The temperature for the Agent
   */
  temperature?: number | null;
  /**
   * List of tools for the Agent
   */
  tools?: Array<string> | null;
  /**
   * Tools metadata for the Agent
   */
  tools_metadata?: Array<CreateAgentToolMetadataRequest> | null;
  /**
   * Deployment for the Agent
   */
  deployment: string;
  /**
   * Deployment config for the Agent
   */
  deployment_config?: {
    [key: string]: string;
  } | null;
  /**
   * Model for the Agent
   */
  model: string;
  /**
   * Organization ID for the Agent
   */
  organization_id?: string | null;
  /**
   * If the Agent is private
   */
  is_private?: boolean | null;
};

/**
 * Request to create Agent Tool Metadata
 */
export type CreateAgentToolMetadataRequest = {
  /**
   * Agent Tool Metadata ID
   */
  id?: string | null;
  /**
   * Tool Name for the agent tool metadata
   */
  tool_name: string;
  /**
   * Artifacts for the agent tool metadata
   */
  artifacts: Array<{
    [key: string]: unknown;
  }>;
};

export type CreateGroup = {
  /**
   * Schemas for the group
   */
  schemas: Array<string>;
  /**
   * Members of the group
   */
  members: Array<GroupMember>;
  /**
   * Display name for the group
   */
  displayName: string;
};

/**
 * Request to create an organization
 */
export type CreateOrganization = {
  /**
   * Name of the organization
   */
  name: string;
};

/**
 * Request to create a snapshot
 */
export type CreateSnapshotRequest = {
  /**
   * Unique identifier for the conversation
   */
  conversation_id: string;
};

/**
 * Response for creating a snapshot
 */
export type CreateSnapshotResponse = {
  /**
   * Unique identifier for the snapshot
   */
  snapshot_id: string;
  /**
   * Unique identifier for the link
   */
  link_id: string;
  /**
   * List of messages
   */
  messages: Array<Message>;
};

/**
 * Response for deleting an agent
 */
export type DeleteAgent = unknown;

/**
 * Response for deleting an agent file
 */
export type DeleteAgentFileResponse = unknown;

/**
 * Delete agent tool metadata response
 */
export type DeleteAgentToolMetadata = unknown;

/**
 * Response for deleting a conversation file
 */
export type DeleteConversationFileResponse = unknown;

/**
 * Response for deleting a conversation
 */
export type DeleteConversationResponse = unknown;

/**
 * Delete Deployment Response
 */
export type DeleteDeployment = unknown;

/**
 * Response for deleting a model
 */
export type DeleteModel = unknown;

/**
 * Response when deleting organization
 */
export type DeleteOrganization = unknown;

/**
 * Response for deleting a snapshot link
 */
export type DeleteSnapshotLinkResponse = unknown;

/**
 * Response for deleting a snapshot
 */
export type DeleteSnapshotResponse = unknown;

/**
 * Response when deleting a tool auth
 */
export type DeleteToolAuth = unknown;

/**
 * Response when deleting a user
 */
export type DeleteUser = unknown;

/**
 * Deployment Create Schema
 */
export type DeploymentCreate = {
  /**
   * Unique Identifier for the Deployment
   */
  id?: string | null;
  /**
   * Name of the Deployment
   */
  name: string;
  /**
   * Description of the deployment
   */
  description?: string | null;
  /**
   * Deployment Class Name
   */
  deployment_class_name: string;
  /**
   * Is the deployment from the commmunity
   */
  is_community?: boolean;
  /**
   * The default deployment configuration
   */
  default_deployment_config: {
    [key: string]: string;
  };
};

/**
 * Deployment Definition
 */
export type DeploymentDefinition = {
  /**
   * Unique Identifier for the Deployment
   */
  id: string;
  /**
   * Name of the Deployment
   */
  name: string;
  /**
   * Description of the deployment
   */
  description?: string | null;
  /**
   * Config for the deployment
   */
  config?: {
    [key: string]: string;
  };
  /**
   * Is deployment is available
   */
  is_available?: boolean;
  /**
   * Is the deployment from the commmunity
   */
  is_community?: boolean | null;
  /**
   * List of models for the deployment
   */
  models: Array<string>;
  /**
   * Deployment class name
   */
  class_name: string;
};

/**
 * Deployment Update Schema
 */
export type DeploymentUpdate = {
  /**
   * Name of the Deployment
   */
  name?: string | null;
  /**
   * Description of the deployment
   */
  description?: string | null;
  /**
   * Deployment Class Name
   */
  deployment_class_name?: string | null;
  /**
   * Is the deployment from the commmunity
   */
  is_community?: boolean | null;
  /**
   * The default deployment configuration
   */
  default_deployment_config?: {
    [key: string]: string;
  } | null;
};

/**
 * Schema for a Document
 */
export type Document = {
  /**
   * Document text
   */
  text: string;
  /**
   * Unique Identifier for the document
   */
  document_id: string;
  /**
   * Document title
   */
  title?: string | null;
  /**
   * Document URL
   */
  url?: string | null;
  /**
   * Document Fields
   */
  fields?: {
    [key: string]: unknown;
  } | null;
  /**
   * Tool name for the document
   */
  tool_name?: string | null;
};

export type Email = {
  /**
   * Is email the primary email
   */
  primary: boolean;
  /**
   * Email value
   */
  value?: string | null;
  /**
   * Type of email
   */
  type: string;
};

/**
 * Schema for file metadata
 */
export type FileMetadata = {
  /**
   * Unique identifier of the file
   */
  id: string;
  /**
   * When file was created
   */
  created_at: string;
  /**
   * When file was updated
   */
  updated_at: string;
  /**
   * Name of the file
   */
  file_name: string;
  /**
   * Size of the file in bytes
   */
  file_size?: number;
  /**
   * The contents of the file
   */
  file_content: string;
};

/**
 * Response for generating a title
 */
export type GenerateTitleResponse = {
  /**
   * Title generated for the conversation
   */
  title: string;
  /**
   * Error message if the response is an error
   */
  error?: string | null;
};

export type Group = {
  /**
   * Schemas for the group
   */
  schemas: Array<string>;
  /**
   * Members of the group
   */
  members: Array<GroupMember>;
  /**
   * Display name for the group
   */
  displayName: string;
  /**
   * Unique identifier for the group
   */
  id: string;
  /**
   * Metadata for the group
   */
  meta: Meta;
};

export type GroupMember = {
  /**
   * Value
   */
  value: string;
  /**
   * Display
   */
  display: string;
};

export type GroupOperation = {
  /**
   * Op
   */
  op: string;
  /**
   * Path
   */
  path?: string | null;
  /**
   * Value
   */
  value:
    | {
        [key: string]: string;
      }
    | Array<{
        [key: string]: string;
      }>;
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

/**
 * JWT Response
 */
export type JWTResponse = {
  /**
   * JSON Web Token
   */
  token: string;
};

/**
 * List Auth Strategy
 */
export type ListAuthStrategy = {
  /**
   * Auth strategy name
   */
  strategy: string;
  /**
   * Client ID to be used
   */
  client_id?: string | null;
  /**
   * The endpoint for authorization
   */
  authorization_endpoint?: string | null;
  /**
   * If PKCE is enabled
   */
  pkce_enabled: boolean;
};

/**
 * Listing conversation files
 */
export type ListConversationFile = {
  /**
   * Unique identifier of the file
   */
  id: string;
  /**
   * When file was created
   */
  created_at: string;
  /**
   * When file was updated
   */
  updated_at: string;
  /**
   * Name of the file
   */
  file_name: string;
  /**
   * Size of the file in bytes
   */
  file_size?: number;
  /**
   * Unique identifier for who created the file
   */
  user_id: string;
  /**
   * Unique identifier for the conversation the file is associated to
   */
  conversation_id: string;
};

export type ListGroupResponse = {
  /**
   * Total results available
   */
  totalResults: number;
  /**
   * Start index for returned results
   */
  startIndex: number;
  /**
   * Total results returned in the request
   */
  itemsPerPage: number;
  /**
   * List of Groups
   */
  Resources: Array<Group>;
};

export type ListUserResponse = {
  /**
   * Total results available
   */
  totalResults: number;
  /**
   * Start index for returned results
   */
  startIndex: number;
  /**
   * Total results returned in the request
   */
  itemsPerPage: number;
  /**
   * List of Users
   */
  Resources: Array<backend__schemas__scim__User>;
};

/**
 * Login Request
 */
export type Login = {
  /**
   * Auth strategy to use
   */
  strategy: string;
  /**
   * Login payload depending on strategy used
   */
  payload?: {
    [key: string]: string;
  } | null;
};

/**
 * Logout Request
 */
export type Logout = unknown;

/**
 * Message Schema
 */
export type Message = {
  /**
   * The text content of the message
   */
  text: string;
  /**
   * Unique identifier of the message
   */
  id: string;
  /**
   * When message was created
   */
  created_at: string;
  /**
   * When message was updated
   */
  updated_at: string;
  /**
   * Generation ID for the message
   */
  generation_id?: string | null;
  /**
   * Position in the conversation
   */
  position: number;
  /**
   * Is the message active
   */
  is_active: boolean;
  /**
   * Documents associated with the message
   */
  documents: Array<Document>;
  /**
   * Citations associated with the message
   */
  citations: Array<Citation>;
  /**
   * Files associated with the message
   */
  files: Array<ConversationFilePublic>;
  /**
   * Tool calls associated with the message
   */
  tool_calls: Array<ToolCall>;
  /**
   * Tool plan associated with the message
   */
  tool_plan?: string | null;
  /**
   * Agent associated with the message
   */
  agent: MessageAgent;
};

export enum MessageAgent {
  USER = 'USER',
  CHATBOT = 'CHATBOT',
}

/**
 * Schema for metadata
 */
export type Meta = {
  /**
   * Type of resource the metadata is for
   */
  resourceType: string;
  /**
   * When metadata was created
   */
  created: string;
  /**
   * When metadata was last modified
   */
  lastModified: string;
};

export type Model = {
  /**
   * Model name
   */
  name: string;
  /**
   * Cohere model name
   */
  cohere_name?: string | null;
  /**
   * Model description
   */
  description?: string | null;
  /**
   * Unique identifier for the model
   */
  id: string;
  /**
   * Unique identifier for the deployment
   */
  deployment_id: string;
};

export type ModelCreate = {
  /**
   * Model name
   */
  name: string;
  /**
   * Cohere model name
   */
  cohere_name?: string | null;
  /**
   * Model description
   */
  description?: string | null;
  /**
   * Unique identifier for the deployment
   */
  deployment_id: string;
};

export type ModelUpdate = {
  /**
   * Model name
   */
  name?: string | null;
  /**
   * Cohere model name
   */
  cohere_name?: string | null;
  /**
   * Model description
   */
  description?: string | null;
  /**
   * Unique identifier for the deployment
   */
  deployment_id?: string | null;
};

export type Name = {
  /**
   * User's given name
   */
  givenName: string;
  /**
   * User's family name
   */
  familyName: string;
};

/**
 * Non streamed chat response
 */
export type NonStreamedChatResponse = {
  /**
   * Unique identifier for the response
   */
  response_id?: string | null;
  /**
   * Unique identifier for the generation
   */
  generation_id?: string | null;
  /**
   * A list of previous messages between the user and the model, meant to give the model conversational context for responding to the user's message.
   */
  chat_history?: Array<ChatMessage> | null;
  /**
   * Reason the chat stream ended
   */
  finish_reason: string;
  /**
   * Contents of the chat message
   */
  text: string;
  /**
   * Citations for the chat message
   */
  citations?: Array<Citation> | null;
  /**
   * Documents used to generate grounded response with citations
   */
  documents?: Array<Document> | null;
  /**
   * Search results used to generate grounded response with citations
   */
  search_results?: Array<{
    [key: string]: unknown;
  }> | null;
  /**
   * List of generated search queries.
   */
  search_queries?: Array<SearchQuery> | null;
  /**
   * To store a conversation then create a conversation id and use it for every related request
   */
  conversation_id?: string | null;
  /**
   * List of tool calls generated for custom tools
   */
  tool_calls?: Array<ToolCall> | null;
  /**
   * Error message if the response is an error
   */
  error?: string | null;
};

export type Operation = {
  /**
   * Op
   */
  op: string;
  /**
   * Value
   */
  value: {
    [key: string]: boolean;
  };
};

/**
 * Schema for an organization
 */
export type Organization = {
  /**
   * Name of the organization
   */
  name: string;
  /**
   * Unique identifier of the organization
   */
  id: string;
  /**
   * When organization was created
   */
  created_at: string;
  /**
   * When organization was updated
   */
  updated_at: string;
};

export type PatchGroup = {
  /**
   * Schemas for group
   */
  schemas: Array<string>;
  /**
   * Operations for the group
   */
  operations: Array<GroupOperation>;
};

export type PatchUser = {
  /**
   * Schemas for user
   */
  schemas: Array<string>;
  /**
   * Operations for the user
   */
  operations: Array<Operation>;
};

/**
 * Schema for search query
 */
export type SearchQuery = {
  /**
   * Text for the search
   */
  text: string;
  /**
   * Unique identifier for the generation
   */
  generation_id: string;
};

/**
 * Snapshot data
 */
export type SnapshotData = {
  /**
   * Title of the snapshot
   */
  title: string;
  /**
   * Description of the snapshot
   */
  description: string;
  /**
   * List of messages
   */
  messages: Array<Message>;
};

/**
 * Public snapshot
 */
export type SnapshotPublic = {
  /**
   * Unique identifier for the conversation
   */
  conversation_id: string;
  /**
   * Unique identifier for the snapshot
   */
  id: string;
  /**
   * Unique identifier for the last message
   */
  last_message_id: string;
  /**
   * Snapshot version
   */
  version: number;
  /**
   * When snapshot was creted
   */
  created_at: string;
  /**
   * When snapshot was updated
   */
  updated_at: string;
  /**
   * Data for the snapshot
   */
  snapshot: SnapshotData;
};

/**
 * Snapshot with links
 */
export type SnapshotWithLinks = {
  /**
   * Unique identifier for the conversation
   */
  conversation_id: string;
  /**
   * Unique identifier for the snapshot
   */
  id: string;
  /**
   * Unique identifier for the last message
   */
  last_message_id: string;
  /**
   * Snapshot version
   */
  version: number;
  /**
   * When snapshot was creted
   */
  created_at: string;
  /**
   * When snapshot was updated
   */
  updated_at: string;
  /**
   * Data for the snapshot
   */
  snapshot: SnapshotData;
  /**
   * List of links
   */
  links: Array<string>;
};

/**
 * Stream citation generation event
 */
export type StreamCitationGeneration = {
  /**
   * Citations for the chat message
   */
  citations?: Array<Citation>;
};

/**
 * Stream end generation event
 */
export type StreamEnd = {
  /**
   * Unique identifier for the message
   */
  message_id?: string | null;
  /**
   * Unique identifier for the response
   */
  response_id?: string | null;
  /**
   * Unique identifier for the generation
   */
  generation_id?: string | null;
  /**
   * Unique identifier for the conversation
   */
  conversation_id?: string | null;
  /**
   * Contents of the chat message
   */
  text: string;
  /**
   * Citations for the chat messae.
   */
  citations?: Array<Citation>;
  /**
   * Documents used to generate grounded response with citations
   */
  documents?: Array<Document>;
  /**
   * Search results used to generate grounded response with citations
   */
  search_results?: Array<{
    [key: string]: unknown;
  }>;
  /**
   * List of generated search queries
   */
  search_queries?: Array<SearchQuery>;
  /**
   * List of tool calls generated for custom tools
   */
  tool_calls?: Array<ToolCall>;
  /**
   * Reson why the model finished the request
   */
  finish_reason?: string | null;
  /**
   * A list of entries used to construct the conversation. If provided, these messages will be used to build the prompt and the conversation_id will be ignored so no data will be stored to maintain state.
   */
  chat_history?: Array<ChatMessage> | null;
  /**
   * Error message if the response is an error
   */
  error?: string | null;
};

/**
 * Stream Events returned by Cohere's chat stream response.
 */
export enum StreamEvent {
  STREAM_START = 'stream-start',
  SEARCH_QUERIES_GENERATION = 'search-queries-generation',
  SEARCH_RESULTS = 'search-results',
  TOOL_INPUT = 'tool-input',
  TOOL_RESULT = 'tool-result',
  TEXT_GENERATION = 'text-generation',
  CITATION_GENERATION = 'citation-generation',
  STREAM_END = 'stream-end',
  NON_STREAMED_CHAT_RESPONSE = 'non-streamed-chat-response',
  TOOL_CALLS_GENERATION = 'tool-calls-generation',
  TOOL_CALLS_CHUNK = 'tool-calls-chunk',
}

/**
 * Stream query generation event
 */
export type StreamQueryGeneration = {
  /**
   * Search query used to generate grounded response with citations
   */
  query: string;
};

/**
 * Stream queries generation event
 */
export type StreamSearchQueriesGeneration = {
  /**
   * Search query used to generate grounded response with citations
   */
  search_queries?: Array<SearchQuery>;
};

/**
 * Stream search generation event
 */
export type StreamSearchResults = {
  /**
   * Search results used to generate grounded response with citations
   */
  search_results?: Array<{
    [key: string]: unknown;
  }>;
  /**
   * Documents used to generate grounded response with citations
   */
  documents?: Array<Document>;
};

/**
 * Stream start event
 */
export type StreamStart = {
  /**
   * Generation ID for the event
   */
  generation_id?: string | null;
  /**
   * Conversation ID for the event
   */
  conversation_id?: string | null;
};

/**
 * Stream text generation event
 */
export type StreamTextGeneration = {
  /**
   * Contents of the chat message
   */
  text: string;
};

/**
 * Stream tool call chunk generated event
 */
export type StreamToolCallsChunk = {
  /**
   * Partial tool call
   */
  tool_call_delta?: ToolCallDelta | null;
  /**
   * Contents of the chat message
   */
  text?: string | null;
};

/**
 * Stream tool calls generation event
 */
export type StreamToolCallsGeneration = {
  /**
   * Search results used to generate grounded response with citations
   */
  stream_search_results?: StreamSearchResults | null;
  /**
   * List of tool calls generated for custom tools
   */
  tool_calls?: Array<ToolCall> | null;
  /**
   * Contents of the chat message
   */
  text?: string | null;
};

/**
 * Stream tool input generation event
 */
export type StreamToolInput = {
  /**
   * Tool input type
   */
  input_type: ToolInputType;
  /**
   * Name of the tool to be used
   */
  tool_name: string;
  /**
   * Tool input
   */
  input: string;
  /**
   * Contents of the chat message
   */
  text: string;
};

/**
 * Stream tool result generation event
 */
export type StreamToolResult = {
  /**
   * Result from the tool
   */
  result: unknown;
  /**
   * Name of tool that generated the result
   */
  tool_name: string;
  /**
   * Documents used to generate grounded response with citations
   */
  documents?: Array<Document>;
};

/**
 * Request to toggle pinning a conversation
 */
export type ToggleConversationPinRequest = {
  /**
   * If conversation is pinned
   */
  is_pinned: boolean;
};

/**
 * Tool Schema
 */
export type Tool = {
  /**
   * Name of the Tool
   */
  name?: string | null;
  /**
   * Parameters definitions for the tool
   */
  parameter_definitions?: {
    [key: string]: unknown;
  } | null;
};

/**
 * Schema for Tool Call
 */
export type ToolCall = {
  /**
   * Name of the Tool
   */
  name: string;
  /**
   * Parameters for the tool call
   */
  parameters?: {
    [key: string]: unknown;
  };
};

/**
 * Schema for Tool Call Delta
 */
export type ToolCallDelta = {
  /**
   * Name of the Tool
   */
  name?: string | null;
  /**
   * Index
   */
  index?: number | null;
  /**
   * Parameters for the tool call
   */
  parameters?: string | null;
};

/**
 * Supported Tool Categories
 */
export enum ToolCategory {
  DATA_LOADER = 'Data loader',
  FILE_LOADER = 'File loader',
  FUNCTION = 'Function',
  WEB_SEARCH = 'Web search',
}

/**
 * Tool Definition Schema
 */
export type ToolDefinition = {
  /**
   * Name of the Tool
   */
  name?: string | null;
  /**
   * Parameters definitions for the tool
   */
  parameter_definitions?: {
    [key: string]: unknown;
  } | null;
  /**
   * Display name for the tool
   */
  display_name?: string;
  /**
   * Description of the tool
   */
  description?: string;
  /**
   * Error message
   */
  error_message?: string | null;
  /**
   * kwags for the tool
   */
  kwargs?: {
    [key: string]: unknown;
  };
  /**
   * Is the tool visible
   */
  is_visible?: boolean;
  /**
   * Is the tool available
   */
  is_available?: boolean;
  /**
   * Tool category
   */
  category?: ToolCategory;
  /**
   * Is auth required for the tool
   */
  is_auth_required?: boolean;
  /**
   * Auth url for the tool
   */
  auth_url?: string | null;
  /**
   * Token for the tool
   */
  token?: string | null;
  /**
   * If the tool returns a token
   */
  should_return_token?: boolean;
};

/**
 * Type of input passed to the tool
 */
export enum ToolInputType {
  QUERY = 'QUERY',
  CODE = 'CODE',
}

/**
 * Schema to update an agent
 */
export type UpdateAgentRequest = {
  /**
   * Name of the Agent
   */
  name?: string | null;
  /**
   * Version of the Agent
   */
  version?: number | null;
  /**
   * Agent Description
   */
  description?: string | null;
  /**
   * The preamble for the Agent
   */
  preamble?: string | null;
  /**
   * The temperature for the Agent
   */
  temperature?: number | null;
  /**
   * List of tools for the Agent
   */
  tools?: Array<string> | null;
  /**
   * Organization ID for the Agent
   */
  organization_id?: string | null;
  /**
   * If the Agent is private
   */
  is_private?: boolean | null;
  /**
   * Deployment for the Agent
   */
  deployment?: string | null;
  /**
   * Model for the Agent
   */
  model?: string | null;
  /**
   * Tools metadata for the Agent
   */
  tools_metadata?: Array<CreateAgentToolMetadataRequest> | null;
};

/**
 * Request to update Agent Tool Metadata
 */
export type UpdateAgentToolMetadataRequest = {
  /**
   * Agent Tool Metadata ID
   */
  id?: string | null;
  /**
   * Tool Name for the agent tool metadata
   */
  tool_name?: string | null;
  /**
   * Artifacts for the agent tool metadata
   */
  artifacts?: Array<{
    [key: string]: unknown;
  }> | null;
};

/**
 * Request to update a conversation
 */
export type UpdateConversationRequest = {
  /**
   * Title of the conversation
   */
  title?: string | null;
  /**
   * Description of the conversation
   */
  description?: string | null;
};

/**
 * Request to update Deployment Environment Variables
 */
export type UpdateDeploymentEnv = {
  /**
   * Environment Variables for the Deployment
   */
  env_vars: {
    [key: string]: string;
  };
};

/**
 * Request to update an organization
 */
export type UpdateOrganization = {
  /**
   * Name of the organization
   */
  name?: string | null;
};

/**
 * Reponse for uploading an agent file
 */
export type UploadAgentFileResponse = {
  /**
   * Unique identifier of the file
   */
  id: string;
  /**
   * When file was created
   */
  created_at: string;
  /**
   * When file was updated
   */
  updated_at: string;
  /**
   * Name of the file
   */
  file_name: string;
  /**
   * Size of the file in bytes
   */
  file_size?: number;
};

/**
 * Response for uploading a conversation file
 */
export type UploadConversationFileResponse = {
  /**
   * Unique identifier of the file
   */
  id: string;
  /**
   * When file was created
   */
  created_at: string;
  /**
   * When file was updated
   */
  updated_at: string;
  /**
   * Name of the file
   */
  file_name: string;
  /**
   * Size of the file in bytes
   */
  file_size?: number;
  /**
   * Unique identifier for who created the file
   */
  user_id: string;
  /**
   * Unique identifier for the conversation the file is associated to
   */
  conversation_id: string;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type backend__schemas__scim__CreateUser = {
  /**
   * User name
   */
  userName?: string | null;
  /**
   * Is user active
   */
  active?: boolean | null;
  /**
   * Schemas for the user
   */
  schemas: Array<string>;
  /**
   * Name of user
   */
  name: Name;
  /**
   * List of emails for user
   */
  emails: Array<Email>;
  /**
   * External ID for the user
   */
  externalId: string;
};

export type backend__schemas__scim__UpdateUser = {
  /**
   * User name
   */
  userName?: string | null;
  /**
   * Is user active
   */
  active?: boolean | null;
  /**
   * Schemas for the user
   */
  schemas: Array<string>;
  /**
   * Name of user
   */
  name: Name;
  /**
   * List of emails for user
   */
  emails: Array<Email>;
};

export type backend__schemas__scim__User = {
  /**
   * User name
   */
  userName?: string | null;
  /**
   * Is user active
   */
  active?: boolean | null;
  /**
   * Schemas for the user
   */
  schemas: Array<string>;
  /**
   * Unique identifier for the user
   */
  id: string;
  /**
   * External ID for the user
   */
  externalId: string;
  /**
   * Metadata for the user
   */
  meta: Meta;
};

/**
 * Request to create a user
 */
export type backend__schemas__user__CreateUser = {
  /**
   * Password for the user
   */
  password?: string | null;
  /**
   * The user's password hashed
   */
  hashed_password?: (Blob | File) | null;
  /**
   * User's Full Name
   */
  fullname: string;
  /**
   * User's email address
   */
  email?: string | null;
};

/**
 * Request to update a user
 */
export type backend__schemas__user__UpdateUser = {
  /**
   * Password for the user
   */
  password?: string | null;
  /**
   * The user's password hashed
   */
  hashed_password?: (Blob | File) | null;
  /**
   * User's Full Name
   */
  fullname?: string | null;
  /**
   * User's email address
   */
  email?: string | null;
};

/**
 * User schema
 */
export type backend__schemas__user__User = {
  /**
   * User's Full Name
   */
  fullname: string;
  /**
   * User's email address
   */
  email?: string | null;
  id: string;
  /**
   * When the user was created
   */
  created_at: string;
  /**
   * When the user was updated
   */
  updated_at: string;
};

export type GetStrategiesV1AuthStrategiesGetResponse = Array<ListAuthStrategy>;

export type LoginV1LoginPostData = {
  requestBody: Login;
};

export type LoginV1LoginPostResponse = JWTResponse | null;

export type AuthorizeV1StrategyAuthPostData = {
  /**
   * OAuth Code
   */
  code?: string | null;
  /**
   * Name of strategy in question
   */
  strategy: string;
};

export type AuthorizeV1StrategyAuthPostResponse = JWTResponse;

export type LogoutV1LogoutGetResponse = Logout;

export type ToolAuthV1ToolAuthGetResponse = unknown;

export type DeleteToolAuthV1ToolAuthToolIdDeleteData = {
  /**
   * Tool ID for tool in question
   */
  toolId: string;
};

export type DeleteToolAuthV1ToolAuthToolIdDeleteResponse = DeleteToolAuth;

export type ChatStreamV1ChatStreamPostData = {
  requestBody: CohereChatRequest;
};

export type ChatStreamV1ChatStreamPostResponse = Array<ChatResponseEvent>;

export type RegenerateChatStreamV1ChatStreamRegeneratePostData = {
  requestBody: CohereChatRequest;
};

export type RegenerateChatStreamV1ChatStreamRegeneratePostResponse = unknown;

export type ChatV1ChatPostData = {
  requestBody: CohereChatRequest;
};

export type ChatV1ChatPostResponse = NonStreamedChatResponse;

export type CreateUserV1UsersPostData = {
  requestBody: backend__schemas__user__CreateUser;
};

export type CreateUserV1UsersPostResponse = backend__schemas__user__User;

export type ListUsersV1UsersGetData = {
  /**
   * Maximum number of records to return per request
   */
  limit?: number;
  /**
   * Offset for where request should start returning records from
   */
  offset?: number;
};

export type ListUsersV1UsersGetResponse = Array<backend__schemas__user__User>;

export type GetUserV1UsersUserIdGetData = {
  /**
   * User ID for the user in question
   */
  userId: string;
};

export type GetUserV1UsersUserIdGetResponse = backend__schemas__user__User;

export type UpdateUserV1UsersUserIdPutData = {
  requestBody: backend__schemas__user__UpdateUser;
  /**
   * User ID for the user in question
   */
  userId: string;
};

export type UpdateUserV1UsersUserIdPutResponse = backend__schemas__user__User;

export type DeleteUserV1UsersUserIdDeleteData = {
  /**
   * User ID for the user in question
   */
  userId: string;
};

export type DeleteUserV1UsersUserIdDeleteResponse = DeleteUser;

export type GetConversationV1ConversationsConversationIdGetData = {
  /**
   * Conversation ID for conversation in question
   */
  conversationId: string;
};

export type GetConversationV1ConversationsConversationIdGetResponse = ConversationPublic;

export type UpdateConversationV1ConversationsConversationIdPutData = {
  /**
   * Conversation ID for conversation in question
   */
  conversationId: string;
  requestBody: UpdateConversationRequest;
};

export type UpdateConversationV1ConversationsConversationIdPutResponse = ConversationPublic;

export type DeleteConversationV1ConversationsConversationIdDeleteData = {
  /**
   * Conversation ID for conversation in question
   */
  conversationId: string;
};

export type DeleteConversationV1ConversationsConversationIdDeleteResponse =
  DeleteConversationResponse;

export type ListConversationsV1ConversationsGetData = {
  /**
   * Agent ID to filter results by
   */
  agentId?: string | null;
  /**
   * Maximum number of records to return per request
   */
  limit?: number;
  /**
   * Offset for where request should start returning records from
   */
  offset?: number;
  /**
   * Field to sorts results by
   */
  orderBy?: string | null;
};

export type ListConversationsV1ConversationsGetResponse = Array<ConversationWithoutMessages>;

export type ToggleConversationPinV1ConversationsConversationIdTogglePinPutData = {
  /**
   * Conversation ID for conversation in question
   */
  conversationId: string;
  requestBody: ToggleConversationPinRequest;
};

export type ToggleConversationPinV1ConversationsConversationIdTogglePinPutResponse =
  ConversationWithoutMessages;

export type SearchConversationsV1ConversationsSearchGetData = {
  /**
   * Agent ID to filter results by
   */
  agentId?: string | null;
  /**
   * Maximum number of records to return per request
   */
  limit?: number;
  /**
   * Offset for where request should start returning records from
   */
  offset?: number;
  /**
   * Field to sorts results by
   */
  orderBy?: string | null;
  /**
   * Query string to search for in a conversation title
   */
  query: string;
};

export type SearchConversationsV1ConversationsSearchGetResponse =
  Array<ConversationWithoutMessages>;

export type BatchUploadFileV1ConversationsBatchUploadFilePostData = {
  formData: Body_batch_upload_file_v1_conversations_batch_upload_file_post;
};

export type BatchUploadFileV1ConversationsBatchUploadFilePostResponse =
  Array<UploadConversationFileResponse>;

export type ListFilesV1ConversationsConversationIdFilesGetData = {
  /**
   * Conversation ID for conversation in question
   */
  conversationId: string;
};

export type ListFilesV1ConversationsConversationIdFilesGetResponse = Array<ListConversationFile>;

export type GetFileV1ConversationsConversationIdFilesFileIdGetData = {
  /**
   * Conversation ID for conversation in question
   */
  conversationId: string;
  /**
   * File ID for file in question
   */
  fileId: string;
};

export type GetFileV1ConversationsConversationIdFilesFileIdGetResponse = FileMetadata;

export type DeleteFileV1ConversationsConversationIdFilesFileIdDeleteData = {
  /**
   * Conversation ID for conversation in question
   */
  conversationId: string;
  /**
   * File ID for file in question
   */
  fileId: string;
};

export type DeleteFileV1ConversationsConversationIdFilesFileIdDeleteResponse =
  DeleteConversationFileResponse;

export type GenerateTitleV1ConversationsConversationIdGenerateTitlePostData = {
  /**
   * Conversation ID for conversation in question
   */
  conversationId: string;
  /**
   * Model to filter results by
   */
  model?: string | null;
};

export type GenerateTitleV1ConversationsConversationIdGenerateTitlePostResponse =
  GenerateTitleResponse;

export type SynthesizeMessageV1ConversationsConversationIdSynthesizeMessageIdGetData = {
  /**
   * Conversation ID for conversation in question
   */
  conversationId: string;
  /**
   * Message ID for message in question
   */
  messageId: string;
};

export type SynthesizeMessageV1ConversationsConversationIdSynthesizeMessageIdGetResponse = unknown;

export type ListToolsV1ToolsGetData = {
  /**
   * Agent ID to filter results by
   */
  agentId?: string | null;
};

export type ListToolsV1ToolsGetResponse = Array<ToolDefinition>;

export type CreateDeploymentV1DeploymentsPostData = {
  requestBody: DeploymentCreate;
};

export type CreateDeploymentV1DeploymentsPostResponse = DeploymentDefinition;

export type ListDeploymentsV1DeploymentsGetData = {
  /**
   * Include all deployments, regardless of availability.
   */
  all?: boolean | null;
};

export type ListDeploymentsV1DeploymentsGetResponse = Array<DeploymentDefinition>;

export type UpdateDeploymentV1DeploymentsDeploymentIdPutData = {
  /**
   * Deployment ID for deployment in question
   */
  deploymentId: string;
  requestBody: DeploymentUpdate;
};

export type UpdateDeploymentV1DeploymentsDeploymentIdPutResponse = DeploymentDefinition;

export type GetDeploymentV1DeploymentsDeploymentIdGetData = {
  /**
   * Deployment ID for deployment in question
   */
  deploymentId: string;
};

export type GetDeploymentV1DeploymentsDeploymentIdGetResponse = DeploymentDefinition;

export type DeleteDeploymentV1DeploymentsDeploymentIdDeleteData = {
  /**
   * Deployment ID for deployment in question
   */
  deploymentId: string;
};

export type DeleteDeploymentV1DeploymentsDeploymentIdDeleteResponse = DeleteDeployment;

export type UpdateConfigV1DeploymentsDeploymentIdUpdateConfigPostData = {
  /**
   * Deployment ID for deployment in question
   */
  deploymentId: string;
  requestBody: UpdateDeploymentEnv;
};

export type UpdateConfigV1DeploymentsDeploymentIdUpdateConfigPostResponse = DeploymentDefinition;

export type ListExperimentalFeaturesV1ExperimentalFeaturesGetResponse = {
  [key: string]: boolean;
};

export type CreateAgentV1AgentsPostData = {
  requestBody: CreateAgentRequest;
};

export type CreateAgentV1AgentsPostResponse = AgentPublic;

export type ListAgentsV1AgentsGetData = {
  /**
   * Maximum number of records to return per request
   */
  limit?: number;
  /**
   * Offset for where request should start returning records from
   */
  offset?: number;
  /**
   * Organization ID to filter results by
   */
  organizationId?: string | null;
  /**
   * Agent visibility
   */
  visibility?: AgentVisibility;
};

export type ListAgentsV1AgentsGetResponse = Array<AgentPublic>;

export type GetAgentByIdV1AgentsAgentIdGetData = {
  /**
   * Agent ID for agent in question
   */
  agentId: string;
};

export type GetAgentByIdV1AgentsAgentIdGetResponse = AgentPublic;

export type UpdateAgentV1AgentsAgentIdPutData = {
  /**
   * Agent ID for agent in question
   */
  agentId: string;
  requestBody: UpdateAgentRequest;
};

export type UpdateAgentV1AgentsAgentIdPutResponse = AgentPublic;

export type DeleteAgentV1AgentsAgentIdDeleteData = {
  /**
   * Agent ID for agent in question
   */
  agentId: string;
};

export type DeleteAgentV1AgentsAgentIdDeleteResponse = DeleteAgent;

export type GetAgentDeploymentV1AgentsAgentIdDeploymentsGetData = {
  /**
   * Agent ID for agent in question
   */
  agentId: string;
};

export type GetAgentDeploymentV1AgentsAgentIdDeploymentsGetResponse = Array<DeploymentDefinition>;

export type ListAgentToolMetadataV1AgentsAgentIdToolMetadataGetData = {
  /**
   * Agent ID for agent in question
   */
  agentId: string;
};

export type ListAgentToolMetadataV1AgentsAgentIdToolMetadataGetResponse =
  Array<AgentToolMetadataPublic>;

export type CreateAgentToolMetadataV1AgentsAgentIdToolMetadataPostData = {
  /**
   * Agent ID for agent in question
   */
  agentId: string;
  requestBody: CreateAgentToolMetadataRequest;
};

export type CreateAgentToolMetadataV1AgentsAgentIdToolMetadataPostResponse =
  AgentToolMetadataPublic;

export type UpdateAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdPutData = {
  /**
   * Agent ID for agent in question
   */
  agentId: string;
  /**
   * Agent Tool Metadata ID for tool metadata in question
   */
  agentToolMetadataId: string;
  requestBody: UpdateAgentToolMetadataRequest;
};

export type UpdateAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdPutResponse =
  AgentToolMetadata;

export type DeleteAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdDeleteData = {
  /**
   * Agent ID for agent in question
   */
  agentId: string;
  /**
   * Agent Tool Metadata ID for tool metadata in question
   */
  agentToolMetadataId: string;
};

export type DeleteAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdDeleteResponse =
  DeleteAgentToolMetadata;

export type BatchUploadFileV1AgentsBatchUploadFilePostData = {
  formData: Body_batch_upload_file_v1_agents_batch_upload_file_post;
};

export type BatchUploadFileV1AgentsBatchUploadFilePostResponse = Array<UploadAgentFileResponse>;

export type GetAgentFileV1AgentsAgentIdFilesFileIdGetData = {
  /**
   * Agent ID for agent in question
   */
  agentId: string;
  /**
   * File ID for file in question
   */
  fileId: string;
};

export type GetAgentFileV1AgentsAgentIdFilesFileIdGetResponse = FileMetadata;

export type DeleteAgentFileV1AgentsAgentIdFilesFileIdDeleteData = {
  /**
   * Agent ID for agent in question
   */
  agentId: string;
  /**
   * File ID for file in question
   */
  fileId: string;
};

export type DeleteAgentFileV1AgentsAgentIdFilesFileIdDeleteResponse = DeleteAgentFileResponse;

export type ListSnapshotsV1SnapshotsGetResponse = Array<SnapshotWithLinks>;

export type CreateSnapshotV1SnapshotsPostData = {
  requestBody: CreateSnapshotRequest;
};

export type CreateSnapshotV1SnapshotsPostResponse = CreateSnapshotResponse;

export type GetSnapshotV1SnapshotsLinkLinkIdGetData = {
  /**
   * Link ID for the snapshot link in question
   */
  linkId: string;
};

export type GetSnapshotV1SnapshotsLinkLinkIdGetResponse = SnapshotPublic;

export type DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteData = {
  /**
   * Link ID for the snapshot link in question
   */
  linkId: string;
};

export type DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteResponse = DeleteSnapshotLinkResponse;

export type DeleteSnapshotV1SnapshotsSnapshotIdDeleteData = {
  /**
   * Snapshot ID for the snapshot in question
   */
  snapshotId: string;
};

export type DeleteSnapshotV1SnapshotsSnapshotIdDeleteResponse = DeleteSnapshotResponse;

export type ListOrganizationsV1OrganizationsGetResponse = Array<Organization>;

export type CreateOrganizationV1OrganizationsPostData = {
  requestBody: CreateOrganization;
};

export type CreateOrganizationV1OrganizationsPostResponse = Organization;

export type UpdateOrganizationV1OrganizationsOrganizationIdPutData = {
  /**
   * Organization ID for the organization in question
   */
  organizationId: string;
  requestBody: UpdateOrganization;
};

export type UpdateOrganizationV1OrganizationsOrganizationIdPutResponse = Organization;

export type GetOrganizationV1OrganizationsOrganizationIdGetData = {
  /**
   * Organization ID for the organization in question
   */
  organizationId: string;
};

export type GetOrganizationV1OrganizationsOrganizationIdGetResponse = Organization;

export type DeleteOrganizationV1OrganizationsOrganizationIdDeleteData = {
  /**
   * Organization ID for the organization in question
   */
  organizationId: string;
};

export type DeleteOrganizationV1OrganizationsOrganizationIdDeleteResponse = DeleteOrganization;

export type GetOrganizationUsersV1OrganizationsOrganizationIdUsersGetData = {
  /**
   * Organization ID for the organization in question
   */
  organizationId: string;
};

export type GetOrganizationUsersV1OrganizationsOrganizationIdUsersGetResponse =
  Array<backend__schemas__user__User>;

export type CreateModelV1ModelsPostData = {
  requestBody: ModelCreate;
};

export type CreateModelV1ModelsPostResponse = Model;

export type ListModelsV1ModelsGetData = {
  /**
   * Maximum number of records to return per request
   */
  limit?: number;
  /**
   * Offset for where request should start returning records from
   */
  offset?: number;
};

export type ListModelsV1ModelsGetResponse = Array<Model>;

export type UpdateModelV1ModelsModelIdPutData = {
  /**
   * Model ID for the model in question
   */
  modelId: string;
  requestBody: ModelUpdate;
};

export type UpdateModelV1ModelsModelIdPutResponse = Model;

export type GetModelV1ModelsModelIdGetData = {
  /**
   * Model ID for the model in question
   */
  modelId: string;
};

export type GetModelV1ModelsModelIdGetResponse = Model;

export type DeleteModelV1ModelsModelIdDeleteData = {
  /**
   * Model ID for the model in question
   */
  modelId: string;
};

export type DeleteModelV1ModelsModelIdDeleteResponse = DeleteModel;

export type GetUsersScimV2UsersGetData = {
  /**
   * Maximum number of records to return per request
   */
  count?: number;
  /**
   * Filter to use when filtering response
   */
  filter?: string | null;
  /**
   * Start Index for request
   */
  startIndex?: number;
};

export type GetUsersScimV2UsersGetResponse = ListUserResponse;

export type CreateUserScimV2UsersPostData = {
  requestBody: backend__schemas__scim__CreateUser;
};

export type CreateUserScimV2UsersPostResponse = unknown;

export type GetUserScimV2UsersUserIdGetData = {
  /**
   * User ID for the user in question
   */
  userId: string;
};

export type GetUserScimV2UsersUserIdGetResponse = unknown;

export type UpdateUserScimV2UsersUserIdPutData = {
  requestBody: backend__schemas__scim__UpdateUser;
  /**
   * User ID for the user in question
   */
  userId: string;
};

export type UpdateUserScimV2UsersUserIdPutResponse = unknown;

export type PatchUserScimV2UsersUserIdPatchData = {
  requestBody: PatchUser;
  /**
   * User ID for the user in question
   */
  userId: string;
};

export type PatchUserScimV2UsersUserIdPatchResponse = unknown;

export type GetGroupsScimV2GroupsGetData = {
  /**
   * Maximum number of records to return per request
   */
  count?: number;
  /**
   * Filter to use when filtering response
   */
  filter?: string | null;
  /**
   * Start Index for request
   */
  startIndex?: number;
};

export type GetGroupsScimV2GroupsGetResponse = ListGroupResponse;

export type CreateGroupScimV2GroupsPostData = {
  requestBody: CreateGroup;
};

export type CreateGroupScimV2GroupsPostResponse = unknown;

export type GetGroupScimV2GroupsGroupIdGetData = {
  /**
   * Group ID for the group in question
   */
  groupId: string;
};

export type GetGroupScimV2GroupsGroupIdGetResponse = unknown;

export type PatchGroupScimV2GroupsGroupIdPatchData = {
  /**
   * Group ID for the group in question
   */
  groupId: string;
  requestBody: PatchGroup;
};

export type PatchGroupScimV2GroupsGroupIdPatchResponse = unknown;

export type DeleteGroupScimV2GroupsGroupIdDeleteData = {
  /**
   * Group ID for the group in question
   */
  groupId: string;
};

export type DeleteGroupScimV2GroupsGroupIdDeleteResponse = void;

export type HealthHealthGetResponse = unknown;

export type $OpenApiTs = {
  '/v1/auth_strategies': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<ListAuthStrategy>;
      };
    };
  };
  '/v1/login': {
    post: {
      req: LoginV1LoginPostData;
      res: {
        /**
         * Successful Response
         */
        200: JWTResponse | null;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/{strategy}/auth': {
    post: {
      req: AuthorizeV1StrategyAuthPostData;
      res: {
        /**
         * Successful Response
         */
        200: JWTResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/logout': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Logout;
      };
    };
  };
  '/v1/tool/auth': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
  '/v1/tool/auth/{tool_id}': {
    delete: {
      req: DeleteToolAuthV1ToolAuthToolIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteToolAuth;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/chat-stream': {
    post: {
      req: ChatStreamV1ChatStreamPostData;
      res: {
        /**
         * Successful Response
         */
        200: Array<ChatResponseEvent>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/chat-stream/regenerate': {
    post: {
      req: RegenerateChatStreamV1ChatStreamRegeneratePostData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/chat': {
    post: {
      req: ChatV1ChatPostData;
      res: {
        /**
         * Successful Response
         */
        200: NonStreamedChatResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/users': {
    post: {
      req: CreateUserV1UsersPostData;
      res: {
        /**
         * Successful Response
         */
        200: backend__schemas__user__User;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: ListUsersV1UsersGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<backend__schemas__user__User>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/users/{user_id}': {
    get: {
      req: GetUserV1UsersUserIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: backend__schemas__user__User;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: UpdateUserV1UsersUserIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: backend__schemas__user__User;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteUserV1UsersUserIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteUser;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/{conversation_id}': {
    get: {
      req: GetConversationV1ConversationsConversationIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: ConversationPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: UpdateConversationV1ConversationsConversationIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: ConversationPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteConversationV1ConversationsConversationIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteConversationResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations': {
    get: {
      req: ListConversationsV1ConversationsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<ConversationWithoutMessages>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/{conversation_id}/toggle-pin': {
    put: {
      req: ToggleConversationPinV1ConversationsConversationIdTogglePinPutData;
      res: {
        /**
         * Successful Response
         */
        200: ConversationWithoutMessages;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations:search': {
    get: {
      req: SearchConversationsV1ConversationsSearchGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<ConversationWithoutMessages>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/batch_upload_file': {
    post: {
      req: BatchUploadFileV1ConversationsBatchUploadFilePostData;
      res: {
        /**
         * Successful Response
         */
        200: Array<UploadConversationFileResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/{conversation_id}/files': {
    get: {
      req: ListFilesV1ConversationsConversationIdFilesGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<ListConversationFile>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/{conversation_id}/files/{file_id}': {
    get: {
      req: GetFileV1ConversationsConversationIdFilesFileIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: FileMetadata;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteFileV1ConversationsConversationIdFilesFileIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteConversationFileResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/{conversation_id}/generate-title': {
    post: {
      req: GenerateTitleV1ConversationsConversationIdGenerateTitlePostData;
      res: {
        /**
         * Successful Response
         */
        200: GenerateTitleResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/{conversation_id}/synthesize/{message_id}': {
    get: {
      req: SynthesizeMessageV1ConversationsConversationIdSynthesizeMessageIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/tools': {
    get: {
      req: ListToolsV1ToolsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<ToolDefinition>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/deployments': {
    post: {
      req: CreateDeploymentV1DeploymentsPostData;
      res: {
        /**
         * Successful Response
         */
        200: DeploymentDefinition;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: ListDeploymentsV1DeploymentsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<DeploymentDefinition>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/deployments/{deployment_id}': {
    put: {
      req: UpdateDeploymentV1DeploymentsDeploymentIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: DeploymentDefinition;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: GetDeploymentV1DeploymentsDeploymentIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: DeploymentDefinition;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteDeploymentV1DeploymentsDeploymentIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteDeployment;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/deployments/{deployment_id}/update_config': {
    post: {
      req: UpdateConfigV1DeploymentsDeploymentIdUpdateConfigPostData;
      res: {
        /**
         * Successful Response
         */
        200: DeploymentDefinition;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/experimental_features/': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: {
          [key: string]: boolean;
        };
      };
    };
  };
  '/v1/agents': {
    post: {
      req: CreateAgentV1AgentsPostData;
      res: {
        /**
         * Successful Response
         */
        200: AgentPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: ListAgentsV1AgentsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<AgentPublic>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/{agent_id}': {
    get: {
      req: GetAgentByIdV1AgentsAgentIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: AgentPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: UpdateAgentV1AgentsAgentIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: AgentPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteAgentV1AgentsAgentIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteAgent;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/{agent_id}/deployments': {
    get: {
      req: GetAgentDeploymentV1AgentsAgentIdDeploymentsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<DeploymentDefinition>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/{agent_id}/tool-metadata': {
    get: {
      req: ListAgentToolMetadataV1AgentsAgentIdToolMetadataGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<AgentToolMetadataPublic>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: CreateAgentToolMetadataV1AgentsAgentIdToolMetadataPostData;
      res: {
        /**
         * Successful Response
         */
        200: AgentToolMetadataPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/{agent_id}/tool-metadata/{agent_tool_metadata_id}': {
    put: {
      req: UpdateAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: AgentToolMetadata;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteAgentToolMetadata;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/batch_upload_file': {
    post: {
      req: BatchUploadFileV1AgentsBatchUploadFilePostData;
      res: {
        /**
         * Successful Response
         */
        200: Array<UploadAgentFileResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/{agent_id}/files/{file_id}': {
    get: {
      req: GetAgentFileV1AgentsAgentIdFilesFileIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: FileMetadata;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteAgentFileV1AgentsAgentIdFilesFileIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteAgentFileResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/snapshots': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<SnapshotWithLinks>;
      };
    };
    post: {
      req: CreateSnapshotV1SnapshotsPostData;
      res: {
        /**
         * Successful Response
         */
        200: CreateSnapshotResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/snapshots/link/{link_id}': {
    get: {
      req: GetSnapshotV1SnapshotsLinkLinkIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: SnapshotPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteSnapshotLinkResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/snapshots/{snapshot_id}': {
    delete: {
      req: DeleteSnapshotV1SnapshotsSnapshotIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteSnapshotResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/organizations': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<Organization>;
      };
    };
    post: {
      req: CreateOrganizationV1OrganizationsPostData;
      res: {
        /**
         * Successful Response
         */
        200: Organization;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/organizations/{organization_id}': {
    put: {
      req: UpdateOrganizationV1OrganizationsOrganizationIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: Organization;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: GetOrganizationV1OrganizationsOrganizationIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: Organization;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteOrganizationV1OrganizationsOrganizationIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteOrganization;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/organizations/{organization_id}/users': {
    get: {
      req: GetOrganizationUsersV1OrganizationsOrganizationIdUsersGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<backend__schemas__user__User>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/models': {
    post: {
      req: CreateModelV1ModelsPostData;
      res: {
        /**
         * Successful Response
         */
        200: Model;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: ListModelsV1ModelsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<Model>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/models/{model_id}': {
    put: {
      req: UpdateModelV1ModelsModelIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: Model;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: GetModelV1ModelsModelIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: Model;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteModelV1ModelsModelIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteModel;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/scim/v2/Users': {
    get: {
      req: GetUsersScimV2UsersGetData;
      res: {
        /**
         * Successful Response
         */
        200: ListUserResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: CreateUserScimV2UsersPostData;
      res: {
        /**
         * Successful Response
         */
        201: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/scim/v2/Users/{user_id}': {
    get: {
      req: GetUserScimV2UsersUserIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: UpdateUserScimV2UsersUserIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: PatchUserScimV2UsersUserIdPatchData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/scim/v2/Groups': {
    get: {
      req: GetGroupsScimV2GroupsGetData;
      res: {
        /**
         * Successful Response
         */
        200: ListGroupResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: CreateGroupScimV2GroupsPostData;
      res: {
        /**
         * Successful Response
         */
        201: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/scim/v2/Groups/{group_id}': {
    get: {
      req: GetGroupScimV2GroupsGroupIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: PatchGroupScimV2GroupsGroupIdPatchData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteGroupScimV2GroupsGroupIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        204: void;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/health': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
};
