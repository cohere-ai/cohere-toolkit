// This file is auto-generated by @hey-api/openapi-ts
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { CancelablePromise } from './core/CancelablePromise';
import type {
  ApplyMigrationsMigratePostResponse,
  AuthorizeV1StrategyAuthPostData,
  AuthorizeV1StrategyAuthPostResponse,
  BatchUploadFileV1ConversationsBatchUploadFilePostData,
  BatchUploadFileV1ConversationsBatchUploadFilePostResponse,
  ChatStreamV1ChatStreamPostData,
  ChatStreamV1ChatStreamPostResponse,
  ChatV1ChatPostData,
  ChatV1ChatPostResponse,
  CreateAgentToolMetadataV1AgentsAgentIdToolMetadataPostData,
  CreateAgentToolMetadataV1AgentsAgentIdToolMetadataPostResponse,
  CreateAgentV1AgentsPostData,
  CreateAgentV1AgentsPostResponse,
  CreateSnapshotV1SnapshotsPostData,
  CreateSnapshotV1SnapshotsPostResponse,
  CreateUserV1UsersPostData,
  CreateUserV1UsersPostResponse,
  DeleteAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdDeleteData,
  DeleteAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdDeleteResponse,
  DeleteAgentV1AgentsAgentIdDeleteData,
  DeleteAgentV1AgentsAgentIdDeleteResponse,
  DeleteConversationV1ConversationsConversationIdDeleteData,
  DeleteConversationV1ConversationsConversationIdDeleteResponse,
  DeleteFileV1ConversationsConversationIdFilesFileIdDeleteData,
  DeleteFileV1ConversationsConversationIdFilesFileIdDeleteResponse,
  DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteData,
  DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteResponse,
  DeleteSnapshotV1SnapshotsSnapshotIdDeleteData,
  DeleteSnapshotV1SnapshotsSnapshotIdDeleteResponse,
  DeleteUserV1UsersUserIdDeleteData,
  DeleteUserV1UsersUserIdDeleteResponse,
  GenerateTitleV1ConversationsConversationIdGenerateTitlePostData,
  GenerateTitleV1ConversationsConversationIdGenerateTitlePostResponse,
  GetAgentByIdV1AgentsAgentIdGetData,
  GetAgentByIdV1AgentsAgentIdGetResponse,
  GetConversationV1ConversationsConversationIdGetData,
  GetConversationV1ConversationsConversationIdGetResponse,
  GetSnapshotV1SnapshotsLinkLinkIdGetData,
  GetSnapshotV1SnapshotsLinkLinkIdGetResponse,
  GetStrategiesV1AuthStrategiesGetResponse,
  GetUserV1UsersUserIdGetData,
  GetUserV1UsersUserIdGetResponse,
  HealthHealthGetResponse,
  LangchainChatStreamV1LangchainChatPostData,
  LangchainChatStreamV1LangchainChatPostResponse,
  ListAgentToolMetadataV1AgentsAgentIdToolMetadataGetData,
  ListAgentToolMetadataV1AgentsAgentIdToolMetadataGetResponse,
  ListAgentsV1AgentsGetData,
  ListAgentsV1AgentsGetResponse,
  ListConversationsV1ConversationsGetData,
  ListConversationsV1ConversationsGetResponse,
  ListDeploymentsV1DeploymentsGetData,
  ListDeploymentsV1DeploymentsGetResponse,
  ListExperimentalFeaturesV1ExperimentalFeaturesGetResponse,
  ListFilesV1ConversationsConversationIdFilesGetData,
  ListFilesV1ConversationsConversationIdFilesGetResponse,
  ListSnapshotsV1SnapshotsGetResponse,
  ListToolsV1ToolsGetData,
  ListToolsV1ToolsGetResponse,
  ListUsersV1UsersGetData,
  ListUsersV1UsersGetResponse,
  LoginV1LoginPostData,
  LoginV1LoginPostResponse,
  LoginV1ToolAuthGetResponse,
  LogoutV1LogoutGetResponse,
  SearchConversationsV1ConversationsSearchGetData,
  SearchConversationsV1ConversationsSearchGetResponse,
  SetEnvVarsV1DeploymentsNameSetEnvVarsPostData,
  SetEnvVarsV1DeploymentsNameSetEnvVarsPostResponse,
  UpdateAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdPutData,
  UpdateAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdPutResponse,
  UpdateAgentV1AgentsAgentIdPutData,
  UpdateAgentV1AgentsAgentIdPutResponse,
  UpdateConversationV1ConversationsConversationIdPutData,
  UpdateConversationV1ConversationsConversationIdPutResponse,
  UpdateFileV1ConversationsConversationIdFilesFileIdPutData,
  UpdateFileV1ConversationsConversationIdFilesFileIdPutResponse,
  UpdateUserV1UsersUserIdPutData,
  UpdateUserV1UsersUserIdPutResponse,
  UploadFileV1ConversationsUploadFilePostData,
  UploadFileV1ConversationsUploadFilePostResponse,
} from './types.gen';

export class DefaultService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Get Strategies
   * Retrieves the currently enabled list of Authentication strategies.
   *
   *
   * Returns:
   * List[dict]: List of dictionaries containing the enabled auth strategy names.
   * @returns ListAuthStrategy Successful Response
   * @throws ApiError
   */
  public getStrategiesV1AuthStrategiesGet(): CancelablePromise<GetStrategiesV1AuthStrategiesGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/auth_strategies',
    });
  }

  /**
   * Login
   * Logs user in, performing basic email/password auth.
   * Verifies their credentials, retrieves the user and returns a JWT token.
   *
   * Args:
   * request (Request): current Request object.
   * login (Login): Login payload.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * dict: JWT token on Basic auth success
   *
   * Raises:
   * HTTPException: If the strategy or payload are invalid, or if the login fails.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public loginV1LoginPost(data: LoginV1LoginPostData): CancelablePromise<LoginV1LoginPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/login',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Authorize
   * Callback authorization endpoint used for OAuth providers after authenticating on the provider's login screen.
   *
   * Args:
   * strategy (str): Current strategy name.
   * request (Request): Current Request object.
   * session (Session): DB session.
   *
   * Returns:
   * dict: Containing "token" key, on success.
   *
   * Raises:
   * HTTPException: If authentication fails, or strategy is invalid.
   * @param data The data for the request.
   * @param data.strategy
   * @param data.code
   * @returns JWTResponse Successful Response
   * @throws ApiError
   */
  public authorizeV1StrategyAuthPost(
    data: AuthorizeV1StrategyAuthPostData
  ): CancelablePromise<AuthorizeV1StrategyAuthPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/{strategy}/auth',
      path: {
        strategy: data.strategy,
      },
      query: {
        code: data.code,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Logout
   * Logs out the current user, adding the given JWT token to the blacklist.
   *
   * Args:
   * request (Request): current Request object.
   *
   * Returns:
   * dict: Empty on success
   * @returns Logout Successful Response
   * @throws ApiError
   */
  public logoutV1LogoutGet(): CancelablePromise<LogoutV1LogoutGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/logout',
    });
  }

  /**
   * Login
   * Logs user in, performing basic email/password auth.
   * Verifies their credentials, retrieves the user and returns a JWT token.
   *
   * Args:
   * request (Request): current Request object.
   * login (Login): Login payload.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * dict: JWT token on Basic auth success
   *
   * Raises:
   * HTTPException: If the strategy or payload are invalid, or if the login fails.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public loginV1ToolAuthGet(): CancelablePromise<LoginV1ToolAuthGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/tool/auth',
    });
  }

  /**
   * Chat Stream
   * Stream chat endpoint to handle user messages and return chatbot responses.
   *
   * Args:
   * session (DBSessionDep): Database session.
   * chat_request (CohereChatRequest): Chat request data.
   * request (Request): Request object.
   *
   * Returns:
   * EventSourceResponse: Server-sent event response with chatbot responses.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ChatResponseEvent Successful Response
   * @throws ApiError
   */
  public chatStreamV1ChatStreamPost(
    data: ChatStreamV1ChatStreamPostData
  ): CancelablePromise<ChatStreamV1ChatStreamPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/chat-stream',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Chat
   * Chat endpoint to handle user messages and return chatbot responses.
   *
   * Args:
   * chat_request (CohereChatRequest): Chat request data.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   *
   * Returns:
   * NonStreamedChatResponse: Chatbot response.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns NonStreamedChatResponse Successful Response
   * @throws ApiError
   */
  public chatV1ChatPost(data: ChatV1ChatPostData): CancelablePromise<ChatV1ChatPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/chat',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Langchain Chat Stream
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public langchainChatStreamV1LangchainChatPost(
    data: LangchainChatStreamV1LangchainChatPostData
  ): CancelablePromise<LangchainChatStreamV1LangchainChatPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/langchain-chat',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Create User
   * Create a new user.
   *
   * Args:
   * user (CreateUser): User data to be created.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * User: Created user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns User Successful Response
   * @throws ApiError
   */
  public createUserV1UsersPost(
    data: CreateUserV1UsersPostData
  ): CancelablePromise<CreateUserV1UsersPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/users',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Users
   * List all users.
   *
   * Args:
   * offset (int): Offset to start the list.
   * limit (int): Limit of users to be listed.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * list[User]: List of users.
   * @param data The data for the request.
   * @param data.offset
   * @param data.limit
   * @returns User Successful Response
   * @throws ApiError
   */
  public listUsersV1UsersGet(
    data: ListUsersV1UsersGetData = {}
  ): CancelablePromise<ListUsersV1UsersGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/users',
      query: {
        offset: data.offset,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get User
   * Get a user by ID.
   *
   * Args:
   * user_id (str): User ID.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * User: User with the given ID.
   *
   * Raises:
   * HTTPException: If the user with the given ID is not found.
   * @param data The data for the request.
   * @param data.userId
   * @returns User Successful Response
   * @throws ApiError
   */
  public getUserV1UsersUserIdGet(
    data: GetUserV1UsersUserIdGetData
  ): CancelablePromise<GetUserV1UsersUserIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/users/{user_id}',
      path: {
        user_id: data.userId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update User
   * Update a user by ID.
   *
   * Args:
   * user_id (str): User ID.
   * new_user (UpdateUser): New user data.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * User: Updated user.
   *
   * Raises:
   * HTTPException: If the user with the given ID is not found.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns User Successful Response
   * @throws ApiError
   */
  public updateUserV1UsersUserIdPut(
    data: UpdateUserV1UsersUserIdPutData
  ): CancelablePromise<UpdateUserV1UsersUserIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/users/{user_id}',
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete User
   * "
   * Delete a user by ID.
   *
   * Args:
   * user_id (str): User ID.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * DeleteUser: Empty response.
   *
   * Raises:
   * HTTPException: If the user with the given ID is not found.
   * @param data The data for the request.
   * @param data.userId
   * @returns DeleteUser Successful Response
   * @throws ApiError
   */
  public deleteUserV1UsersUserIdDelete(
    data: DeleteUserV1UsersUserIdDeleteData
  ): CancelablePromise<DeleteUserV1UsersUserIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/users/{user_id}',
      path: {
        user_id: data.userId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Conversation
   * "
   * Get a conversation by ID.
   *
   * Args:
   * conversation_id (str): Conversation ID.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   *
   * Returns:
   * Conversation: Conversation with the given ID.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId
   * @returns Conversation Successful Response
   * @throws ApiError
   */
  public getConversationV1ConversationsConversationIdGet(
    data: GetConversationV1ConversationsConversationIdGetData
  ): CancelablePromise<GetConversationV1ConversationsConversationIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/conversations/{conversation_id}',
      path: {
        conversation_id: data.conversationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Conversation
   * Update a conversation by ID.
   *
   * Args:
   * conversation_id (str): Conversation ID.
   * new_conversation (UpdateConversation): New conversation data.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   *
   * Returns:
   * Conversation: Updated conversation.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.requestBody
   * @returns Conversation Successful Response
   * @throws ApiError
   */
  public updateConversationV1ConversationsConversationIdPut(
    data: UpdateConversationV1ConversationsConversationIdPutData
  ): CancelablePromise<UpdateConversationV1ConversationsConversationIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/conversations/{conversation_id}',
      path: {
        conversation_id: data.conversationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Conversation
   * Delete a conversation by ID.
   *
   * Args:
   * conversation_id (str): Conversation ID.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   *
   * Returns:
   * DeleteConversation: Empty response.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId
   * @returns DeleteConversation Successful Response
   * @throws ApiError
   */
  public deleteConversationV1ConversationsConversationIdDelete(
    data: DeleteConversationV1ConversationsConversationIdDeleteData
  ): CancelablePromise<DeleteConversationV1ConversationsConversationIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/conversations/{conversation_id}',
      path: {
        conversation_id: data.conversationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Conversations
   * List all conversations.
   *
   * Args:
   * offset (int): Offset to start the list.
   * limit (int): Limit of conversations to be listed.
   * agent_id (str): Query parameter for agent ID to optionally filter conversations by agent.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   *
   * Returns:
   * list[ConversationWithoutMessages]: List of conversations.
   * @param data The data for the request.
   * @param data.offset
   * @param data.limit
   * @param data.agentId
   * @returns ConversationWithoutMessages Successful Response
   * @throws ApiError
   */
  public listConversationsV1ConversationsGet(
    data: ListConversationsV1ConversationsGetData = {}
  ): CancelablePromise<ListConversationsV1ConversationsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/conversations',
      query: {
        offset: data.offset,
        limit: data.limit,
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Search Conversations
   * Search conversations by title.
   *
   * Args:
   * query (str): Query string to search for in conversation titles.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   *
   * Returns:
   * list[ConversationWithoutMessages]: List of conversations that match the query.
   * @param data The data for the request.
   * @param data.query
   * @param data.offset
   * @param data.limit
   * @param data.agentId
   * @returns ConversationWithoutMessages Successful Response
   * @throws ApiError
   */
  public searchConversationsV1ConversationsSearchGet(
    data: SearchConversationsV1ConversationsSearchGetData
  ): CancelablePromise<SearchConversationsV1ConversationsSearchGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/conversations:search',
      query: {
        query: data.query,
        offset: data.offset,
        limit: data.limit,
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Upload File
   * Uploads and creates a File object.
   * If no conversation_id is provided, a new Conversation is created as well.
   *
   * Args:
   * session (DBSessionDep): Database session.
   * file (FastAPIUploadFile): File to be uploaded.
   * conversation_id (Optional[str]): Conversation ID passed from request query parameter.
   *
   * Returns:
   * UploadFile: Uploaded file.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found. Status code 404.
   * HTTPException: If the file wasn't uploaded correctly. Status code 500.
   * @param data The data for the request.
   * @param data.formData
   * @returns UploadFile Successful Response
   * @throws ApiError
   */
  public uploadFileV1ConversationsUploadFilePost(
    data: UploadFileV1ConversationsUploadFilePostData
  ): CancelablePromise<UploadFileV1ConversationsUploadFilePostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/conversations/upload_file',
      formData: data.formData,
      mediaType: 'multipart/form-data',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Batch Upload File
   * Uploads and creates a batch of File object.
   * If no conversation_id is provided, a new Conversation is created as well.
   *
   * Args:
   * session (DBSessionDep): Database session.
   * file (list[FastAPIUploadFile]): List of files to be uploaded.
   * conversation_id (Optional[str]): Conversation ID passed from request query parameter.
   *
   * Returns:
   * list[UploadFile]: List of uploaded files.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found. Status code 404.
   * HTTPException: If the file wasn't uploaded correctly. Status code 500.
   * @param data The data for the request.
   * @param data.formData
   * @returns UploadFile Successful Response
   * @throws ApiError
   */
  public batchUploadFileV1ConversationsBatchUploadFilePost(
    data: BatchUploadFileV1ConversationsBatchUploadFilePostData
  ): CancelablePromise<BatchUploadFileV1ConversationsBatchUploadFilePostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/conversations/batch_upload_file',
      formData: data.formData,
      mediaType: 'multipart/form-data',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Files
   * List all files from a conversation. Important - no pagination support yet.
   *
   * Args:
   * conversation_id (str): Conversation ID.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * list[ListFile]: List of files from the conversation.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId
   * @returns ListFile Successful Response
   * @throws ApiError
   */
  public listFilesV1ConversationsConversationIdFilesGet(
    data: ListFilesV1ConversationsConversationIdFilesGetData
  ): CancelablePromise<ListFilesV1ConversationsConversationIdFilesGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/conversations/{conversation_id}/files',
      path: {
        conversation_id: data.conversationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update File
   * Update a file by ID.
   *
   * Args:
   * conversation_id (str): Conversation ID.
   * file_id (str): File ID.
   * new_file (UpdateFile): New file data.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * File: Updated file.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.fileId
   * @param data.requestBody
   * @returns File Successful Response
   * @throws ApiError
   */
  public updateFileV1ConversationsConversationIdFilesFileIdPut(
    data: UpdateFileV1ConversationsConversationIdFilesFileIdPutData
  ): CancelablePromise<UpdateFileV1ConversationsConversationIdFilesFileIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/conversations/{conversation_id}/files/{file_id}',
      path: {
        conversation_id: data.conversationId,
        file_id: data.fileId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete File
   * Delete a file by ID.
   *
   * Args:
   * conversation_id (str): Conversation ID.
   * file_id (str): File ID.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * DeleteFile: Empty response.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.fileId
   * @returns DeleteFile Successful Response
   * @throws ApiError
   */
  public deleteFileV1ConversationsConversationIdFilesFileIdDelete(
    data: DeleteFileV1ConversationsConversationIdFilesFileIdDeleteData
  ): CancelablePromise<DeleteFileV1ConversationsConversationIdFilesFileIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/conversations/{conversation_id}/files/{file_id}',
      path: {
        conversation_id: data.conversationId,
        file_id: data.fileId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Generate Title
   * Generate a title for a conversation and update the conversation with the generated title.
   *
   * Args:
   * conversation_id (str): Conversation ID.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * str: Generated title for the conversation.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId
   * @returns GenerateTitle Successful Response
   * @throws ApiError
   */
  public generateTitleV1ConversationsConversationIdGenerateTitlePost(
    data: GenerateTitleV1ConversationsConversationIdGenerateTitlePostData
  ): CancelablePromise<GenerateTitleV1ConversationsConversationIdGenerateTitlePostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/conversations/{conversation_id}/generate-title',
      path: {
        conversation_id: data.conversationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Tools
   * List all available tools.
   *
   * Returns:
   * list[ManagedTool]: List of available tools.
   * @param data The data for the request.
   * @param data.agentId
   * @returns ManagedTool Successful Response
   * @throws ApiError
   */
  public listToolsV1ToolsGet(
    data: ListToolsV1ToolsGetData = {}
  ): CancelablePromise<ListToolsV1ToolsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/tools',
      query: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Deployments
   * List all available deployments and their models.
   *
   * Returns:
   * list[Deployment]: List of available deployment options.
   * @param data The data for the request.
   * @param data.all
   * @returns Deployment Successful Response
   * @throws ApiError
   */
  public listDeploymentsV1DeploymentsGet(
    data: ListDeploymentsV1DeploymentsGetData = {}
  ): CancelablePromise<ListDeploymentsV1DeploymentsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/deployments',
      query: {
        all: data.all,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Set Env Vars
   * Set environment variables for the deployment.
   *
   * Returns:
   * str: Empty string.
   * @param data The data for the request.
   * @param data.name
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public setEnvVarsV1DeploymentsNameSetEnvVarsPost(
    data: SetEnvVarsV1DeploymentsNameSetEnvVarsPostData
  ): CancelablePromise<SetEnvVarsV1DeploymentsNameSetEnvVarsPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/deployments/{name}/set_env_vars',
      path: {
        name: data.name,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Experimental Features
   * List all experimental features and if they are enabled
   *
   * Returns:
   * Dict[str, bool]: Experimental feature and their isEnabled state
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public listExperimentalFeaturesV1ExperimentalFeaturesGet(): CancelablePromise<ListExperimentalFeaturesV1ExperimentalFeaturesGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/experimental_features/',
    });
  }

  /**
   * Create Agent
   * Create an agent.
   * Args:
   * session (DBSessionDep): Database session.
   * agent (CreateAgent): Agent data.
   * request (Request): Request object.
   * Returns:
   * AgentPublic: Created agent with no user ID or organization ID.
   * Raises:
   * HTTPException: If the agent creation fails.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AgentPublic Successful Response
   * @throws ApiError
   */
  public createAgentV1AgentsPost(
    data: CreateAgentV1AgentsPostData
  ): CancelablePromise<CreateAgentV1AgentsPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/agents',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Agents
   * List all agents.
   *
   * Args:
   * offset (int): Offset to start the list.
   * limit (int): Limit of agents to be listed.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   *
   * Returns:
   * list[AgentPublic]: List of agents with no user ID or organization ID.
   * @param data The data for the request.
   * @param data.offset
   * @param data.limit
   * @returns AgentPublic Successful Response
   * @throws ApiError
   */
  public listAgentsV1AgentsGet(
    data: ListAgentsV1AgentsGetData = {}
  ): CancelablePromise<ListAgentsV1AgentsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/agents',
      query: {
        offset: data.offset,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Agent By Id
   * Args:
   * agent_id (str): Agent ID.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * Agent: Agent.
   *
   * Raises:
   * HTTPException: If the agent with the given ID is not found.
   * @param data The data for the request.
   * @param data.agentId
   * @returns Agent Successful Response
   * @throws ApiError
   */
  public getAgentByIdV1AgentsAgentIdGet(
    data: GetAgentByIdV1AgentsAgentIdGetData
  ): CancelablePromise<GetAgentByIdV1AgentsAgentIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/agents/{agent_id}',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Agent
   * Update an agent by ID.
   *
   * Args:
   * agent_id (str): Agent ID.
   * new_agent (UpdateAgent): New agent data.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   *
   * Returns:
   * AgentPublic: Updated agent with no user ID or organization ID.
   *
   * Raises:
   * HTTPException: If the agent with the given ID is not found.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @returns AgentPublic Successful Response
   * @throws ApiError
   */
  public updateAgentV1AgentsAgentIdPut(
    data: UpdateAgentV1AgentsAgentIdPutData
  ): CancelablePromise<UpdateAgentV1AgentsAgentIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/agents/{agent_id}',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Agent
   * Delete an agent by ID.
   *
   * Args:
   * agent_id (str): Agent ID.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   *
   * Returns:
   * DeleteAgent: Empty response.
   *
   * Raises:
   * HTTPException: If the agent with the given ID is not found.
   * @param data The data for the request.
   * @param data.agentId
   * @returns DeleteAgent Successful Response
   * @throws ApiError
   */
  public deleteAgentV1AgentsAgentIdDelete(
    data: DeleteAgentV1AgentsAgentIdDeleteData
  ): CancelablePromise<DeleteAgentV1AgentsAgentIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/agents/{agent_id}',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Agent Tool Metadata
   * List all agent tool metadata by agent ID.
   *
   * Args:
   * agent_id (str): Agent ID.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   *
   * Returns:
   * list[AgentToolMetadataPublic]: List of agent tool metadata with no user ID or organization ID.
   *
   * Raises:
   * HTTPException: If the agent tool metadata retrieval fails.
   * @param data The data for the request.
   * @param data.agentId
   * @returns AgentToolMetadataPublic Successful Response
   * @throws ApiError
   */
  public listAgentToolMetadataV1AgentsAgentIdToolMetadataGet(
    data: ListAgentToolMetadataV1AgentsAgentIdToolMetadataGetData
  ): CancelablePromise<ListAgentToolMetadataV1AgentsAgentIdToolMetadataGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/agents/{agent_id}/tool-metadata',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Create Agent Tool Metadata
   * Create an agent tool metadata.
   *
   * Args:
   * session (DBSessionDep): Database session.
   * agent_id (str): Agent ID.
   * agent_tool_metadata (CreateAgentToolMetadata): Agent tool metadata data.
   * request (Request): Request object.
   *
   * Returns:
   * AgentToolMetadata: Created agent tool metadata.
   *
   * Raises:
   * HTTPException: If the agent tool metadata creation fails.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @returns AgentToolMetadataPublic Successful Response
   * @throws ApiError
   */
  public createAgentToolMetadataV1AgentsAgentIdToolMetadataPost(
    data: CreateAgentToolMetadataV1AgentsAgentIdToolMetadataPostData
  ): CancelablePromise<CreateAgentToolMetadataV1AgentsAgentIdToolMetadataPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/agents/{agent_id}/tool-metadata',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Agent Tool Metadata
   * Update an agent tool metadata by ID.
   *
   * Args:
   * agent_id (str): Agent ID.
   * agent_tool_metadata_id (str): Agent tool metadata ID.
   * session (DBSessionDep): Database session.
   * new_agent_tool_metadata (UpdateAgentToolMetadata): New agent tool metadata data.
   * request (Request): Request object.
   *
   * Returns:
   * AgentToolMetadata: Updated agent tool metadata.
   *
   * Raises:
   * HTTPException: If the agent tool metadata with the given ID is not found.
   * HTTPException: If the agent tool metadata update fails.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.agentToolMetadataId
   * @param data.requestBody
   * @returns AgentToolMetadata Successful Response
   * @throws ApiError
   */
  public updateAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdPut(
    data: UpdateAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdPutData
  ): CancelablePromise<UpdateAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/agents/{agent_id}/tool-metadata/{agent_tool_metadata_id}',
      path: {
        agent_id: data.agentId,
        agent_tool_metadata_id: data.agentToolMetadataId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Agent Tool Metadata
   * Delete an agent tool metadata by ID.
   *
   * Args:
   * agent_id (str): Agent ID.
   * agent_tool_metadata_id (str): Agent tool metadata ID.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   *
   * Returns:
   * DeleteAgentToolMetadata: Empty response.
   *
   * Raises:
   * HTTPException: If the agent tool metadata with the given ID is not found.
   * HTTPException: If the agent tool metadata deletion fails.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.agentToolMetadataId
   * @returns DeleteAgentToolMetadata Successful Response
   * @throws ApiError
   */
  public deleteAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdDelete(
    data: DeleteAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdDeleteData
  ): CancelablePromise<DeleteAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/agents/{agent_id}/tool-metadata/{agent_tool_metadata_id}',
      path: {
        agent_id: data.agentId,
        agent_tool_metadata_id: data.agentToolMetadataId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Snapshots
   * List all snapshots.
   *
   * Args:
   * session (DBSessionDep): Database session.
   * request (Request): HTTP request object.
   *
   * Returns:
   * list[Snapshot]: List of all snapshots.
   * @returns SnapshotWithLinks Successful Response
   * @throws ApiError
   */
  public listSnapshotsV1SnapshotsGet(): CancelablePromise<ListSnapshotsV1SnapshotsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/snapshots',
    });
  }

  /**
   * Create Snapshot
   * Create a new snapshot and snapshot link to share the conversation.
   *
   * Args:
   * snapshot_request (CreateSnapshot): Snapshot creation request.
   * session (DBSessionDep): Database session.
   * request (Request): HTTP request object.
   *
   * Returns:
   * CreateSnapshotResponse: Snapshot creation response.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns CreateSnapshotResponse Successful Response
   * @throws ApiError
   */
  public createSnapshotV1SnapshotsPost(
    data: CreateSnapshotV1SnapshotsPostData
  ): CancelablePromise<CreateSnapshotV1SnapshotsPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/snapshots',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Snapshot
   * Get a snapshot by link ID.
   *
   * Args:
   * link_id (str): Snapshot link ID.
   * session (DBSessionDep): Database session.
   * request (Request): HTTP request object.
   *
   * Returns:
   * Snapshot: Snapshot with the given link ID.
   * @param data The data for the request.
   * @param data.linkId
   * @returns Snapshot Successful Response
   * @throws ApiError
   */
  public getSnapshotV1SnapshotsLinkLinkIdGet(
    data: GetSnapshotV1SnapshotsLinkLinkIdGetData
  ): CancelablePromise<GetSnapshotV1SnapshotsLinkLinkIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/snapshots/link/{link_id}',
      path: {
        link_id: data.linkId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Snapshot Link
   * Delete a snapshot link by ID.
   *
   * Args:
   * link_id (str): Snapshot link ID.
   * session (DBSessionDep): Database session.
   * request (Request): HTTP request object.
   *
   * Returns:
   * Any: Empty response.
   * @param data The data for the request.
   * @param data.linkId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public deleteSnapshotLinkV1SnapshotsLinkLinkIdDelete(
    data: DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteData
  ): CancelablePromise<DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/snapshots/link/{link_id}',
      path: {
        link_id: data.linkId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Snapshot
   * Delete a snapshot by ID.
   *
   * Args:
   * snapshot_id (str): Snapshot ID.
   * session (DBSessionDep): Database session.
   * request (Request): HTTP request object.
   *
   * Returns:
   * Any: Empty response.
   * @param data The data for the request.
   * @param data.snapshotId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public deleteSnapshotV1SnapshotsSnapshotIdDelete(
    data: DeleteSnapshotV1SnapshotsSnapshotIdDeleteData
  ): CancelablePromise<DeleteSnapshotV1SnapshotsSnapshotIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/snapshots/{snapshot_id}',
      path: {
        snapshot_id: data.snapshotId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Health
   * Health check for backend APIs
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public healthHealthGet(): CancelablePromise<HealthHealthGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/health',
    });
  }

  /**
   * Apply Migrations
   * Applies Alembic migrations - useful for serverless applications
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public applyMigrationsMigratePost(): CancelablePromise<ApplyMigrationsMigratePostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/migrate',
    });
  }
}
