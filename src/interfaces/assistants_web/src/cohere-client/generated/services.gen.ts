// This file is auto-generated by @hey-api/openapi-ts
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { CancelablePromise } from './core/CancelablePromise';
import type {
  AgentStatsV1AgentsAgentIdStatsGetData,
  AgentStatsV1AgentsAgentIdStatsGetResponse,
  AuthorizeV1StrategyAuthPostData,
  AuthorizeV1StrategyAuthPostResponse,
  BatchUploadFileV1AgentsBatchUploadFilePostData,
  BatchUploadFileV1AgentsBatchUploadFilePostResponse,
  BatchUploadFileV1ConversationsBatchUploadFilePostData,
  BatchUploadFileV1ConversationsBatchUploadFilePostResponse,
  CallToolV1AgentsAgentIdToolToolIdPostData,
  CallToolV1AgentsAgentIdToolToolIdPostResponse,
  ChatStreamV1ChatStreamPostData,
  ChatStreamV1ChatStreamPostResponse,
  ChatV1ChatPostData,
  ChatV1ChatPostResponse,
  CheckFileAccessV1ToolsToolIdCheckDocumentAccessPostData,
  CheckFileAccessV1ToolsToolIdCheckDocumentAccessPostResponse,
  CreateAgentV1AgentsPostData,
  CreateAgentV1AgentsPostResponse,
  CreateSnapshotV1SnapshotsPostData,
  CreateSnapshotV1SnapshotsPostResponse,
  CreateTemplateV1WorkflowsTemplatesPostData,
  CreateTemplateV1WorkflowsTemplatesPostResponse,
  CreateUserV1UsersPostData,
  CreateUserV1UsersPostResponse,
  DeleteAgentV1AgentsAgentIdDeleteData,
  DeleteAgentV1AgentsAgentIdDeleteResponse,
  DeleteConversationV1ConversationsConversationIdDeleteData,
  DeleteConversationV1ConversationsConversationIdDeleteResponse,
  DeleteFileV1ConversationsConversationIdFilesFileIdDeleteData,
  DeleteFileV1ConversationsConversationIdFilesFileIdDeleteResponse,
  DeleteGithubTokenV1GithubTokensDeleteResponse,
  DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteData,
  DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteResponse,
  DeleteSnapshotV1SnapshotsSnapshotIdDeleteData,
  DeleteSnapshotV1SnapshotsSnapshotIdDeleteResponse,
  DeleteTemplateV1WorkflowsTemplatesTemplateIdDeleteData,
  DeleteTemplateV1WorkflowsTemplatesTemplateIdDeleteResponse,
  DeleteToolAuthV1ToolAuthToolIdDeleteData,
  DeleteToolAuthV1ToolAuthToolIdDeleteResponse,
  DeleteUserV1UsersUserIdDeleteData,
  DeleteUserV1UsersUserIdDeleteResponse,
  GenerateRealTimePromptSuggestionV1ConversationsConversationIdSuggestPromptPostData,
  GenerateRealTimePromptSuggestionV1ConversationsConversationIdSuggestPromptPostResponse,
  GenerateTitleV1ConversationsConversationIdGenerateTitlePostData,
  GenerateTitleV1ConversationsConversationIdGenerateTitlePostResponse,
  GetAgentByIdV1AgentsAgentIdGetData,
  GetAgentByIdV1AgentsAgentIdGetResponse,
  GetAgentConversationJobsV1AgentsAgentIdConversationJobsGetData,
  GetAgentConversationJobsV1AgentsAgentIdConversationJobsGetResponse,
  GetAgentJobsV1AgentsAgentIdJobsGetData,
  GetAgentJobsV1AgentsAgentIdJobsGetResponse,
  GetConversationJobsV1ConversationsConversationIdJobsGetData,
  GetConversationJobsV1ConversationsConversationIdJobsGetResponse,
  GetConversationV1ConversationsConversationIdGetData,
  GetConversationV1ConversationsConversationIdGetResponse,
  GetDefaultAgentV1DefaultAgentGetResponse,
  GetFeedbackV1FeedbackGetData,
  GetFeedbackV1FeedbackGetResponse,
  GetMeSubscriptionsV1UsersMeToolIdSubscriptionsGetData,
  GetMeSubscriptionsV1UsersMeToolIdSubscriptionsGetResponse,
  GetMeV1UsersMeGetResponse,
  GetRecommendationsV1RecommendationsGetResponse,
  GetRunDetailsV1WorkflowsRunsRunIdGetData,
  GetRunDetailsV1WorkflowsRunsRunIdGetResponse,
  GetSnapshotV1SnapshotsLinkLinkIdGetData,
  GetSnapshotV1SnapshotsLinkLinkIdGetResponse,
  GetStatsV1UsersStatsGetData,
  GetStatsV1UsersStatsGetResponse,
  GetStrategiesV1AuthStrategiesGetResponse,
  GetTemplateDetailsV1WorkflowsTemplatesTemplateIdGetData,
  GetTemplateDetailsV1WorkflowsTemplatesTemplateIdGetResponse,
  GetToolArtifactsV1ToolsToolIdArtifactsGetData,
  GetToolArtifactsV1ToolsToolIdArtifactsGetResponse,
  GetVersionV1VersionGetResponse,
  HealthHealthGetResponse,
  HealthV1WebhooksHealthGetResponse,
  ListAgentsV1AgentsGetData,
  ListAgentsV1AgentsGetResponse,
  ListAllRunsV1WorkflowsRunsGetResponse,
  ListAvailableTemplatesV1WorkflowsTemplatesGetResponse,
  ListConversationsV1ConversationsGetData,
  ListConversationsV1ConversationsGetResponse,
  ListFilesV1ConversationsConversationIdFilesGetData,
  ListFilesV1ConversationsConversationIdFilesGetResponse,
  ListGithubReposV1GithubReposGetResponse,
  ListModelsV1ModelsGetResponse,
  ListSnapshotsV1SnapshotsGetData,
  ListSnapshotsV1SnapshotsGetResponse,
  ListToolsV1ToolsGetData,
  ListToolsV1ToolsGetResponse,
  LoginV1LoginPostData,
  LoginV1LoginPostResponse,
  LogoutV1LogoutGetResponse,
  MetricsMetricsGetResponse,
  PostFeedbackV1FeedbackPostData,
  PostFeedbackV1FeedbackPostResponse,
  ReceiveAzureLifecycleWebhookV1WebhooksLifecycleAzurePostData,
  ReceiveAzureLifecycleWebhookV1WebhooksLifecycleAzurePostResponse,
  ReceiveAzureWebhookV1WebhooksAzureUserIdPostData,
  ReceiveAzureWebhookV1WebhooksAzureUserIdPostResponse,
  RegisterGithubTokenV1GithubTokensPostData,
  RegisterGithubTokenV1GithubTokensPostResponse,
  ResetAgentV1DefaultAgentResetPostResponse,
  SearchConversationsV1ConversationsSearchGetData,
  SearchConversationsV1ConversationsSearchGetResponse,
  SearchToolV1AgentsAgentIdSearchToolGetData,
  SearchToolV1AgentsAgentIdSearchToolGetResponse,
  SearchV1AgentsAgentIdSearchGetData,
  SearchV1AgentsAgentIdSearchGetResponse,
  StartRunV1WorkflowsRunsStartPostData,
  StartRunV1WorkflowsRunsStartPostResponse,
  SyncAgentToolArtifactsV1AgentsAgentIdToolToolIdSyncPostData,
  SyncAgentToolArtifactsV1AgentsAgentIdToolToolIdSyncPostResponse,
  ToolAuthV1ToolAuthGetResponse,
  UpdateAgentV1AgentsAgentIdPutData,
  UpdateAgentV1AgentsAgentIdPutResponse,
  UpdateConversationV1ConversationsConversationIdPutData,
  UpdateConversationV1ConversationsConversationIdPutResponse,
  UpdateMessageV1MessagesMessageIdPostData,
  UpdateMessageV1MessagesMessageIdPostResponse,
  UpdateUserV1UsersUserIdPutData,
  UpdateUserV1UsersUserIdPutResponse,
} from './types.gen';

export class DefaultService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Metrics
   * Endpoint that serves Prometheus metrics.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public metricsMetricsGet(): CancelablePromise<MetricsMetricsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/metrics',
    });
  }

  /**
   * Get Strategies
   * @returns ListAuthStrategy Successful Response
   * @throws ApiError
   */
  public getStrategiesV1AuthStrategiesGet(): CancelablePromise<GetStrategiesV1AuthStrategiesGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/auth_strategies',
    });
  }

  /**
   * Login
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public loginV1LoginPost(data: LoginV1LoginPostData): CancelablePromise<LoginV1LoginPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/login',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Authorize
   * @param data The data for the request.
   * @param data.strategy
   * @param data.code
   * @returns JWTResponse Successful Response
   * @throws ApiError
   */
  public authorizeV1StrategyAuthPost(
    data: AuthorizeV1StrategyAuthPostData
  ): CancelablePromise<AuthorizeV1StrategyAuthPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/{strategy}/auth',
      path: {
        strategy: data.strategy,
      },
      query: {
        code: data.code,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Logout
   * @returns Logout Successful Response
   * @throws ApiError
   */
  public logoutV1LogoutGet(): CancelablePromise<LogoutV1LogoutGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/logout',
    });
  }

  /**
   * Tool Auth
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public toolAuthV1ToolAuthGet(): CancelablePromise<ToolAuthV1ToolAuthGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/tool/auth',
    });
  }

  /**
   * Delete Tool Auth
   * @param data The data for the request.
   * @param data.toolId
   * @returns DeleteToolAuth Successful Response
   * @throws ApiError
   */
  public deleteToolAuthV1ToolAuthToolIdDelete(
    data: DeleteToolAuthV1ToolAuthToolIdDeleteData
  ): CancelablePromise<DeleteToolAuthV1ToolAuthToolIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/tool/auth/{tool_id}',
      path: {
        tool_id: data.toolId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Chat Stream
   * Stream chat endpoint to handle user messages and return chatbot responses.
   *
   * Args:
   * session (DBSessionDep): Database session.
   * chat_request (CohereChatRequest): Chat request data.
   * request (Request): Request object.
   * ctx (Context): Context object.
   *
   * Returns:
   * EventSourceResponse: Server-sent event response with chatbot responses.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.conversationType
   * @param data.stateless
   * @returns ChatResponseEvent Successful Response
   * @throws ApiError
   */
  public chatStreamV1ChatStreamPost(
    data: ChatStreamV1ChatStreamPostData
  ): CancelablePromise<ChatStreamV1ChatStreamPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/chat-stream',
      headers: {
        stateless: data.stateless,
      },
      query: {
        conversation_type: data.conversationType,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Chat
   * Chat endpoint to handle user messages and return chatbot responses.
   *
   * Args:
   * chat_request (CohereChatRequest): Chat request data.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   * ctx (Context): Context object.
   * stateless (bool): Flag to for stateless inference.
   *
   * Returns:
   * NonStreamedChatResponse: Chatbot response.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.conversationType
   * @param data.stateless
   * @returns NonStreamedChatResponse Successful Response
   * @throws ApiError
   */
  public chatV1ChatPost(data: ChatV1ChatPostData): CancelablePromise<ChatV1ChatPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/chat',
      headers: {
        stateless: data.stateless,
      },
      query: {
        conversation_type: data.conversationType,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Me
   * @returns User Successful Response
   * @throws ApiError
   */
  public getMeV1UsersMeGet(): CancelablePromise<GetMeV1UsersMeGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/users/me',
    });
  }

  /**
   * Get Stats
   * @param data The data for the request.
   * @param data.fromDate
   * @param data.toDate
   * @returns UserStats Successful Response
   * @throws ApiError
   */
  public getStatsV1UsersStatsGet(
    data: GetStatsV1UsersStatsGetData = {}
  ): CancelablePromise<GetStatsV1UsersStatsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/users/stats',
      query: {
        from_date: data.fromDate,
        to_date: data.toDate,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Me Subscriptions
   * @param data The data for the request.
   * @param data.toolId
   * @returns MicrosoftSubscription Successful Response
   * @throws ApiError
   */
  public getMeSubscriptionsV1UsersMeToolIdSubscriptionsGet(
    data: GetMeSubscriptionsV1UsersMeToolIdSubscriptionsGetData
  ): CancelablePromise<GetMeSubscriptionsV1UsersMeToolIdSubscriptionsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/users/me/{tool_id}/subscriptions',
      path: {
        tool_id: data.toolId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update User
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns User Successful Response
   * @throws ApiError
   */
  public updateUserV1UsersUserIdPut(
    data: UpdateUserV1UsersUserIdPutData
  ): CancelablePromise<UpdateUserV1UsersUserIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/users/{user_id}',
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete User
   * @param data The data for the request.
   * @param data.userId
   * @returns DeleteUser Successful Response
   * @throws ApiError
   */
  public deleteUserV1UsersUserIdDelete(
    data: DeleteUserV1UsersUserIdDeleteData
  ): CancelablePromise<DeleteUserV1UsersUserIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/users/{user_id}',
      path: {
        user_id: data.userId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Conversation
   * Get a conversation by ID. This will return the conversation with all messages and files.
   * Raises error 404 if the conversation does not exist for the user.
   * @param data The data for the request.
   * @param data.conversationId
   * @returns ConversationPublic Successful Response
   * @throws ApiError
   */
  public getConversationV1ConversationsConversationIdGet(
    data: GetConversationV1ConversationsConversationIdGetData
  ): CancelablePromise<GetConversationV1ConversationsConversationIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/conversations/{conversation_id}',
      path: {
        conversation_id: data.conversationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Conversation
   * Update a conversation by ID with the new values provided.
   * Raises error 404 if the conversation does not exist for the user.
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.requestBody
   * @returns ConversationPublic Successful Response
   * @throws ApiError
   */
  public updateConversationV1ConversationsConversationIdPut(
    data: UpdateConversationV1ConversationsConversationIdPutData
  ): CancelablePromise<UpdateConversationV1ConversationsConversationIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/conversations/{conversation_id}',
      path: {
        conversation_id: data.conversationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Conversation
   * Delete a conversation by ID. This will delete the conversation, messages, files, snapshots and any other related data.
   * Raises error 404 if the conversation does not exist for the user.
   * @param data The data for the request.
   * @param data.conversationId
   * @returns DeleteConversationResponse Successful Response
   * @throws ApiError
   */
  public deleteConversationV1ConversationsConversationIdDelete(
    data: DeleteConversationV1ConversationsConversationIdDeleteData
  ): CancelablePromise<DeleteConversationV1ConversationsConversationIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/conversations/{conversation_id}',
      path: {
        conversation_id: data.conversationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Conversations
   * List conversations for the user.
   * @param data The data for the request.
   * @param data.offset
   * @param data.limit
   * @param data.agentId
   * @returns ConversationWithoutMessages Successful Response
   * @throws ApiError
   */
  public listConversationsV1ConversationsGet(
    data: ListConversationsV1ConversationsGetData = {}
  ): CancelablePromise<ListConversationsV1ConversationsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/conversations',
      query: {
        offset: data.offset,
        limit: data.limit,
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Search Conversations
   * Search conversations for the user using Rerank and the query provided.
   * @param data The data for the request.
   * @param data.query
   * @param data.offset
   * @param data.limit
   * @param data.agentId
   * @returns ConversationWithoutMessages Successful Response
   * @throws ApiError
   */
  public searchConversationsV1ConversationsSearchGet(
    data: SearchConversationsV1ConversationsSearchGetData
  ): CancelablePromise<SearchConversationsV1ConversationsSearchGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/conversations:search',
      query: {
        query: data.query,
        offset: data.offset,
        limit: data.limit,
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Batch Upload File
   * Upload multiple files to a conversation.
   * Raises error 400 if all files are empty or too large.
   * @param data The data for the request.
   * @param data.formData
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public batchUploadFileV1ConversationsBatchUploadFilePost(
    data: BatchUploadFileV1ConversationsBatchUploadFilePostData
  ): CancelablePromise<BatchUploadFileV1ConversationsBatchUploadFilePostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/conversations/batch_upload_file',
      formData: data.formData,
      mediaType: 'multipart/form-data',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Files
   * List files for a conversation.
   * Raises error 404 if the conversation does not exist for the user.
   * @param data The data for the request.
   * @param data.conversationId
   * @returns ListConversationFile Successful Response
   * @throws ApiError
   */
  public listFilesV1ConversationsConversationIdFilesGet(
    data: ListFilesV1ConversationsConversationIdFilesGetData
  ): CancelablePromise<ListFilesV1ConversationsConversationIdFilesGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/conversations/{conversation_id}/files',
      path: {
        conversation_id: data.conversationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete File
   * Delete a file from a conversation.
   * Raises error 404 if the file does not exist for the user.
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.fileId
   * @returns DeleteConversationFileResponse Successful Response
   * @throws ApiError
   */
  public deleteFileV1ConversationsConversationIdFilesFileIdDelete(
    data: DeleteFileV1ConversationsConversationIdFilesFileIdDeleteData
  ): CancelablePromise<DeleteFileV1ConversationsConversationIdFilesFileIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/conversations/{conversation_id}/files/{file_id}',
      path: {
        conversation_id: data.conversationId,
        file_id: data.fileId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Conversation Jobs
   * Get all job statuses for a conversation.
   * @param data The data for the request.
   * @param data.conversationId
   * @returns ConversationJobStatus Successful Response
   * @throws ApiError
   */
  public getConversationJobsV1ConversationsConversationIdJobsGet(
    data: GetConversationJobsV1ConversationsConversationIdJobsGetData
  ): CancelablePromise<GetConversationJobsV1ConversationsConversationIdJobsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/conversations/{conversation_id}/jobs',
      path: {
        conversation_id: data.conversationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Generate Title
   * Generate a title for a conversation.
   * Raises error 404 if the conversation does not exist for the user.
   * @param data The data for the request.
   * @param data.conversationId
   * @returns GenerateTitleResponse Successful Response
   * @throws ApiError
   */
  public generateTitleV1ConversationsConversationIdGenerateTitlePost(
    data: GenerateTitleV1ConversationsConversationIdGenerateTitlePostData
  ): CancelablePromise<GenerateTitleV1ConversationsConversationIdGenerateTitlePostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/conversations/{conversation_id}/generate-title',
      path: {
        conversation_id: data.conversationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Generate Real Time Prompt Suggestion
   * Generate a prompt suggestion in real-time.
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.requestBody
   * @returns PromptSuggestionResponse Successful Response
   * @throws ApiError
   */
  public generateRealTimePromptSuggestionV1ConversationsConversationIdSuggestPromptPost(
    data: GenerateRealTimePromptSuggestionV1ConversationsConversationIdSuggestPromptPostData
  ): CancelablePromise<GenerateRealTimePromptSuggestionV1ConversationsConversationIdSuggestPromptPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/conversations/{conversation_id}/suggest-prompt',
      path: {
        conversation_id: data.conversationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Tools
   * List all available tools.
   *
   * Args:
   * request (Request): The request to validate
   * session (DBSessionDep): Database session.
   * agent_id (str): Agent ID.
   * ctx (Context): Context object.
   * Returns:
   * list[ToolResponse]: List of available tools.
   * @param data The data for the request.
   * @param data.agentId
   * @returns ToolResponse Successful Response
   * @throws ApiError
   */
  public listToolsV1ToolsGet(
    data: ListToolsV1ToolsGetData = {}
  ): CancelablePromise<ListToolsV1ToolsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/tools',
      query: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Check File Access
   * Given a list of document ids, check if the user has access to the document. Currently only implemented for google drive.
   *
   * Args:
   * tool_id (str): Tool ID.
   * request (CheckDocumentAccessRequest): The request to validate
   * session (DBSessionDep): Database session.
   * ctx (Context): Context object.
   * Returns:
   * dict[str, bool]: Dictionary of document ids and whether the user has access to them.
   * @param data The data for the request.
   * @param data.toolId
   * @param data.requestBody
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public checkFileAccessV1ToolsToolIdCheckDocumentAccessPost(
    data: CheckFileAccessV1ToolsToolIdCheckDocumentAccessPostData
  ): CancelablePromise<CheckFileAccessV1ToolsToolIdCheckDocumentAccessPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/tools/{tool_id}/check_document_access',
      path: {
        tool_id: data.toolId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Tool Artifacts
   * @param data The data for the request.
   * @param data.toolId
   * @returns ToolArtifacts Successful Response
   * @throws ApiError
   */
  public getToolArtifactsV1ToolsToolIdArtifactsGet(
    data: GetToolArtifactsV1ToolsToolIdArtifactsGetData
  ): CancelablePromise<GetToolArtifactsV1ToolsToolIdArtifactsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/tools/{tool_id}/artifacts',
      path: {
        tool_id: data.toolId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Create Agent
   * Create a new agent for the user
   * Raises error 500 if the agent creation fails
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AgentPublic Successful Response
   * @throws ApiError
   */
  public createAgentV1AgentsPost(
    data: CreateAgentV1AgentsPostData
  ): CancelablePromise<CreateAgentV1AgentsPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/agents',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Agents
   * List all agents for the user
   * @param data The data for the request.
   * @param data.offset
   * @param data.limit
   * @param data.visibility
   * @param data.organizationId
   * @returns AgentPublic Successful Response
   * @throws ApiError
   */
  public listAgentsV1AgentsGet(
    data: ListAgentsV1AgentsGetData = {}
  ): CancelablePromise<ListAgentsV1AgentsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/agents',
      query: {
        offset: data.offset,
        limit: data.limit,
        visibility: data.visibility,
        organization_id: data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Agent By Id
   * Get an agent by id
   * Raises error 404 if the agent does not exist
   * @param data The data for the request.
   * @param data.agentId
   * @returns AgentPublic Successful Response
   * @throws ApiError
   */
  public getAgentByIdV1AgentsAgentIdGet(
    data: GetAgentByIdV1AgentsAgentIdGetData
  ): CancelablePromise<GetAgentByIdV1AgentsAgentIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/agents/{agent_id}',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Agent
   * Update an agent
   * Raises error 404 if the agent does not exist
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @returns AgentPublic Successful Response
   * @throws ApiError
   */
  public updateAgentV1AgentsAgentIdPut(
    data: UpdateAgentV1AgentsAgentIdPutData
  ): CancelablePromise<UpdateAgentV1AgentsAgentIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/agents/{agent_id}',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Agent
   * Delete an agent. This will delete the agent, conversations, files, snapshots and any other related data.
   * Raises error 404 if the agent does not exist
   * @param data The data for the request.
   * @param data.agentId
   * @returns DeleteAgent Successful Response
   * @throws ApiError
   */
  public deleteAgentV1AgentsAgentIdDelete(
    data: DeleteAgentV1AgentsAgentIdDeleteData
  ): CancelablePromise<DeleteAgentV1AgentsAgentIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/agents/{agent_id}',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Agent Jobs
   * Get all jobs for an agent
   * @param data The data for the request.
   * @param data.agentId
   * @returns AgentJobResponse Successful Response
   * @throws ApiError
   */
  public getAgentJobsV1AgentsAgentIdJobsGet(
    data: GetAgentJobsV1AgentsAgentIdJobsGetData
  ): CancelablePromise<GetAgentJobsV1AgentsAgentIdJobsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/agents/{agent_id}/jobs',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Agent Conversation Jobs
   * @param data The data for the request.
   * @param data.agentId
   * @returns AgentConversationJobResponse Successful Response
   * @throws ApiError
   */
  public getAgentConversationJobsV1AgentsAgentIdConversationJobsGet(
    data: GetAgentConversationJobsV1AgentsAgentIdConversationJobsGetData
  ): CancelablePromise<GetAgentConversationJobsV1AgentsAgentIdConversationJobsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/agents/{agent_id}/conversation_jobs',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Search
   * @param data The data for the request.
   * @param data.agentId
   * @param data.q
   * @returns SearchResponse Successful Response
   * @throws ApiError
   */
  public searchV1AgentsAgentIdSearchGet(
    data: SearchV1AgentsAgentIdSearchGetData
  ): CancelablePromise<SearchV1AgentsAgentIdSearchGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/agents/{agent_id}/search',
      path: {
        agent_id: data.agentId,
      },
      query: {
        q: data.q,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Search Tool
   * @param data The data for the request.
   * @param data.agentId
   * @param data.q
   * @param data.checkTool
   * @returns SearchResponse Successful Response
   * @throws ApiError
   */
  public searchToolV1AgentsAgentIdSearchToolGet(
    data: SearchToolV1AgentsAgentIdSearchToolGetData
  ): CancelablePromise<SearchToolV1AgentsAgentIdSearchToolGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/agents/{agent_id}/search_tool',
      path: {
        agent_id: data.agentId,
      },
      query: {
        q: data.q,
        check_tool: data.checkTool,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Batch Upload File
   * @param data The data for the request.
   * @param data.formData
   * @returns UploadAgentFileResponse Successful Response
   * @throws ApiError
   */
  public batchUploadFileV1AgentsBatchUploadFilePost(
    data: BatchUploadFileV1AgentsBatchUploadFilePostData
  ): CancelablePromise<BatchUploadFileV1AgentsBatchUploadFilePostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/agents/batch_upload_file',
      formData: data.formData,
      mediaType: 'multipart/form-data',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Agent Stats
   * @param data The data for the request.
   * @param data.agentId
   * @returns AgentStats Successful Response
   * @throws ApiError
   */
  public agentStatsV1AgentsAgentIdStatsGet(
    data: AgentStatsV1AgentsAgentIdStatsGetData
  ): CancelablePromise<AgentStatsV1AgentsAgentIdStatsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/agents/{agent_id}/stats',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Sync Agent Tool Artifacts
   * @param data The data for the request.
   * @param data.agentId
   * @param data.toolId
   * @returns SyncAgentToolResponse Successful Response
   * @throws ApiError
   */
  public syncAgentToolArtifactsV1AgentsAgentIdToolToolIdSyncPost(
    data: SyncAgentToolArtifactsV1AgentsAgentIdToolToolIdSyncPostData
  ): CancelablePromise<SyncAgentToolArtifactsV1AgentsAgentIdToolToolIdSyncPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/agents/{agent_id}/tool/{tool_id}/sync',
      path: {
        agent_id: data.agentId,
        tool_id: data.toolId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Call Tool
   * @param data The data for the request.
   * @param data.agentId
   * @param data.toolId
   * @param data.requestBody
   * @returns CallToolResponse Successful Response
   * @throws ApiError
   */
  public callToolV1AgentsAgentIdToolToolIdPost(
    data: CallToolV1AgentsAgentIdToolToolIdPostData
  ): CancelablePromise<CallToolV1AgentsAgentIdToolToolIdPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/agents/{agent_id}/tool/{tool_id}',
      path: {
        agent_id: data.agentId,
        tool_id: data.toolId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Register Github Token
   * @param data The data for the request.
   * @param data.requestBody
   * @returns GHUserPublic Successful Response
   * @throws ApiError
   */
  public registerGithubTokenV1GithubTokensPost(
    data: RegisterGithubTokenV1GithubTokensPostData
  ): CancelablePromise<RegisterGithubTokenV1GithubTokensPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/github/tokens',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Github Token
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public deleteGithubTokenV1GithubTokensDelete(): CancelablePromise<DeleteGithubTokenV1GithubTokensDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/github/tokens',
    });
  }

  /**
   * List Github Repos
   * @returns RelevantRepoDetails Successful Response
   * @throws ApiError
   */
  public listGithubReposV1GithubReposGet(): CancelablePromise<ListGithubReposV1GithubReposGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/github/repos',
    });
  }

  /**
   * Get Default Agent
   * @returns AgentPublic Successful Response
   * @throws ApiError
   */
  public getDefaultAgentV1DefaultAgentGet(): CancelablePromise<GetDefaultAgentV1DefaultAgentGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/default_agent/',
    });
  }

  /**
   * Reset Agent
   * @returns AgentPublic Successful Response
   * @throws ApiError
   */
  public resetAgentV1DefaultAgentResetPost(): CancelablePromise<ResetAgentV1DefaultAgentResetPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/default_agent/reset',
    });
  }

  /**
   * Create Snapshot
   * @param data The data for the request.
   * @param data.requestBody
   * @returns CreateSnapshotResponse Successful Response
   * @throws ApiError
   */
  public createSnapshotV1SnapshotsPost(
    data: CreateSnapshotV1SnapshotsPostData
  ): CancelablePromise<CreateSnapshotV1SnapshotsPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/snapshots',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Snapshots
   * @param data The data for the request.
   * @param data.conversationId
   * @returns SnapshotWithLinks Successful Response
   * @throws ApiError
   */
  public listSnapshotsV1SnapshotsGet(
    data: ListSnapshotsV1SnapshotsGetData = {}
  ): CancelablePromise<ListSnapshotsV1SnapshotsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/snapshots',
      query: {
        conversation_id: data.conversationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Snapshot
   * @param data The data for the request.
   * @param data.linkId
   * @returns SnapshotPublic Successful Response
   * @throws ApiError
   */
  public getSnapshotV1SnapshotsLinkLinkIdGet(
    data: GetSnapshotV1SnapshotsLinkLinkIdGetData
  ): CancelablePromise<GetSnapshotV1SnapshotsLinkLinkIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/snapshots/link/{link_id}',
      path: {
        link_id: data.linkId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Snapshot Link
   * @param data The data for the request.
   * @param data.linkId
   * @returns DeleteSnapshotLinkResponse Successful Response
   * @throws ApiError
   */
  public deleteSnapshotLinkV1SnapshotsLinkLinkIdDelete(
    data: DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteData
  ): CancelablePromise<DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/snapshots/link/{link_id}',
      path: {
        link_id: data.linkId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Snapshot
   * @param data The data for the request.
   * @param data.snapshotId
   * @returns DeleteSnapshotResponse Successful Response
   * @throws ApiError
   */
  public deleteSnapshotV1SnapshotsSnapshotIdDelete(
    data: DeleteSnapshotV1SnapshotsSnapshotIdDeleteData
  ): CancelablePromise<DeleteSnapshotV1SnapshotsSnapshotIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/snapshots/{snapshot_id}',
      path: {
        snapshot_id: data.snapshotId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Message
   * @param data The data for the request.
   * @param data.messageId
   * @param data.requestBody
   * @returns UpdateMessageResponse Successful Response
   * @throws ApiError
   */
  public updateMessageV1MessagesMessageIdPost(
    data: UpdateMessageV1MessagesMessageIdPostData
  ): CancelablePromise<UpdateMessageV1MessagesMessageIdPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/messages/{message_id}',
      path: {
        message_id: data.messageId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Health
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public healthV1WebhooksHealthGet(): CancelablePromise<HealthV1WebhooksHealthGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/webhooks/health',
    });
  }

  /**
   * Receive Azure Webhook
   * - TODO: add unit tests for this endpoint
   * - Initial registration query param of webhook for user must be returned as is in plaintext with status code 200
   * - NOTE: Remember to validate the clientState in the payload value array
   * - See e2e test for example payload
   * @param data The data for the request.
   * @param data.userId
   * @param data.validationToken
   * @param data.requestBody
   * @returns string Successful Response
   * @throws ApiError
   */
  public receiveAzureWebhookV1WebhooksAzureUserIdPost(
    data: ReceiveAzureWebhookV1WebhooksAzureUserIdPostData
  ): CancelablePromise<ReceiveAzureWebhookV1WebhooksAzureUserIdPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/webhooks/azure/{user_id}',
      path: {
        user_id: data.userId,
      },
      query: {
        validationToken: data.validationToken,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Receive Azure Lifecycle Webhook
   * - Initial registration query param of webhook for user must be returned as is in plaintext with status code 200
   * - NOTE: Remember to validate the clientState in the payload value array
   * @param data The data for the request.
   * @param data.validationToken
   * @param data.requestBody
   * @returns string Successful Response
   * @throws ApiError
   */
  public receiveAzureLifecycleWebhookV1WebhooksLifecycleAzurePost(
    data: ReceiveAzureLifecycleWebhookV1WebhooksLifecycleAzurePostData = {}
  ): CancelablePromise<ReceiveAzureLifecycleWebhookV1WebhooksLifecycleAzurePostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/webhooks/lifecycle/azure',
      query: {
        validationToken: data.validationToken,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List All Runs
   * @returns RunBase Successful Response
   * @throws ApiError
   */
  public listAllRunsV1WorkflowsRunsGet(): CancelablePromise<ListAllRunsV1WorkflowsRunsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/workflows/runs',
    });
  }

  /**
   * Get Run Details
   * @param data The data for the request.
   * @param data.runId
   * @returns RunDetails Successful Response
   * @throws ApiError
   */
  public getRunDetailsV1WorkflowsRunsRunIdGet(
    data: GetRunDetailsV1WorkflowsRunsRunIdGetData
  ): CancelablePromise<GetRunDetailsV1WorkflowsRunsRunIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/workflows/runs/{run_id}',
      path: {
        run_id: data.runId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Start Run
   * @param data The data for the request.
   * @param data.requestBody
   * @returns StartRunResponse Successful Response
   * @throws ApiError
   */
  public startRunV1WorkflowsRunsStartPost(
    data: StartRunV1WorkflowsRunsStartPostData
  ): CancelablePromise<StartRunV1WorkflowsRunsStartPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/workflows/runs/start',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Available Templates
   * @returns TemplateBase Successful Response
   * @throws ApiError
   */
  public listAvailableTemplatesV1WorkflowsTemplatesGet(): CancelablePromise<ListAvailableTemplatesV1WorkflowsTemplatesGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/workflows/templates',
    });
  }

  /**
   * Create Template
   * @param data The data for the request.
   * @param data.requestBody
   * @returns CreateTemplateResponse Successful Response
   * @throws ApiError
   */
  public createTemplateV1WorkflowsTemplatesPost(
    data: CreateTemplateV1WorkflowsTemplatesPostData
  ): CancelablePromise<CreateTemplateV1WorkflowsTemplatesPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/workflows/templates',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Template Details
   * @param data The data for the request.
   * @param data.templateId
   * @returns TemplateDetails Successful Response
   * @throws ApiError
   */
  public getTemplateDetailsV1WorkflowsTemplatesTemplateIdGet(
    data: GetTemplateDetailsV1WorkflowsTemplatesTemplateIdGetData
  ): CancelablePromise<GetTemplateDetailsV1WorkflowsTemplatesTemplateIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/workflows/templates/{template_id}',
      path: {
        template_id: data.templateId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Template
   * @param data The data for the request.
   * @param data.templateId
   * @returns DeleteTemplateResponse Successful Response
   * @throws ApiError
   */
  public deleteTemplateV1WorkflowsTemplatesTemplateIdDelete(
    data: DeleteTemplateV1WorkflowsTemplatesTemplateIdDeleteData
  ): CancelablePromise<DeleteTemplateV1WorkflowsTemplatesTemplateIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/workflows/templates/{template_id}',
      path: {
        template_id: data.templateId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Recommendations
   * @returns RecommendationItem Successful Response
   * @throws ApiError
   */
  public getRecommendationsV1RecommendationsGet(): CancelablePromise<GetRecommendationsV1RecommendationsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/recommendations',
    });
  }

  /**
   * Post Feedback
   * Give feedback to a message. Adds the feedback to the database and creates a snapshot of the message.
   * Raises error 404 if the message does not exist for the user
   * @param data The data for the request.
   * @param data.requestBody
   * @returns PostFeedbackResponse Successful Response
   * @throws ApiError
   */
  public postFeedbackV1FeedbackPost(
    data: PostFeedbackV1FeedbackPostData
  ): CancelablePromise<PostFeedbackV1FeedbackPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/feedback',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Feedback
   * Get feedback from a date range. If no date range is provided, returns all feedback given by the user.
   * @param data The data for the request.
   * @param data.fromDate
   * @param data.toDate
   * @returns GetFeedbackResponse Successful Response
   * @throws ApiError
   */
  public getFeedbackV1FeedbackGet(
    data: GetFeedbackV1FeedbackGetData = {}
  ): CancelablePromise<GetFeedbackV1FeedbackGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/feedback',
      query: {
        from_date: data.fromDate,
        to_date: data.toDate,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Create User
   * @param data The data for the request.
   * @param data.requestBody
   * @returns CreateUserResponse Successful Response
   * @throws ApiError
   */
  public createUserV1UsersPost(
    data: CreateUserV1UsersPostData
  ): CancelablePromise<CreateUserV1UsersPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/users/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Version
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public getVersionV1VersionGet(): CancelablePromise<GetVersionV1VersionGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/version',
    });
  }

  /**
   * Health
   * Health check for backend APIs
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public healthHealthGet(): CancelablePromise<HealthHealthGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/health',
    });
  }

  /**
   * List Models
   * @returns ListModelsResponse Successful Response
   * @throws ApiError
   */
  public listModelsV1ModelsGet(): CancelablePromise<ListModelsV1ModelsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/models',
    });
  }
}
