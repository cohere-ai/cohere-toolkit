// This file is auto-generated by @hey-api/openapi-ts
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { CancelablePromise } from './core/CancelablePromise';
import type {
  AuthorizeV1StrategyAuthPostData,
  AuthorizeV1StrategyAuthPostResponse,
  BatchUploadFileV1AgentsBatchUploadFilePostData,
  BatchUploadFileV1AgentsBatchUploadFilePostResponse,
  BatchUploadFileV1ConversationsBatchUploadFilePostData,
  BatchUploadFileV1ConversationsBatchUploadFilePostResponse,
  ChatStreamV1ChatStreamPostData,
  ChatStreamV1ChatStreamPostResponse,
  ChatV1ChatPostData,
  ChatV1ChatPostResponse,
  CreateAgentToolMetadataV1AgentsAgentIdToolMetadataPostData,
  CreateAgentToolMetadataV1AgentsAgentIdToolMetadataPostResponse,
  CreateAgentV1AgentsPostData,
  CreateAgentV1AgentsPostResponse,
  CreateDeploymentV1DeploymentsPostData,
  CreateDeploymentV1DeploymentsPostResponse,
  CreateGroupScimV2GroupsPostData,
  CreateGroupScimV2GroupsPostResponse,
  CreateModelV1ModelsPostData,
  CreateModelV1ModelsPostResponse,
  CreateOrganizationV1OrganizationsPostData,
  CreateOrganizationV1OrganizationsPostResponse,
  CreateSnapshotV1SnapshotsPostData,
  CreateSnapshotV1SnapshotsPostResponse,
  CreateUserScimV2UsersPostData,
  CreateUserScimV2UsersPostResponse,
  CreateUserV1UsersPostData,
  CreateUserV1UsersPostResponse,
  DeleteAgentFileV1AgentsAgentIdFilesFileIdDeleteData,
  DeleteAgentFileV1AgentsAgentIdFilesFileIdDeleteResponse,
  DeleteAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdDeleteData,
  DeleteAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdDeleteResponse,
  DeleteAgentV1AgentsAgentIdDeleteData,
  DeleteAgentV1AgentsAgentIdDeleteResponse,
  DeleteConversationV1ConversationsConversationIdDeleteData,
  DeleteConversationV1ConversationsConversationIdDeleteResponse,
  DeleteDeploymentV1DeploymentsDeploymentIdDeleteData,
  DeleteDeploymentV1DeploymentsDeploymentIdDeleteResponse,
  DeleteFileV1ConversationsConversationIdFilesFileIdDeleteData,
  DeleteFileV1ConversationsConversationIdFilesFileIdDeleteResponse,
  DeleteGroupScimV2GroupsGroupIdDeleteData,
  DeleteGroupScimV2GroupsGroupIdDeleteResponse,
  DeleteModelV1ModelsModelIdDeleteData,
  DeleteModelV1ModelsModelIdDeleteResponse,
  DeleteOrganizationV1OrganizationsOrganizationIdDeleteData,
  DeleteOrganizationV1OrganizationsOrganizationIdDeleteResponse,
  DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteData,
  DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteResponse,
  DeleteSnapshotV1SnapshotsSnapshotIdDeleteData,
  DeleteSnapshotV1SnapshotsSnapshotIdDeleteResponse,
  DeleteToolAuthV1ToolAuthToolIdDeleteData,
  DeleteToolAuthV1ToolAuthToolIdDeleteResponse,
  DeleteUserV1UsersUserIdDeleteData,
  DeleteUserV1UsersUserIdDeleteResponse,
  GenerateTitleV1ConversationsConversationIdGenerateTitlePostData,
  GenerateTitleV1ConversationsConversationIdGenerateTitlePostResponse,
  GetAgentByIdV1AgentsAgentIdGetData,
  GetAgentByIdV1AgentsAgentIdGetResponse,
  GetAgentDeploymentV1AgentsAgentIdDeploymentsGetData,
  GetAgentDeploymentV1AgentsAgentIdDeploymentsGetResponse,
  GetAgentFileV1AgentsAgentIdFilesFileIdGetData,
  GetAgentFileV1AgentsAgentIdFilesFileIdGetResponse,
  GetConversationV1ConversationsConversationIdGetData,
  GetConversationV1ConversationsConversationIdGetResponse,
  GetDeploymentV1DeploymentsDeploymentIdGetData,
  GetDeploymentV1DeploymentsDeploymentIdGetResponse,
  GetFileV1ConversationsConversationIdFilesFileIdGetData,
  GetFileV1ConversationsConversationIdFilesFileIdGetResponse,
  GetGroupScimV2GroupsGroupIdGetData,
  GetGroupScimV2GroupsGroupIdGetResponse,
  GetGroupsScimV2GroupsGetData,
  GetGroupsScimV2GroupsGetResponse,
  GetModelV1ModelsModelIdGetData,
  GetModelV1ModelsModelIdGetResponse,
  GetOrganizationUsersV1OrganizationsOrganizationIdUsersGetData,
  GetOrganizationUsersV1OrganizationsOrganizationIdUsersGetResponse,
  GetOrganizationV1OrganizationsOrganizationIdGetData,
  GetOrganizationV1OrganizationsOrganizationIdGetResponse,
  GetSnapshotV1SnapshotsLinkLinkIdGetData,
  GetSnapshotV1SnapshotsLinkLinkIdGetResponse,
  GetStrategiesV1AuthStrategiesGetData,
  GetStrategiesV1AuthStrategiesGetResponse,
  GetUserScimV2UsersUserIdGetData,
  GetUserScimV2UsersUserIdGetResponse,
  GetUserV1UsersUserIdGetData,
  GetUserV1UsersUserIdGetResponse,
  GetUsersScimV2UsersGetData,
  GetUsersScimV2UsersGetResponse,
  HealthHealthGetResponse,
  ListAgentToolMetadataV1AgentsAgentIdToolMetadataGetData,
  ListAgentToolMetadataV1AgentsAgentIdToolMetadataGetResponse,
  ListAgentsV1AgentsGetData,
  ListAgentsV1AgentsGetResponse,
  ListConversationsV1ConversationsGetData,
  ListConversationsV1ConversationsGetResponse,
  ListDeploymentsV1DeploymentsGetData,
  ListDeploymentsV1DeploymentsGetResponse,
  ListExperimentalFeaturesV1ExperimentalFeaturesGetData,
  ListExperimentalFeaturesV1ExperimentalFeaturesGetResponse,
  ListFilesV1ConversationsConversationIdFilesGetData,
  ListFilesV1ConversationsConversationIdFilesGetResponse,
  ListModelsV1ModelsGetData,
  ListModelsV1ModelsGetResponse,
  ListOrganizationsV1OrganizationsGetData,
  ListOrganizationsV1OrganizationsGetResponse,
  ListSnapshotsV1SnapshotsGetData,
  ListSnapshotsV1SnapshotsGetResponse,
  ListToolsV1ToolsGetData,
  ListToolsV1ToolsGetResponse,
  ListUsersV1UsersGetData,
  ListUsersV1UsersGetResponse,
  LoginV1LoginPostData,
  LoginV1LoginPostResponse,
  LogoutV1LogoutGetData,
  LogoutV1LogoutGetResponse,
  PatchGroupScimV2GroupsGroupIdPatchData,
  PatchGroupScimV2GroupsGroupIdPatchResponse,
  PatchUserScimV2UsersUserIdPatchData,
  PatchUserScimV2UsersUserIdPatchResponse,
  RegenerateChatStreamV1ChatStreamRegeneratePostData,
  RegenerateChatStreamV1ChatStreamRegeneratePostResponse,
  SearchConversationsV1ConversationsSearchGetData,
  SearchConversationsV1ConversationsSearchGetResponse,
  SynthesizeMessageV1ConversationsConversationIdSynthesizeMessageIdGetData,
  SynthesizeMessageV1ConversationsConversationIdSynthesizeMessageIdGetResponse,
  ToggleConversationPinV1ConversationsConversationIdTogglePinPutData,
  ToggleConversationPinV1ConversationsConversationIdTogglePinPutResponse,
  ToolAuthV1ToolAuthGetData,
  ToolAuthV1ToolAuthGetResponse,
  UpdateAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdPutData,
  UpdateAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdPutResponse,
  UpdateAgentV1AgentsAgentIdPutData,
  UpdateAgentV1AgentsAgentIdPutResponse,
  UpdateConfigV1DeploymentsDeploymentIdUpdateConfigPostData,
  UpdateConfigV1DeploymentsDeploymentIdUpdateConfigPostResponse,
  UpdateConversationV1ConversationsConversationIdPutData,
  UpdateConversationV1ConversationsConversationIdPutResponse,
  UpdateDeploymentV1DeploymentsDeploymentIdPutData,
  UpdateDeploymentV1DeploymentsDeploymentIdPutResponse,
  UpdateModelV1ModelsModelIdPutData,
  UpdateModelV1ModelsModelIdPutResponse,
  UpdateOrganizationV1OrganizationsOrganizationIdPutData,
  UpdateOrganizationV1OrganizationsOrganizationIdPutResponse,
  UpdateUserScimV2UsersUserIdPutData,
  UpdateUserScimV2UsersUserIdPutResponse,
  UpdateUserV1UsersUserIdPutData,
  UpdateUserV1UsersUserIdPutResponse,
} from './types.gen';

export class AuthService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Get Strategies
   * Retrieves the currently enabled list of Authentication strategies.
   * @param data The data for the request.
   * @param data.organizationId
   * @returns ListAuthStrategy Successful Response
   * @throws ApiError
   */
  public getStrategiesV1AuthStrategiesGet(
    data: GetStrategiesV1AuthStrategiesGetData = {}
  ): CancelablePromise<GetStrategiesV1AuthStrategiesGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/auth_strategies',
      headers: {
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Login
   * Logs user in, performing basic email/password auth.
   * Verifies their credentials, retrieves the user and returns a JWT token.
   *
   * Raises:
   * HTTPException: If the strategy or payload are invalid, or if the login fails.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.organizationId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public loginV1LoginPost(data: LoginV1LoginPostData): CancelablePromise<LoginV1LoginPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/login',
      headers: {
        'Organization-Id': data.organizationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Authorize
   * Callback authorization endpoint used for OAuth providers after authenticating on the provider's login screen.
   *
   * Raises:
   * HTTPException: If authentication fails, or strategy is invalid.
   * @param data The data for the request.
   * @param data.strategy Name of strategy in question
   * @param data.code OAuth Code
   * @param data.organizationId
   * @returns JWTResponse Successful Response
   * @throws ApiError
   */
  public authorizeV1StrategyAuthPost(
    data: AuthorizeV1StrategyAuthPostData
  ): CancelablePromise<AuthorizeV1StrategyAuthPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/{strategy}/auth',
      path: {
        strategy: data.strategy,
      },
      headers: {
        'Organization-Id': data.organizationId,
      },
      query: {
        code: data.code,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Logout
   * Logs out the current user, adding the given JWT token to the blacklist.
   * @param data The data for the request.
   * @param data.authorization
   * @param data.organizationId
   * @returns Logout Successful Response
   * @throws ApiError
   */
  public logoutV1LogoutGet(
    data: LogoutV1LogoutGetData
  ): CancelablePromise<LogoutV1LogoutGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/logout',
      headers: {
        'Organization-Id': data.organizationId,
        authorization: data.authorization,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Tool Auth
   * Endpoint for Tool Authentication. Note: The flow is different from
   * the regular login OAuth flow, the backend initiates it and redirects to the frontend
   * after completion.
   *
   * If completed, a ToolAuth is stored in the DB containing the access token for the tool.
   *
   * Returns:
   * RedirectResponse: A redirect pointing to the frontend, contains an error query parameter if
   * an unexpected error happens during the authentication.
   *
   * Raises:
   * HTTPException: If no redirect_uri set.
   * @param data The data for the request.
   * @param data.organizationId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public toolAuthV1ToolAuthGet(
    data: ToolAuthV1ToolAuthGetData = {}
  ): CancelablePromise<ToolAuthV1ToolAuthGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/tool/auth',
      headers: {
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Tool Auth
   * Endpoint to delete Tool Authentication.
   *
   * If completed, the corresponding ToolAuth for the requesting user is removed from the DB.
   *
   * Raises:
   * HTTPException: If there was an error deleting the tool auth.
   * @param data The data for the request.
   * @param data.toolId Tool ID for tool in question
   * @param data.organizationId
   * @returns DeleteToolAuth Successful Response
   * @throws ApiError
   */
  public deleteToolAuthV1ToolAuthToolIdDelete(
    data: DeleteToolAuthV1ToolAuthToolIdDeleteData
  ): CancelablePromise<DeleteToolAuthV1ToolAuthToolIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/tool/auth/{tool_id}',
      path: {
        tool_id: data.toolId,
      },
      headers: {
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }
}

export class ChatService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Chat Stream
   * Stream chat endpoint to handle user messages and return chatbot responses.
   * @param data The data for the request.
   * @param data.authorization
   * @param data.requestBody
   * @param data.organizationId
   * @param data.deploymentName
   * @returns ChatResponseEvent Successful Response
   * @throws ApiError
   */
  public chatStreamV1ChatStreamPost(
    data: ChatStreamV1ChatStreamPostData
  ): CancelablePromise<ChatStreamV1ChatStreamPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/chat-stream',
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
        'deployment-name': data.deploymentName,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Regenerate Chat Stream
   * Endpoint to regenerate stream chat response for the last user message.
   * @param data The data for the request.
   * @param data.authorization
   * @param data.requestBody
   * @param data.organizationId
   * @param data.deploymentName
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public regenerateChatStreamV1ChatStreamRegeneratePost(
    data: RegenerateChatStreamV1ChatStreamRegeneratePostData
  ): CancelablePromise<RegenerateChatStreamV1ChatStreamRegeneratePostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/chat-stream/regenerate',
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
        'deployment-name': data.deploymentName,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Chat
   * Chat endpoint to handle user messages and return chatbot responses.
   * @param data The data for the request.
   * @param data.authorization
   * @param data.requestBody
   * @param data.organizationId
   * @param data.deploymentName
   * @returns NonStreamedChatResponse Successful Response
   * @throws ApiError
   */
  public chatV1ChatPost(data: ChatV1ChatPostData): CancelablePromise<ChatV1ChatPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/chat',
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
        'deployment-name': data.deploymentName,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }
}

export class UserService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Create User
   * Create a new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.organizationId
   * @returns backend__schemas__user__User Successful Response
   * @throws ApiError
   */
  public createUserV1UsersPost(
    data: CreateUserV1UsersPostData
  ): CancelablePromise<CreateUserV1UsersPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/users',
      headers: {
        'Organization-Id': data.organizationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Users
   * List all users.
   * @param data The data for the request.
   * @param data.authorization
   * @param data.offset Offset for where request should start returning records from
   * @param data.limit Maximum number of records to return per request
   * @param data.organizationId
   * @returns backend__schemas__user__User Successful Response
   * @throws ApiError
   */
  public listUsersV1UsersGet(
    data: ListUsersV1UsersGetData
  ): CancelablePromise<ListUsersV1UsersGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/users',
      headers: {
        'Organization-Id': data.organizationId,
        authorization: data.authorization,
      },
      query: {
        offset: data.offset,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get User
   * Get a user by ID.
   *
   * Raises:
   * HTTPException: If the user with the given ID is not found.
   * @param data The data for the request.
   * @param data.userId User ID for the user in question
   * @param data.authorization
   * @param data.organizationId
   * @returns backend__schemas__user__User Successful Response
   * @throws ApiError
   */
  public getUserV1UsersUserIdGet(
    data: GetUserV1UsersUserIdGetData
  ): CancelablePromise<GetUserV1UsersUserIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/users/{user_id}',
      path: {
        user_id: data.userId,
      },
      headers: {
        'Organization-Id': data.organizationId,
        authorization: data.authorization,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update User
   * Update a user by ID.
   *
   * Raises:
   * HTTPException: If the user with the given ID is not found.
   * @param data The data for the request.
   * @param data.userId User ID for the user in question
   * @param data.authorization
   * @param data.requestBody
   * @param data.organizationId
   * @returns backend__schemas__user__User Successful Response
   * @throws ApiError
   */
  public updateUserV1UsersUserIdPut(
    data: UpdateUserV1UsersUserIdPutData
  ): CancelablePromise<UpdateUserV1UsersUserIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/users/{user_id}',
      path: {
        user_id: data.userId,
      },
      headers: {
        'Organization-Id': data.organizationId,
        authorization: data.authorization,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete User
   * Delete a user by ID.
   *
   * Raises:
   * HTTPException: If the user with the given ID is not found.
   * @param data The data for the request.
   * @param data.userId User ID for the user in question
   * @param data.authorization
   * @param data.organizationId
   * @returns DeleteUser Successful Response
   * @throws ApiError
   */
  public deleteUserV1UsersUserIdDelete(
    data: DeleteUserV1UsersUserIdDeleteData
  ): CancelablePromise<DeleteUserV1UsersUserIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/users/{user_id}',
      path: {
        user_id: data.userId,
      },
      headers: {
        'Organization-Id': data.organizationId,
        authorization: data.authorization,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }
}

export class ConversationService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Get Conversation
   * Get a conversation by ID.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId Conversation ID for conversation in question
   * @param data.authorization
   * @param data.organizationId
   * @returns ConversationPublic Successful Response
   * @throws ApiError
   */
  public getConversationV1ConversationsConversationIdGet(
    data: GetConversationV1ConversationsConversationIdGetData
  ): CancelablePromise<GetConversationV1ConversationsConversationIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/conversations/{conversation_id}',
      path: {
        conversation_id: data.conversationId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Conversation
   * Update a conversation by ID.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId Conversation ID for conversation in question
   * @param data.authorization
   * @param data.requestBody
   * @param data.organizationId
   * @returns ConversationPublic Successful Response
   * @throws ApiError
   */
  public updateConversationV1ConversationsConversationIdPut(
    data: UpdateConversationV1ConversationsConversationIdPutData
  ): CancelablePromise<UpdateConversationV1ConversationsConversationIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/conversations/{conversation_id}',
      path: {
        conversation_id: data.conversationId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Conversation
   * Delete a conversation by ID.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId Conversation ID for conversation in question
   * @param data.authorization
   * @param data.organizationId
   * @returns DeleteConversationResponse Successful Response
   * @throws ApiError
   */
  public deleteConversationV1ConversationsConversationIdDelete(
    data: DeleteConversationV1ConversationsConversationIdDeleteData
  ): CancelablePromise<DeleteConversationV1ConversationsConversationIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/conversations/{conversation_id}',
      path: {
        conversation_id: data.conversationId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Conversations
   * List all conversations.
   * @param data The data for the request.
   * @param data.authorization
   * @param data.orderBy Field to sorts results by
   * @param data.agentId Agent ID to filter results by
   * @param data.offset Offset for where request should start returning records from
   * @param data.limit Maximum number of records to return per request
   * @param data.organizationId
   * @returns ConversationWithoutMessages Successful Response
   * @throws ApiError
   */
  public listConversationsV1ConversationsGet(
    data: ListConversationsV1ConversationsGetData
  ): CancelablePromise<ListConversationsV1ConversationsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/conversations',
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      query: {
        order_by: data.orderBy,
        agent_id: data.agentId,
        offset: data.offset,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Toggle Conversation Pin
   * Toggle whether a conversation is pinned or not
   * @param data The data for the request.
   * @param data.conversationId Conversation ID for conversation in question
   * @param data.authorization
   * @param data.requestBody
   * @param data.organizationId
   * @returns ConversationWithoutMessages Successful Response
   * @throws ApiError
   */
  public toggleConversationPinV1ConversationsConversationIdTogglePinPut(
    data: ToggleConversationPinV1ConversationsConversationIdTogglePinPutData
  ): CancelablePromise<ToggleConversationPinV1ConversationsConversationIdTogglePinPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/conversations/{conversation_id}/toggle-pin',
      path: {
        conversation_id: data.conversationId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Search Conversations
   * Search conversations by title.
   * @param data The data for the request.
   * @param data.query Query string to search for in a conversation title
   * @param data.authorization
   * @param data.orderBy Field to sorts results by
   * @param data.agentId Agent ID to filter results by
   * @param data.offset Offset for where request should start returning records from
   * @param data.limit Maximum number of records to return per request
   * @param data.organizationId
   * @returns ConversationWithoutMessages Successful Response
   * @throws ApiError
   */
  public searchConversationsV1ConversationsSearchGet(
    data: SearchConversationsV1ConversationsSearchGetData
  ): CancelablePromise<SearchConversationsV1ConversationsSearchGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/conversations:search',
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      query: {
        query: data.query,
        order_by: data.orderBy,
        agent_id: data.agentId,
        offset: data.offset,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Batch Upload File
   * Uploads and creates a batch of File object.
   * If no conversation_id is provided, a new Conversation is created as well.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found. Status code 404.
   * HTTPException: If the file wasn't uploaded correctly. Status code 500.
   * @param data The data for the request.
   * @param data.authorization
   * @param data.formData
   * @param data.organizationId
   * @returns UploadConversationFileResponse Successful Response
   * @throws ApiError
   */
  public batchUploadFileV1ConversationsBatchUploadFilePost(
    data: BatchUploadFileV1ConversationsBatchUploadFilePostData
  ): CancelablePromise<BatchUploadFileV1ConversationsBatchUploadFilePostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/conversations/batch_upload_file',
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      formData: data.formData,
      mediaType: 'multipart/form-data',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Files
   * List all files from a conversation. Important - no pagination support yet.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId Conversation ID for conversation in question
   * @param data.authorization
   * @param data.organizationId
   * @returns ListConversationFile Successful Response
   * @throws ApiError
   */
  public listFilesV1ConversationsConversationIdFilesGet(
    data: ListFilesV1ConversationsConversationIdFilesGetData
  ): CancelablePromise<ListFilesV1ConversationsConversationIdFilesGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/conversations/{conversation_id}/files',
      path: {
        conversation_id: data.conversationId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get File
   * Get a conversation file by ID.
   *
   * Raises:
   * HTTPException: If the conversation or file with the given ID is not found, or if the file does not belong to the conversation.
   * @param data The data for the request.
   * @param data.conversationId Conversation ID for conversation in question
   * @param data.fileId File ID for file in question
   * @param data.authorization
   * @param data.organizationId
   * @returns FileMetadata Successful Response
   * @throws ApiError
   */
  public getFileV1ConversationsConversationIdFilesFileIdGet(
    data: GetFileV1ConversationsConversationIdFilesFileIdGetData
  ): CancelablePromise<GetFileV1ConversationsConversationIdFilesFileIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/conversations/{conversation_id}/files/{file_id}',
      path: {
        conversation_id: data.conversationId,
        file_id: data.fileId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete File
   * Delete a file by ID.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId Conversation ID for conversation in question
   * @param data.fileId File ID for file in question
   * @param data.authorization
   * @param data.organizationId
   * @returns DeleteConversationFileResponse Successful Response
   * @throws ApiError
   */
  public deleteFileV1ConversationsConversationIdFilesFileIdDelete(
    data: DeleteFileV1ConversationsConversationIdFilesFileIdDeleteData
  ): CancelablePromise<DeleteFileV1ConversationsConversationIdFilesFileIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/conversations/{conversation_id}/files/{file_id}',
      path: {
        conversation_id: data.conversationId,
        file_id: data.fileId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Generate Title
   * Generate a title for a conversation and update the conversation with the generated title.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId Conversation ID for conversation in question
   * @param data.authorization
   * @param data.model Model to filter results by
   * @param data.organizationId
   * @returns GenerateTitleResponse Successful Response
   * @throws ApiError
   */
  public generateTitleV1ConversationsConversationIdGenerateTitlePost(
    data: GenerateTitleV1ConversationsConversationIdGenerateTitlePostData
  ): CancelablePromise<GenerateTitleV1ConversationsConversationIdGenerateTitlePostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/conversations/{conversation_id}/generate-title',
      path: {
        conversation_id: data.conversationId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      query: {
        model: data.model,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Synthesize Message
   * Generate a synthesized audio for a specific message in a conversation.
   *
   * Raises:
   * HTTPException: If the message with the given ID is not found or synthesis fails.
   * @param data The data for the request.
   * @param data.conversationId Conversation ID for conversation in question
   * @param data.messageId Message ID for message in question
   * @param data.authorization
   * @param data.organizationId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public synthesizeMessageV1ConversationsConversationIdSynthesizeMessageIdGet(
    data: SynthesizeMessageV1ConversationsConversationIdSynthesizeMessageIdGetData
  ): CancelablePromise<SynthesizeMessageV1ConversationsConversationIdSynthesizeMessageIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/conversations/{conversation_id}/synthesize/{message_id}',
      path: {
        conversation_id: data.conversationId,
        message_id: data.messageId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }
}

export class ToolService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * List Tools
   * List all available tools.
   * @param data The data for the request.
   * @param data.authorization
   * @param data.agentId Agent ID to filter results by
   * @param data.organizationId
   * @returns ToolDefinition Successful Response
   * @throws ApiError
   */
  public listToolsV1ToolsGet(
    data: ListToolsV1ToolsGetData
  ): CancelablePromise<ListToolsV1ToolsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/tools',
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      query: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }
}

export class DeploymentService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Create Deployment
   * Create a new deployment.
   * @param data The data for the request.
   * @param data.authorization
   * @param data.requestBody
   * @param data.organizationId
   * @returns DeploymentDefinition Successful Response
   * @throws ApiError
   */
  public createDeploymentV1DeploymentsPost(
    data: CreateDeploymentV1DeploymentsPostData
  ): CancelablePromise<CreateDeploymentV1DeploymentsPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/deployments',
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Deployments
   * List all available deployments and their models.
   * @param data The data for the request.
   * @param data.authorization
   * @param data.all Include all deployments, regardless of availability.
   * @param data.organizationId
   * @returns DeploymentDefinition Successful Response
   * @throws ApiError
   */
  public listDeploymentsV1DeploymentsGet(
    data: ListDeploymentsV1DeploymentsGetData
  ): CancelablePromise<ListDeploymentsV1DeploymentsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/deployments',
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      query: {
        all: data.all,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Deployment
   * Update a deployment.
   *
   * Raises:
   * HTTPException: If deployment not found.
   * @param data The data for the request.
   * @param data.deploymentId Deployment ID for deployment in question
   * @param data.authorization
   * @param data.requestBody
   * @param data.organizationId
   * @returns DeploymentDefinition Successful Response
   * @throws ApiError
   */
  public updateDeploymentV1DeploymentsDeploymentIdPut(
    data: UpdateDeploymentV1DeploymentsDeploymentIdPutData
  ): CancelablePromise<UpdateDeploymentV1DeploymentsDeploymentIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/deployments/{deployment_id}',
      path: {
        deployment_id: data.deploymentId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Deployment
   * Get a deployment by ID.
   * @param data The data for the request.
   * @param data.deploymentId Deployment ID for deployment in question
   * @param data.authorization
   * @param data.organizationId
   * @returns DeploymentDefinition Successful Response
   * @throws ApiError
   */
  public getDeploymentV1DeploymentsDeploymentIdGet(
    data: GetDeploymentV1DeploymentsDeploymentIdGetData
  ): CancelablePromise<GetDeploymentV1DeploymentsDeploymentIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/deployments/{deployment_id}',
      path: {
        deployment_id: data.deploymentId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Deployment
   * Delete a deployment by ID.
   *
   * Raises:
   * HTTPException: If the deployment with the given ID is not found.
   * @param data The data for the request.
   * @param data.deploymentId Deployment ID for deployment in question
   * @param data.authorization
   * @param data.organizationId
   * @returns DeleteDeployment Successful Response
   * @throws ApiError
   */
  public deleteDeploymentV1DeploymentsDeploymentIdDelete(
    data: DeleteDeploymentV1DeploymentsDeploymentIdDeleteData
  ): CancelablePromise<DeleteDeploymentV1DeploymentsDeploymentIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/deployments/{deployment_id}',
      path: {
        deployment_id: data.deploymentId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Config
   * Set environment variables for the deployment.
   * @param data The data for the request.
   * @param data.deploymentId Deployment ID for deployment in question
   * @param data.authorization
   * @param data.requestBody
   * @param data.organizationId
   * @returns DeploymentDefinition Successful Response
   * @throws ApiError
   */
  public updateConfigV1DeploymentsDeploymentIdUpdateConfigPost(
    data: UpdateConfigV1DeploymentsDeploymentIdUpdateConfigPostData
  ): CancelablePromise<UpdateConfigV1DeploymentsDeploymentIdUpdateConfigPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/deployments/{deployment_id}/update_config',
      path: {
        deployment_id: data.deploymentId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }
}

export class ExperimentalFeaturesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * List Experimental Features
   * List all experimental features and if they are enabled
   * @param data The data for the request.
   * @param data.authorization
   * @param data.organizationId
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public listExperimentalFeaturesV1ExperimentalFeaturesGet(
    data: ListExperimentalFeaturesV1ExperimentalFeaturesGetData
  ): CancelablePromise<ListExperimentalFeaturesV1ExperimentalFeaturesGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/experimental_features/',
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }
}

export class AgentService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Create Agent
   * Create an agent.
   *
   * Raises:
   * HTTPException: If the agent creation fails.
   * @param data The data for the request.
   * @param data.authorization
   * @param data.requestBody
   * @param data.organizationId
   * @returns AgentPublic Successful Response
   * @throws ApiError
   */
  public createAgentV1AgentsPost(
    data: CreateAgentV1AgentsPostData
  ): CancelablePromise<CreateAgentV1AgentsPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/agents',
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Agents
   * List all agents.
   * @param data The data for the request.
   * @param data.authorization
   * @param data.visibility Agent visibility
   * @param data.organizationId Organization ID to filter results by
   * @param data.offset Offset for where request should start returning records from
   * @param data.limit Maximum number of records to return per request
   * @param data.organizationId
   * @returns AgentPublic Successful Response
   * @throws ApiError
   */
  public listAgentsV1AgentsGet(
    data: ListAgentsV1AgentsGetData
  ): CancelablePromise<ListAgentsV1AgentsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/agents',
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      query: {
        visibility: data.visibility,
        organization_id: data.organizationId,
        offset: data.offset,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Agent By Id
   * Return an agent by ID.
   *
   * Raises:
   * HTTPException: If the agent with the given ID is not found.
   * @param data The data for the request.
   * @param data.agentId Agent ID for agent in question
   * @param data.authorization
   * @param data.organizationId
   * @returns AgentPublic Successful Response
   * @throws ApiError
   */
  public getAgentByIdV1AgentsAgentIdGet(
    data: GetAgentByIdV1AgentsAgentIdGetData
  ): CancelablePromise<GetAgentByIdV1AgentsAgentIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/agents/{agent_id}',
      path: {
        agent_id: data.agentId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Agent
   * Update an agent by ID.
   *
   * Raises:
   * HTTPException: If the agent with the given ID is not found.
   * @param data The data for the request.
   * @param data.agentId Agent ID for agent in question
   * @param data.authorization
   * @param data.requestBody
   * @param data.organizationId
   * @returns AgentPublic Successful Response
   * @throws ApiError
   */
  public updateAgentV1AgentsAgentIdPut(
    data: UpdateAgentV1AgentsAgentIdPutData
  ): CancelablePromise<UpdateAgentV1AgentsAgentIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/agents/{agent_id}',
      path: {
        agent_id: data.agentId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Agent
   * Delete an agent by ID.
   *
   * Raises:
   * HTTPException: If the agent with the given ID is not found.
   * @param data The data for the request.
   * @param data.agentId Agent ID for agent in question
   * @param data.authorization
   * @param data.organizationId
   * @returns DeleteAgent Successful Response
   * @throws ApiError
   */
  public deleteAgentV1AgentsAgentIdDelete(
    data: DeleteAgentV1AgentsAgentIdDeleteData
  ): CancelablePromise<DeleteAgentV1AgentsAgentIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/agents/{agent_id}',
      path: {
        agent_id: data.agentId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Agent Deployment
   * Get the deployment for an agent
   *
   * Raises:
   * HTTPException: If the agent with the given ID is not found.
   * @param data The data for the request.
   * @param data.agentId Agent ID for agent in question
   * @param data.authorization
   * @param data.organizationId
   * @returns DeploymentDefinition Successful Response
   * @throws ApiError
   */
  public getAgentDeploymentV1AgentsAgentIdDeploymentsGet(
    data: GetAgentDeploymentV1AgentsAgentIdDeploymentsGetData
  ): CancelablePromise<GetAgentDeploymentV1AgentsAgentIdDeploymentsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/agents/{agent_id}/deployments',
      path: {
        agent_id: data.agentId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Agent Tool Metadata
   * List all agent tool metadata by agent ID.
   *
   * Raises:
   * HTTPException: If the agent tool metadata retrieval fails.
   * @param data The data for the request.
   * @param data.agentId Agent ID for agent in question
   * @param data.authorization
   * @param data.organizationId
   * @returns AgentToolMetadataPublic Successful Response
   * @throws ApiError
   */
  public listAgentToolMetadataV1AgentsAgentIdToolMetadataGet(
    data: ListAgentToolMetadataV1AgentsAgentIdToolMetadataGetData
  ): CancelablePromise<ListAgentToolMetadataV1AgentsAgentIdToolMetadataGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/agents/{agent_id}/tool-metadata',
      path: {
        agent_id: data.agentId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Create Agent Tool Metadata
   * Create an agent tool metadata.
   *
   * Raises:
   * HTTPException: If the agent tool metadata creation fails.
   * @param data The data for the request.
   * @param data.agentId Agent ID for agent in question
   * @param data.authorization
   * @param data.requestBody
   * @param data.organizationId
   * @returns AgentToolMetadataPublic Successful Response
   * @throws ApiError
   */
  public createAgentToolMetadataV1AgentsAgentIdToolMetadataPost(
    data: CreateAgentToolMetadataV1AgentsAgentIdToolMetadataPostData
  ): CancelablePromise<CreateAgentToolMetadataV1AgentsAgentIdToolMetadataPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/agents/{agent_id}/tool-metadata',
      path: {
        agent_id: data.agentId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Agent Tool Metadata
   * Update an agent tool metadata by ID.
   *
   * Raises:
   * HTTPException: If the agent tool metadata with the given ID is not found.
   * HTTPException: If the agent tool metadata update fails.
   * @param data The data for the request.
   * @param data.agentId Agent ID for agent in question
   * @param data.agentToolMetadataId Agent Tool Metadata ID for tool metadata in question
   * @param data.authorization
   * @param data.requestBody
   * @param data.organizationId
   * @returns AgentToolMetadata Successful Response
   * @throws ApiError
   */
  public updateAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdPut(
    data: UpdateAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdPutData
  ): CancelablePromise<UpdateAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/agents/{agent_id}/tool-metadata/{agent_tool_metadata_id}',
      path: {
        agent_id: data.agentId,
        agent_tool_metadata_id: data.agentToolMetadataId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Agent Tool Metadata
   * Delete an agent tool metadata by ID.
   *
   * Raises:
   * HTTPException: If the agent tool metadata with the given ID is not found.
   * HTTPException: If the agent tool metadata deletion fails.
   * @param data The data for the request.
   * @param data.agentId Agent ID for agent in question
   * @param data.agentToolMetadataId Agent Tool Metadata ID for tool metadata in question
   * @param data.authorization
   * @param data.organizationId
   * @returns DeleteAgentToolMetadata Successful Response
   * @throws ApiError
   */
  public deleteAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdDelete(
    data: DeleteAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdDeleteData
  ): CancelablePromise<DeleteAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/agents/{agent_id}/tool-metadata/{agent_tool_metadata_id}',
      path: {
        agent_id: data.agentId,
        agent_tool_metadata_id: data.agentToolMetadataId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Batch Upload File
   * Upload a batch of files
   * @param data The data for the request.
   * @param data.authorization
   * @param data.formData
   * @param data.organizationId
   * @returns UploadAgentFileResponse Successful Response
   * @throws ApiError
   */
  public batchUploadFileV1AgentsBatchUploadFilePost(
    data: BatchUploadFileV1AgentsBatchUploadFilePostData
  ): CancelablePromise<BatchUploadFileV1AgentsBatchUploadFilePostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/agents/batch_upload_file',
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      formData: data.formData,
      mediaType: 'multipart/form-data',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Agent File
   * Get an agent file by ID.
   *
   * Raises:
   * HTTPException: If the agent or file with the given ID is not found, or if the file does not belong to the agent.
   * @param data The data for the request.
   * @param data.agentId Agent ID for agent in question
   * @param data.fileId File ID for file in question
   * @param data.authorization
   * @param data.organizationId
   * @returns FileMetadata Successful Response
   * @throws ApiError
   */
  public getAgentFileV1AgentsAgentIdFilesFileIdGet(
    data: GetAgentFileV1AgentsAgentIdFilesFileIdGetData
  ): CancelablePromise<GetAgentFileV1AgentsAgentIdFilesFileIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/agents/{agent_id}/files/{file_id}',
      path: {
        agent_id: data.agentId,
        file_id: data.fileId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Agent File
   * Delete an agent file by ID.
   *
   * Raises:
   * HTTPException: If the agent with the given ID is not found.
   * @param data The data for the request.
   * @param data.agentId Agent ID for agent in question
   * @param data.fileId File ID for file in question
   * @param data.authorization
   * @param data.organizationId
   * @returns DeleteAgentFileResponse Successful Response
   * @throws ApiError
   */
  public deleteAgentFileV1AgentsAgentIdFilesFileIdDelete(
    data: DeleteAgentFileV1AgentsAgentIdFilesFileIdDeleteData
  ): CancelablePromise<DeleteAgentFileV1AgentsAgentIdFilesFileIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/agents/{agent_id}/files/{file_id}',
      path: {
        agent_id: data.agentId,
        file_id: data.fileId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }
}

export class SnapshotService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Create Snapshot
   * Create a new snapshot and snapshot link to share the conversation.
   * @param data The data for the request.
   * @param data.authorization
   * @param data.requestBody
   * @param data.organizationId
   * @returns CreateSnapshotResponse Successful Response
   * @throws ApiError
   */
  public createSnapshotV1SnapshotsPost(
    data: CreateSnapshotV1SnapshotsPostData
  ): CancelablePromise<CreateSnapshotV1SnapshotsPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/snapshots',
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Snapshots
   * List all snapshots.
   * @param data The data for the request.
   * @param data.authorization
   * @param data.organizationId
   * @returns SnapshotWithLinks Successful Response
   * @throws ApiError
   */
  public listSnapshotsV1SnapshotsGet(
    data: ListSnapshotsV1SnapshotsGetData
  ): CancelablePromise<ListSnapshotsV1SnapshotsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/snapshots',
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Snapshot
   * Get a snapshot by link ID.
   * @param data The data for the request.
   * @param data.linkId Link ID for the snapshot link in question
   * @param data.authorization
   * @param data.organizationId
   * @returns SnapshotPublic Successful Response
   * @throws ApiError
   */
  public getSnapshotV1SnapshotsLinkLinkIdGet(
    data: GetSnapshotV1SnapshotsLinkLinkIdGetData
  ): CancelablePromise<GetSnapshotV1SnapshotsLinkLinkIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/snapshots/link/{link_id}',
      path: {
        link_id: data.linkId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Snapshot Link
   * Delete a snapshot link by ID.
   * @param data The data for the request.
   * @param data.linkId Link ID for the snapshot link in question
   * @param data.authorization
   * @param data.organizationId
   * @returns DeleteSnapshotLinkResponse Successful Response
   * @throws ApiError
   */
  public deleteSnapshotLinkV1SnapshotsLinkLinkIdDelete(
    data: DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteData
  ): CancelablePromise<DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/snapshots/link/{link_id}',
      path: {
        link_id: data.linkId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Snapshot
   * Delete a snapshot by ID.
   * @param data The data for the request.
   * @param data.snapshotId Snapshot ID for the snapshot in question
   * @param data.authorization
   * @param data.organizationId
   * @returns DeleteSnapshotResponse Successful Response
   * @throws ApiError
   */
  public deleteSnapshotV1SnapshotsSnapshotIdDelete(
    data: DeleteSnapshotV1SnapshotsSnapshotIdDeleteData
  ): CancelablePromise<DeleteSnapshotV1SnapshotsSnapshotIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/snapshots/{snapshot_id}',
      path: {
        snapshot_id: data.snapshotId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }
}

export class OrganizationService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Create Organization
   * Create a new organization.
   * @param data The data for the request.
   * @param data.authorization
   * @param data.requestBody
   * @param data.organizationId
   * @returns Organization Successful Response
   * @throws ApiError
   */
  public createOrganizationV1OrganizationsPost(
    data: CreateOrganizationV1OrganizationsPostData
  ): CancelablePromise<CreateOrganizationV1OrganizationsPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/organizations',
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Organizations
   * List all available organizations.
   * @param data The data for the request.
   * @param data.authorization
   * @param data.organizationId
   * @returns Organization Successful Response
   * @throws ApiError
   */
  public listOrganizationsV1OrganizationsGet(
    data: ListOrganizationsV1OrganizationsGetData
  ): CancelablePromise<ListOrganizationsV1OrganizationsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/organizations',
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Organization
   * Update organization by ID.
   * @param data The data for the request.
   * @param data.organizationId Organization ID for the organization in question
   * @param data.authorization
   * @param data.requestBody
   * @param data.organizationId
   * @returns Organization Successful Response
   * @throws ApiError
   */
  public updateOrganizationV1OrganizationsOrganizationIdPut(
    data: UpdateOrganizationV1OrganizationsOrganizationIdPutData
  ): CancelablePromise<UpdateOrganizationV1OrganizationsOrganizationIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/organizations/{organization_id}',
      path: {
        organization_id: data.organizationId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Organization
   * Get a organization by ID.
   * @param data The data for the request.
   * @param data.organizationId Organization ID for the organization in question
   * @param data.authorization
   * @param data.organizationId
   * @returns Organization Successful Response
   * @throws ApiError
   */
  public getOrganizationV1OrganizationsOrganizationIdGet(
    data: GetOrganizationV1OrganizationsOrganizationIdGetData
  ): CancelablePromise<GetOrganizationV1OrganizationsOrganizationIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/organizations/{organization_id}',
      path: {
        organization_id: data.organizationId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Organization
   * Delete a organization by ID.
   * @param data The data for the request.
   * @param data.organizationId Organization ID for the organization in question
   * @param data.authorization
   * @param data.organizationId
   * @returns DeleteOrganization Successful Response
   * @throws ApiError
   */
  public deleteOrganizationV1OrganizationsOrganizationIdDelete(
    data: DeleteOrganizationV1OrganizationsOrganizationIdDeleteData
  ): CancelablePromise<DeleteOrganizationV1OrganizationsOrganizationIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/organizations/{organization_id}',
      path: {
        organization_id: data.organizationId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Organization Users
   * Get organization users by ID.
   * @param data The data for the request.
   * @param data.organizationId Organization ID for the organization in question
   * @param data.authorization
   * @param data.organizationId
   * @returns backend__schemas__user__User Successful Response
   * @throws ApiError
   */
  public getOrganizationUsersV1OrganizationsOrganizationIdUsersGet(
    data: GetOrganizationUsersV1OrganizationsOrganizationIdUsersGetData
  ): CancelablePromise<GetOrganizationUsersV1OrganizationsOrganizationIdUsersGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/organizations/{organization_id}/users',
      path: {
        organization_id: data.organizationId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }
}

export class ModelService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Create Model
   * Create a new model.
   * @param data The data for the request.
   * @param data.authorization
   * @param data.requestBody
   * @param data.organizationId
   * @returns Model Successful Response
   * @throws ApiError
   */
  public createModelV1ModelsPost(
    data: CreateModelV1ModelsPostData
  ): CancelablePromise<CreateModelV1ModelsPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/v1/models',
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Models
   * List all available models
   * @param data The data for the request.
   * @param data.authorization
   * @param data.offset Offset for where request should start returning records from
   * @param data.limit Maximum number of records to return per request
   * @param data.organizationId
   * @returns Model Successful Response
   * @throws ApiError
   */
  public listModelsV1ModelsGet(
    data: ListModelsV1ModelsGetData
  ): CancelablePromise<ListModelsV1ModelsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/models',
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      query: {
        offset: data.offset,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Model
   * Update a model by ID.
   *
   * Raises:
   * HTTPException: If the model with the given ID is not found.
   * @param data The data for the request.
   * @param data.modelId Model ID for the model in question
   * @param data.authorization
   * @param data.requestBody
   * @param data.organizationId
   * @returns Model Successful Response
   * @throws ApiError
   */
  public updateModelV1ModelsModelIdPut(
    data: UpdateModelV1ModelsModelIdPutData
  ): CancelablePromise<UpdateModelV1ModelsModelIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/v1/models/{model_id}',
      path: {
        model_id: data.modelId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Model
   * Get a model by ID.
   * @param data The data for the request.
   * @param data.modelId Model ID for the model in question
   * @param data.authorization
   * @param data.organizationId
   * @returns Model Successful Response
   * @throws ApiError
   */
  public getModelV1ModelsModelIdGet(
    data: GetModelV1ModelsModelIdGetData
  ): CancelablePromise<GetModelV1ModelsModelIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/v1/models/{model_id}',
      path: {
        model_id: data.modelId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Model
   * Delete a model by ID.
   *
   * Raises:
   * HTTPException: If the model with the given ID is not found.
   * @param data The data for the request.
   * @param data.modelId Model ID for the model in question
   * @param data.authorization
   * @param data.organizationId
   * @returns DeleteModel Successful Response
   * @throws ApiError
   */
  public deleteModelV1ModelsModelIdDelete(
    data: DeleteModelV1ModelsModelIdDeleteData
  ): CancelablePromise<DeleteModelV1ModelsModelIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/v1/models/{model_id}',
      path: {
        model_id: data.modelId,
      },
      headers: {
        authorization: data.authorization,
        'Organization-Id': data.organizationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }
}

export class ScimService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Get Users
   * Return users
   * @param data The data for the request.
   * @param data.startIndex Start Index for request
   * @param data.count Maximum number of records to return per request
   * @param data.filter Filter to use when filtering response
   * @returns ListUserResponse Successful Response
   * @throws ApiError
   */
  public getUsersScimV2UsersGet(
    data: GetUsersScimV2UsersGetData = {}
  ): CancelablePromise<GetUsersScimV2UsersGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/scim/v2/Users',
      query: {
        start_index: data.startIndex,
        count: data.count,
        filter: data.filter,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Create User
   * Create a new user
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public createUserScimV2UsersPost(
    data: CreateUserScimV2UsersPostData
  ): CancelablePromise<CreateUserScimV2UsersPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/scim/v2/Users',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get User
   * Get user by User ID
   * @param data The data for the request.
   * @param data.userId User ID for the user in question
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public getUserScimV2UsersUserIdGet(
    data: GetUserScimV2UsersUserIdGetData
  ): CancelablePromise<GetUserScimV2UsersUserIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/scim/v2/Users/{user_id}',
      path: {
        user_id: data.userId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update User
   * Update a user
   * @param data The data for the request.
   * @param data.userId User ID for the user in question
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public updateUserScimV2UsersUserIdPut(
    data: UpdateUserScimV2UsersUserIdPutData
  ): CancelablePromise<UpdateUserScimV2UsersUserIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/scim/v2/Users/{user_id}',
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Patch User
   * Patch a user
   * @param data The data for the request.
   * @param data.userId User ID for the user in question
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public patchUserScimV2UsersUserIdPatch(
    data: PatchUserScimV2UsersUserIdPatchData
  ): CancelablePromise<PatchUserScimV2UsersUserIdPatchResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/scim/v2/Users/{user_id}',
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Groups
   * Return Groups
   * @param data The data for the request.
   * @param data.startIndex Start Index for request
   * @param data.count Maximum number of records to return per request
   * @param data.filter Filter to use when filtering response
   * @returns ListGroupResponse Successful Response
   * @throws ApiError
   */
  public getGroupsScimV2GroupsGet(
    data: GetGroupsScimV2GroupsGetData = {}
  ): CancelablePromise<GetGroupsScimV2GroupsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/scim/v2/Groups',
      query: {
        start_index: data.startIndex,
        count: data.count,
        filter: data.filter,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Create Group
   * Create a group
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public createGroupScimV2GroupsPost(
    data: CreateGroupScimV2GroupsPostData
  ): CancelablePromise<CreateGroupScimV2GroupsPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/scim/v2/Groups',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Group
   * Get group by group ID
   * @param data The data for the request.
   * @param data.groupId Group ID for the group in question
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public getGroupScimV2GroupsGroupIdGet(
    data: GetGroupScimV2GroupsGroupIdGetData
  ): CancelablePromise<GetGroupScimV2GroupsGroupIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/scim/v2/Groups/{group_id}',
      path: {
        group_id: data.groupId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Patch Group
   * Patch a group
   * @param data The data for the request.
   * @param data.groupId Group ID for the group in question
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public patchGroupScimV2GroupsGroupIdPatch(
    data: PatchGroupScimV2GroupsGroupIdPatchData
  ): CancelablePromise<PatchGroupScimV2GroupsGroupIdPatchResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/scim/v2/Groups/{group_id}',
      path: {
        group_id: data.groupId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Group
   * Delete a group
   * @param data The data for the request.
   * @param data.groupId Group ID for the group in question
   * @returns void Successful Response
   * @throws ApiError
   */
  public deleteGroupScimV2GroupsGroupIdDelete(
    data: DeleteGroupScimV2GroupsGroupIdDeleteData
  ): CancelablePromise<DeleteGroupScimV2GroupsGroupIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/scim/v2/Groups/{group_id}',
      path: {
        group_id: data.groupId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }
}

export class DefaultService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Health
   * Health check for backend APIs
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public healthHealthGet(): CancelablePromise<HealthHealthGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/health',
    });
  }
}
