// This file is auto-generated by @hey-api/openapi-ts

export const $ActiveUserCount = {
  properties: {
    count: {
      type: 'integer',
      title: 'Count',
    },
    date: {
      type: 'string',
      format: 'date-time',
      title: 'Date',
    },
  },
  type: 'object',
  required: ['count', 'date'],
  title: 'ActiveUserCount',
} as const;

export const $AgentConversationJobResponse = {
  properties: {
    agent_id: {
      type: 'string',
      title: 'Agent Id',
    },
    tool_id: {
      type: 'string',
      title: 'Tool Id',
    },
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
    version: {
      type: 'string',
      title: 'Version',
    },
    job_state: {
      $ref: '#/components/schemas/JobState',
    },
  },
  type: 'object',
  required: ['agent_id', 'tool_id', 'conversation_id', 'version', 'job_state'],
  title: 'AgentConversationJobResponse',
} as const;

export const $AgentJobResponse = {
  properties: {
    tool_id: {
      type: 'string',
      title: 'Tool Id',
    },
    job_state: {
      $ref: '#/components/schemas/JobState',
    },
    last_updated: {
      type: 'string',
      format: 'date-time',
      title: 'Last Updated',
    },
    count_completed_file: {
      type: 'integer',
      title: 'Count Completed File',
    },
    count_queued_file: {
      type: 'integer',
      title: 'Count Queued File',
    },
    files_failed: {
      items: {
        $ref: '#/components/schemas/FileStatus',
      },
      type: 'array',
      title: 'Files Failed',
    },
    count_deletion_tasks_remaining: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Count Deletion Tasks Remaining',
    },
  },
  type: 'object',
  required: [
    'tool_id',
    'job_state',
    'last_updated',
    'count_completed_file',
    'count_queued_file',
    'files_failed',
  ],
  title: 'AgentJobResponse',
} as const;

export const $AgentPublic = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    version: {
      type: 'integer',
      title: 'Version',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    preamble: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Preamble',
    },
    temperature: {
      type: 'number',
      title: 'Temperature',
    },
    tools: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools',
    },
    tools_metadata: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/AgentToolMetadataPublic',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools Metadata',
    },
    deployments: {
      items: {
        $ref: '#/components/schemas/DeploymentWithModels',
      },
      type: 'array',
      title: 'Deployments',
    },
    deployment: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Deployment',
    },
    model: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Model',
    },
    type: {
      $ref: '#/components/schemas/AgentType',
    },
    base_agent_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Base Agent Id',
    },
    user_fullname: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'User Fullname',
    },
    created_by: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created By',
    },
    is_owner: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Owner',
    },
  },
  type: 'object',
  required: [
    'id',
    'created_at',
    'updated_at',
    'version',
    'name',
    'description',
    'preamble',
    'temperature',
    'tools',
    'deployments',
    'deployment',
    'model',
    'type',
    'base_agent_id',
    'user_fullname',
  ],
  title: 'AgentPublic',
} as const;

export const $AgentStats = {
  properties: {
    num_users: {
      type: 'integer',
      title: 'Num Users',
    },
  },
  type: 'object',
  required: ['num_users'],
  title: 'AgentStats',
} as const;

export const $AgentToolMetadataPublic = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    agent_id: {
      type: 'string',
      title: 'Agent Id',
    },
    tool_name: {
      type: 'string',
      title: 'Tool Name',
    },
    artifacts: {
      items: {
        type: 'object',
      },
      type: 'array',
      title: 'Artifacts',
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'agent_id', 'tool_name', 'artifacts'],
  title: 'AgentToolMetadataPublic',
} as const;

export const $AgentType = {
  type: 'string',
  enum: ['PRIVATE', 'PUBLIC', 'BASE', 'DEFAULT'],
  title: 'AgentType',
} as const;

export const $AgentVisibility = {
  type: 'string',
  enum: ['PRIVATE', 'PUBLIC', 'ALL'],
  title: 'AgentVisibility',
} as const;

export const $AzureEventResource = {
  properties: {
    '@odata.type': {
      type: 'string',
      title: '@Odata.Type',
    },
    '@odata.id': {
      type: 'string',
      title: '@Odata.Id',
    },
    '@odata.etag': {
      type: 'string',
      title: '@Odata.Etag',
    },
    id: {
      type: 'string',
      title: 'Id',
    },
  },
  type: 'object',
  required: ['@odata.type', '@odata.id', '@odata.etag', 'id'],
  title: 'AzureEventResource',
} as const;

export const $AzureLifecycleEvent = {
  properties: {
    subscriptionId: {
      type: 'string',
      title: 'Subscriptionid',
    },
    subscriptionExpirationDateTime: {
      type: 'string',
      title: 'Subscriptionexpirationdatetime',
    },
    tenantId: {
      type: 'string',
      title: 'Tenantid',
    },
    lifecycleEvent: {
      type: 'string',
      enum: ['reauthorizationRequired', 'subscriptionRemoved', 'missed'],
      title: 'Lifecycleevent',
    },
    clientState: {
      type: 'string',
      title: 'Clientstate',
    },
  },
  type: 'object',
  required: [
    'subscriptionId',
    'subscriptionExpirationDateTime',
    'tenantId',
    'lifecycleEvent',
    'clientState',
  ],
  title: 'AzureLifecycleEvent',
} as const;

export const $AzureLifecyclePayload = {
  properties: {
    value: {
      items: {
        $ref: '#/components/schemas/AzureLifecycleEvent',
      },
      type: 'array',
      title: 'Value',
      default: [],
    },
  },
  type: 'object',
  title: 'AzureLifecyclePayload',
} as const;

export const $AzureWebhookEvent = {
  properties: {
    subscriptionId: {
      type: 'string',
      title: 'Subscriptionid',
    },
    subscriptionExpirationDateTime: {
      type: 'string',
      title: 'Subscriptionexpirationdatetime',
    },
    changeType: {
      type: 'string',
      title: 'Changetype',
    },
    resource: {
      type: 'string',
      title: 'Resource',
    },
    resourceData: {
      $ref: '#/components/schemas/AzureEventResource',
    },
    clientState: {
      type: 'string',
      title: 'Clientstate',
    },
    tenantId: {
      type: 'string',
      title: 'Tenantid',
    },
  },
  type: 'object',
  required: [
    'subscriptionId',
    'subscriptionExpirationDateTime',
    'changeType',
    'resource',
    'resourceData',
    'clientState',
    'tenantId',
  ],
  title: 'AzureWebhookEvent',
} as const;

export const $AzureWebhookPayload = {
  properties: {
    value: {
      items: {
        $ref: '#/components/schemas/AzureWebhookEvent',
      },
      type: 'array',
      title: 'Value',
      default: [],
    },
  },
  type: 'object',
  title: 'AzureWebhookPayload',
} as const;

export const $Body_batch_upload_file_v1_agents_batch_upload_file_post = {
  properties: {
    files: {
      items: {
        type: 'string',
        format: 'binary',
      },
      type: 'array',
      title: 'Files',
    },
  },
  type: 'object',
  required: ['files'],
  title: 'Body_batch_upload_file_v1_agents_batch_upload_file_post',
} as const;

export const $Body_batch_upload_file_v1_conversations_batch_upload_file_post = {
  properties: {
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
    agent_id: {
      type: 'string',
      title: 'Agent Id',
    },
    files: {
      items: {
        type: 'string',
        format: 'binary',
      },
      type: 'array',
      title: 'Files',
    },
  },
  type: 'object',
  required: ['files'],
  title: 'Body_batch_upload_file_v1_conversations_batch_upload_file_post',
} as const;

export const $CallToolRequest = {
  properties: {
    parameters: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Parameters',
    },
  },
  type: 'object',
  title: 'CallToolRequest',
} as const;

export const $CallToolResponse = {
  properties: {
    outputs: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Outputs',
    },
  },
  type: 'object',
  title: 'CallToolResponse',
} as const;

export const $Category = {
  type: 'string',
  enum: ['WebSearch', 'Basic', 'Artifact', 'Knowledge'],
  title: 'Category',
} as const;

export const $ChatMessage = {
  properties: {
    role: {
      $ref: '#/components/schemas/ChatRole',
      title: 'One of CHATBOT|USER|SYSTEM to identify who the message is coming from.',
    },
    message: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Contents of the chat message.',
    },
    tool_results: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Results from the tool call.',
    },
    tool_calls: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'List of tool calls generated for custom tools',
    },
  },
  additionalProperties: true,
  type: 'object',
  required: ['role'],
  title: 'ChatMessage',
} as const;

export const $ChatResponseEvent = {
  properties: {
    event: {
      $ref: '#/components/schemas/StreamEvent',
      title: 'type of stream event',
    },
    data: {
      anyOf: [
        {
          $ref: '#/components/schemas/StreamStart',
        },
        {
          $ref: '#/components/schemas/StreamTextGeneration',
        },
        {
          $ref: '#/components/schemas/StreamCitationGeneration',
        },
        {
          $ref: '#/components/schemas/StreamQueryGeneration',
        },
        {
          $ref: '#/components/schemas/StreamSearchResults',
        },
        {
          $ref: '#/components/schemas/StreamEnd',
        },
        {
          $ref: '#/components/schemas/PartialStreamEnd',
        },
        {
          $ref: '#/components/schemas/StreamToolInput',
        },
        {
          $ref: '#/components/schemas/StreamToolResult',
        },
        {
          $ref: '#/components/schemas/StreamSearchQueriesGeneration',
        },
        {
          $ref: '#/components/schemas/StreamToolCallsGeneration',
        },
        {
          $ref: '#/components/schemas/StreamToolCallsChunk',
        },
        {
          $ref: '#/components/schemas/NonStreamedChatResponse',
        },
      ],
      title: 'Data returned from chat response of a given event type',
    },
  },
  type: 'object',
  required: ['event', 'data'],
  title: 'ChatResponseEvent',
} as const;

export const $ChatRole = {
  type: 'string',
  enum: ['CHATBOT', 'USER', 'SYSTEM', 'TOOL', 'EDIT'],
  title: 'ChatRole',
  description: 'One of CHATBOT|USER|SYSTEM to identify who the message is coming from.',
} as const;

export const $CheckDocumentAccessRequest = {
  properties: {
    document_ids: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Document Ids',
    },
  },
  type: 'object',
  required: ['document_ids'],
  title: 'CheckDocumentAccessRequest',
} as const;

export const $Citation = {
  properties: {
    text: {
      type: 'string',
      title: 'Text',
    },
    start: {
      type: 'integer',
      title: 'Start',
    },
    end: {
      type: 'integer',
      title: 'End',
    },
    document_ids: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Document Ids',
    },
    type: {
      $ref: '#/components/schemas/CitationType',
      default: 'UNKNOWN',
    },
  },
  type: 'object',
  required: ['text', 'start', 'end', 'document_ids'],
  title: 'Citation',
} as const;

export const $CitationType = {
  type: 'string',
  enum: ['TEXT_CONTENT', 'PLAN', 'UNKNOWN'],
  title: 'CitationType',
} as const;

export const $CohereChatPromptTruncation = {
  type: 'string',
  enum: ['OFF', 'AUTO_PRESERVE_ORDER'],
  title: 'CohereChatPromptTruncation',
  description: 'Dictates how the prompt will be constructed. Defaults to "AUTO_PRESERVE_ORDER".',
} as const;

export const $CohereChatRequest = {
  properties: {
    message: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'The message to send to the chatbot.',
    },
    preamble: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'A string to override the preamble.',
    },
    chat_history: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ChatMessage',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title:
        'A list of entries used to construct the conversation. If provided, these messages will be used to build the prompt and the conversation_id will be ignored so no data will be stored to maintain state.',
    },
    conversation_id: {
      type: 'string',
      title:
        'To store a conversation then create a conversation id and use it for every related request',
    },
    tools: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/CohereRequestTool',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: `
            List of managed tools to use for the response.
            If passing in managed tools, you only need to provide the name of the tool.

            Managed Tools Examples:
            tools=[
                {
                    "name": "Wiki Retriever - LangChain",
                },
                {
                    "name": "Calculator",
                }
            ]
        `,
    },
    documents: {
      items: {
        type: 'object',
      },
      type: 'array',
      title: `Documents to use to generate grounded response with citations. Example:
            documents=[
                {
                    "id": "national_geographic_everest",
                    "title": "Height of Mount Everest",
                    "text": "The height of Mount Everest is 29,035 feet",
                    "url": "https://education.nationalgeographic.org/resource/mount-everest/",
                },
                {
                    "id": "national_geographic_mariana",
                    "title": "Depth of the Mariana Trench",
                    "text": "The depth of the Mariana Trench is 36,070 feet",
                    "url": "https://www.nationalgeographic.org/activity/mariana-trench-deepest-place-earth",
                },
            ]
        `,
    },
    model: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'The model to use for generating the response.',
    },
    temperature: {
      anyOf: [
        {
          type: 'number',
          minimum: 0,
        },
        {
          type: 'null',
        },
      ],
      title:
        'A non-negative float that tunes the degree of randomness in generation. Lower temperatures mean less random generations, and higher temperatures mean more random generations.',
    },
    k: {
      anyOf: [
        {
          type: 'integer',
          maximum: 500,
          minimum: 0,
        },
        {
          type: 'null',
        },
      ],
      title:
        'Ensures only the top k most likely tokens are considered for generation at each step.',
    },
    p: {
      anyOf: [
        {
          type: 'number',
          maximum: 0.99,
          minimum: 0,
        },
        {
          type: 'null',
        },
      ],
      title:
        'Ensures that only the most likely tokens, with total probability mass of p, are considered for generation at each step. If both k and p are enabled, p acts after k.',
    },
    file_ids: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'List of File IDs for PDFs used in RAG for the response.',
    },
    search_queries_only: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title:
        "When set to true a list of search queries are generated. No search will occur nor replies to the user's message.",
      default: false,
    },
    max_tokens: {
      anyOf: [
        {
          type: 'integer',
          minimum: 1,
        },
        {
          type: 'null',
        },
      ],
      title:
        'The maximum number of tokens the model will generate as part of the response. Note: Setting a low value may result in incomplete generations.',
    },
    seed: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title:
        'If specified, the backend will make a best effort to sample tokens deterministically, such that repeated requests with the same seed and parameters should return the same result. However, determinism cannot be totally guaranteed.',
    },
    stop_sequences: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title:
        'A list of up to 5 strings that the model will use to stop generation. If the model generates a string that matches any of the strings in the list, it will stop generating tokens and return the generated text up to that point not including the stop sequence.',
    },
    presence_penalty: {
      anyOf: [
        {
          type: 'number',
          maximum: 1,
          minimum: 0,
        },
        {
          type: 'null',
        },
      ],
      title:
        'Used to reduce repetitiveness of generated tokens. Similar to frequency_penalty, except that this penalty is applied equally to all tokens that have already appeared, regardless of their exact frequencies.',
    },
    frequency_penalty: {
      anyOf: [
        {
          type: 'number',
          maximum: 1,
          minimum: 0,
        },
        {
          type: 'null',
        },
      ],
      title:
        'Used to reduce repetitiveness of generated tokens. The higher the value, the stronger a penalty is applied to previously present tokens, proportional to how many times they have already appeared in the prompt or prior generation.',
    },
    prompt_truncation: {
      $ref: '#/components/schemas/CohereChatPromptTruncation',
      title: "Dictates how the prompt will be constructed. Defaults to 'AUTO_PRESERVE_ORDER'.",
      default: 'AUTO_PRESERVE_ORDER',
    },
    tool_results: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title:
        'A list of results from invoking tools recommended by the model in the previous chat turn. Results are used to produce a text response and will be referenced in citations.',
    },
    force_single_step: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title:
        'If set to true, the model will generate a single response in a single step. This is useful for generating a response to a single message.',
    },
    agent_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'The agent ID to use for the chat.',
    },
    citation_quality: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title:
        "Dictates the approach taken to generating citations as part of the RAG flow by allowing the user to specify whether they want 'accurate' results, 'fast' results or no results.",
      default: 'fast',
    },
    tool_response_prefix: {
      anyOf: [
        {
          $ref: '#/components/schemas/ToolResponsePrefix',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool response prefix to prepend to open chatbot turn.',
    },
    safety_mode: {
      $ref: '#/components/schemas/CohereChatSafetyMode',
      title: 'select the safety instruction inserted into the prompt.',
      default: 'CONTEXTUAL',
    },
    response_format: {
      anyOf: [
        {
          $ref: '#/components/schemas/TextResponseFormat',
        },
        {
          $ref: '#/components/schemas/JsonObjectResponseFormat',
        },
        {
          type: 'null',
        },
      ],
      title: 'Response Format',
    },
    edits: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/DocumentEditItem',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Edits',
    },
    add_pre_user_turn_message: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title:
        'When set to None, the option will be set by `backend.config.setting.Settings`. This determines whether a fixed system message will be added to the beginning of the chat history by default.',
    },
  },
  type: 'object',
  title: 'CohereChatRequest',
  description: `Request shape for Cohere Python SDK Streamed Chat.
See: https://github.com/cohere-ai/cohere-python/blob/main/src/cohere/base_client.py#L1629`,
} as const;

export const $CohereChatSafetyMode = {
  type: 'string',
  enum: ['CONTEXTUAL', 'STRICT', 'NONE'],
  title: 'CohereChatSafetyMode',
  description:
    'Used to select the safety instruction inserted into the prompt. Defaults to "CONTEXTUAL".',
} as const;

export const $CohereRequestTool = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      default: '',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      default: '',
    },
    parameter_definitions: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Parameter Definitions',
      default: {},
    },
    document_ids: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Document Ids',
      default: [],
    },
  },
  type: 'object',
  title: 'CohereRequestTool',
  description: `\`name\` has to match tool id
see \`get_prompt_tool_mapping()\`

[permalink at time of writing](https://github.com/cohere-ai/north/blob/149bd3abd32211a5ba6d4dbd3902426690a3bee9/src/backend/config/tools.py#L96)`,
} as const;

export const $ConversationFilePublic = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
    file_name: {
      type: 'string',
      title: 'File Name',
    },
    file_size: {
      type: 'integer',
      minimum: 0,
      title: 'File Size',
      default: 0,
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'conversation_id', 'file_name'],
  title: 'ConversationFilePublic',
} as const;

export const $ConversationJobStatus = {
  properties: {
    tool_id: {
      type: 'string',
      title: 'Tool Id',
    },
    job_state: {
      $ref: '#/components/schemas/JobState',
    },
    last_updated: {
      type: 'string',
      format: 'date-time',
      title: 'Last Updated',
    },
    total_count: {
      type: 'integer',
      title: 'Total Count',
    },
    success_count: {
      type: 'integer',
      title: 'Success Count',
    },
    files_failed: {
      items: {
        $ref: '#/components/schemas/FileStatus',
      },
      type: 'array',
      title: 'Files Failed',
    },
  },
  type: 'object',
  required: [
    'tool_id',
    'job_state',
    'last_updated',
    'total_count',
    'success_count',
    'files_failed',
  ],
  title: 'ConversationJobStatus',
} as const;

export const $ConversationPublic = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    title: {
      type: 'string',
      title: 'Title',
    },
    messages: {
      items: {
        $ref: '#/components/schemas/Message',
      },
      type: 'array',
      title: 'Messages',
    },
    files: {
      items: {
        $ref: '#/components/schemas/ConversationFilePublic',
      },
      type: 'array',
      title: 'Files',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    agent_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Agent Id',
    },
    type: {
      $ref: '#/components/schemas/ConversationType',
    },
    total_file_size: {
      type: 'integer',
      title: 'Total File Size',
      readOnly: true,
    },
  },
  type: 'object',
  required: [
    'id',
    'created_at',
    'updated_at',
    'title',
    'messages',
    'files',
    'description',
    'agent_id',
    'type',
    'total_file_size',
  ],
  title: 'ConversationPublic',
} as const;

export const $ConversationType = {
  type: 'string',
  enum: ['chat', 'document_editing'],
  title: 'ConversationType',
} as const;

export const $ConversationWithoutMessages = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    title: {
      type: 'string',
      title: 'Title',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    agent_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Agent Id',
    },
    type: {
      $ref: '#/components/schemas/ConversationType',
    },
    total_file_size: {
      type: 'integer',
      title: 'Total File Size',
      readOnly: true,
    },
  },
  type: 'object',
  required: [
    'id',
    'created_at',
    'updated_at',
    'title',
    'description',
    'agent_id',
    'type',
    'total_file_size',
  ],
  title: 'ConversationWithoutMessages',
} as const;

export const $CreateAgentRequest = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
    },
    version: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Version',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    preamble: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Preamble',
    },
    temperature: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title: 'Temperature',
    },
    tools: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools',
    },
    tools_metadata: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/CreateAgentToolMetadataRequest',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools Metadata',
    },
    deployment_config: {
      anyOf: [
        {
          additionalProperties: {
            type: 'string',
          },
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Deployment Config',
    },
    is_default_deployment: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Default Deployment',
      default: false,
    },
    model: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Model',
    },
    deployment: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Deployment',
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
    },
    is_private: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Private',
      default: false,
    },
  },
  type: 'object',
  required: ['name'],
  title: 'CreateAgentRequest',
} as const;

export const $CreateAgentToolMetadataRequest = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Id',
    },
    tool_name: {
      type: 'string',
      title: 'Tool Name',
    },
    artifacts: {
      items: {
        type: 'object',
      },
      type: 'array',
      title: 'Artifacts',
    },
  },
  type: 'object',
  required: ['tool_name', 'artifacts'],
  title: 'CreateAgentToolMetadataRequest',
} as const;

export const $CreateSnapshotRequest = {
  properties: {
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
  },
  type: 'object',
  required: ['conversation_id'],
  title: 'CreateSnapshotRequest',
} as const;

export const $CreateSnapshotResponse = {
  properties: {
    snapshot_id: {
      type: 'string',
      title: 'Snapshot Id',
    },
    link_id: {
      type: 'string',
      title: 'Link Id',
    },
    messages: {
      items: {
        $ref: '#/components/schemas/Message',
      },
      type: 'array',
      title: 'Messages',
    },
  },
  type: 'object',
  required: ['snapshot_id', 'link_id', 'messages'],
  title: 'CreateSnapshotResponse',
} as const;

export const $CreateTemplateRequest = {
  properties: {
    name: {
      type: 'string',
      minLength: 2,
      title: 'Name',
    },
    description: {
      type: 'string',
      minLength: 2,
      title: 'Description',
    },
    input_definitions: {
      items: {
        $ref: '#/components/schemas/InputDefinition',
      },
      type: 'array',
      title: 'Input Definitions',
    },
    task_definitions: {
      items: {
        items: {
          $ref: '#/components/schemas/TaskDefinition',
        },
        type: 'array',
      },
      type: 'array',
      minItems: 1,
      title: 'Task Definitions',
    },
    output_template: {
      type: 'string',
      title: 'Output Template',
    },
  },
  type: 'object',
  required: ['name', 'description', 'input_definitions', 'task_definitions', 'output_template'],
  title: 'CreateTemplateRequest',
} as const;

export const $CreateTemplateResponse = {
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      title: 'Id',
    },
  },
  type: 'object',
  required: ['id'],
  title: 'CreateTemplateResponse',
} as const;

export const $CreateUser = {
  properties: {
    password: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Password',
    },
    hashed_password: {
      anyOf: [
        {
          type: 'string',
          format: 'binary',
        },
        {
          type: 'null',
        },
      ],
      title: 'Hashed Password',
    },
    given_name: {
      type: 'string',
      title: 'Given Name',
    },
    family_name: {
      type: 'string',
      title: 'Family Name',
    },
    email: {
      type: 'string',
      title: 'Email',
    },
    nickname: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Nickname',
    },
    locale: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Locale',
    },
    fullname: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Fullname',
    },
  },
  type: 'object',
  required: ['given_name', 'family_name', 'email'],
  title: 'CreateUser',
} as const;

export const $CreateUserResponse = {
  properties: {
    token: {
      type: 'string',
      title: 'Token',
    },
  },
  type: 'object',
  required: ['token'],
  title: 'CreateUserResponse',
} as const;

export const $DebugInfo = {
  properties: {
    prompt: {
      type: 'string',
      title: 'Prompt',
    },
    raw_generation: {
      type: 'string',
      title: 'Raw Generation',
    },
    chat_trace_id: {
      type: 'string',
      title: 'Chat Trace Id',
    },
  },
  type: 'object',
  required: ['prompt', 'raw_generation', 'chat_trace_id'],
  title: 'DebugInfo',
} as const;

export const $DeleteAgent = {
  properties: {},
  type: 'object',
  title: 'DeleteAgent',
} as const;

export const $DeleteConversationFileResponse = {
  properties: {},
  type: 'object',
  title: 'DeleteConversationFileResponse',
} as const;

export const $DeleteConversationResponse = {
  properties: {},
  type: 'object',
  title: 'DeleteConversationResponse',
} as const;

export const $DeleteSnapshotLinkResponse = {
  properties: {},
  type: 'object',
  title: 'DeleteSnapshotLinkResponse',
} as const;

export const $DeleteSnapshotResponse = {
  properties: {},
  type: 'object',
  title: 'DeleteSnapshotResponse',
} as const;

export const $DeleteTemplateResponse = {
  properties: {
    deleted: {
      type: 'boolean',
      title: 'Deleted',
    },
  },
  type: 'object',
  required: ['deleted'],
  title: 'DeleteTemplateResponse',
} as const;

export const $DeleteToolAuth = {
  properties: {},
  type: 'object',
  title: 'DeleteToolAuth',
} as const;

export const $DeleteUser = {
  properties: {},
  type: 'object',
  title: 'DeleteUser',
} as const;

export const $DeploymentWithModels = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    is_available: {
      type: 'boolean',
      title: 'Is Available',
      default: false,
    },
    is_community: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Community',
      default: false,
    },
    env_vars: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Env Vars',
    },
    models: {
      items: {
        $ref: '#/components/schemas/ModelSimple',
      },
      type: 'array',
      title: 'Models',
    },
  },
  type: 'object',
  required: ['name', 'env_vars', 'models'],
  title: 'DeploymentWithModels',
} as const;

export const $DocumentEdit = {
  properties: {
    highlight_text: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Highlight Text',
    },
    feedback: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Feedback',
    },
    message_before: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Message Before',
    },
    message_after: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Message After',
    },
  },
  type: 'object',
  title: 'DocumentEdit',
} as const;

export const $DocumentEditItem = {
  properties: {
    highlight_text: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Highlight Text',
    },
    message_before: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Message Before',
    },
    message_after: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Message After',
    },
    feedback: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Feedback',
    },
  },
  type: 'object',
  title: 'DocumentEditItem',
  description: 'Document edit feedback to be provided to the model',
} as const;

export const $Feedback = {
  properties: {
    user_id: {
      type: 'string',
      title: 'User Id',
    },
    message_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Message Id',
    },
    message: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Message',
    },
    snapshot_link_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Snapshot Link Id',
    },
    feedback_type: {
      $ref: '#/components/schemas/FeedbackType',
    },
    additional_details: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Additional Details',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    raw_prompt: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Raw Prompt',
    },
    raw_generation: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Raw Generation',
    },
    tool_plan: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Plan',
    },
  },
  type: 'object',
  required: [
    'user_id',
    'message_id',
    'message',
    'snapshot_link_id',
    'feedback_type',
    'additional_details',
    'created_at',
    'raw_prompt',
    'raw_generation',
    'tool_plan',
  ],
  title: 'Feedback',
} as const;

export const $FeedbackType = {
  type: 'string',
  enum: ['POSITIVE', 'NEGATIVE', 'BUG'],
  title: 'FeedbackType',
} as const;

export const $FileStatus = {
  properties: {
    file_id: {
      type: 'string',
      title: 'File Id',
    },
    display_name: {
      type: 'string',
      title: 'Display Name',
    },
    error_message: {
      type: 'string',
      title: 'Error Message',
      default: '',
    },
  },
  type: 'object',
  required: ['file_id', 'display_name'],
  title: 'FileStatus',
} as const;

export const $GHUserPublic = {
  properties: {
    user_id: {
      type: 'string',
      title: 'User Id',
    },
    username: {
      type: 'string',
      title: 'Username',
    },
  },
  type: 'object',
  required: ['user_id', 'username'],
  title: 'GHUserPublic',
} as const;

export const $GenerateTitleResponse = {
  properties: {
    title: {
      type: 'string',
      title: 'Title',
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error',
    },
  },
  type: 'object',
  required: ['title'],
  title: 'GenerateTitleResponse',
} as const;

export const $GetFeedbackResponse = {
  properties: {
    feedback: {
      items: {
        $ref: '#/components/schemas/Feedback',
      },
      type: 'array',
      title: 'Feedback',
    },
  },
  type: 'object',
  required: ['feedback'],
  title: 'GetFeedbackResponse',
} as const;

export const $GithubRegisterReq = {
  properties: {
    username: {
      type: 'string',
      title: 'Username',
    },
    token: {
      type: 'string',
      title: 'Token',
    },
  },
  type: 'object',
  required: ['username', 'token'],
  title: 'GithubRegisterReq',
} as const;

export const $HTTPValidationError = {
  properties: {
    detail: {
      items: {
        $ref: '#/components/schemas/ValidationError',
      },
      type: 'array',
      title: 'Detail',
    },
  },
  type: 'object',
  title: 'HTTPValidationError',
} as const;

export const $Input = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    label: {
      type: 'string',
      title: 'Label',
    },
    description: {
      type: 'string',
      title: 'Description',
    },
    type: {
      type: 'string',
      const: 'string',
      title: 'Type',
    },
    required: {
      type: 'boolean',
      title: 'Required',
    },
    format: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Format',
    },
    example: {
      type: 'string',
      title: 'Example',
    },
    value: {
      type: 'string',
      title: 'Value',
    },
  },
  type: 'object',
  required: ['id', 'label', 'description', 'type', 'required', 'example', 'value'],
  title: 'Input',
} as const;

export const $InputDefinition = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    label: {
      type: 'string',
      title: 'Label',
    },
    description: {
      type: 'string',
      title: 'Description',
    },
    type: {
      type: 'string',
      const: 'string',
      title: 'Type',
    },
    required: {
      type: 'boolean',
      title: 'Required',
    },
    format: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Format',
    },
    example: {
      type: 'string',
      title: 'Example',
    },
  },
  type: 'object',
  required: ['id', 'label', 'description', 'type', 'required', 'example'],
  title: 'InputDefinition',
} as const;

export const $JWTResponse = {
  properties: {
    token: {
      type: 'string',
      title: 'Token',
    },
  },
  type: 'object',
  required: ['token'],
  title: 'JWTResponse',
} as const;

export const $JobState = {
  type: 'string',
  enum: ['CREATED', 'RUNNING', 'FINISHED', 'FAILED'],
  title: 'JobState',
} as const;

export const $JsonObjectResponseFormat = {
  properties: {
    type: {
      type: 'string',
      const: 'json_object',
      title: 'Type',
      default: 'json_object',
    },
    schema_: {
      anyOf: [
        {
          additionalProperties: {
            anyOf: [
              {},
              {
                type: 'null',
              },
            ],
          },
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Schema',
    },
  },
  additionalProperties: true,
  type: 'object',
  title: 'JsonObjectResponseFormat',
  description: `Configuration for forcing the model output to adhere to the specified format. Supported on [Command R 03-2024](https://docs.cohere.com/docs/command-r), [Command R+ 04-2024](https://docs.cohere.com/docs/command-r-plus) and newer models.

The model can be forced into outputting JSON objects (with up to 5 levels of nesting) by setting \`{ "type": "json_object" }\`.

A [JSON Schema](https://json-schema.org/) can optionally be provided, to ensure a specific structure.

**Note**: When using  \`{ "type": "json_object" }\` your \`message\` should always explicitly instruct the model to generate a JSON (eg: _"Generate a JSON ..."_) . Otherwise the model may end up getting stuck generating an infinite stream of characters and eventually run out of context length.
**Limitation**: The parameter is not supported in RAG mode (when any of \`connectors\`, \`documents\`, \`tools\`, \`tool_results\` are provided).`,
} as const;

export const $ListAuthStrategy = {
  properties: {
    strategy: {
      type: 'string',
      title: 'Strategy',
    },
    client_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Client Id',
    },
    authorization_endpoint: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Authorization Endpoint',
    },
    pkce_enabled: {
      type: 'boolean',
      title: 'Pkce Enabled',
    },
  },
  type: 'object',
  required: ['strategy', 'client_id', 'authorization_endpoint', 'pkce_enabled'],
  title: 'ListAuthStrategy',
} as const;

export const $ListConversationFile = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
    file_name: {
      type: 'string',
      title: 'File Name',
    },
    file_size: {
      type: 'integer',
      minimum: 0,
      title: 'File Size',
      default: 0,
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'conversation_id', 'file_name'],
  title: 'ListConversationFile',
} as const;

export const $ListModelsResponse = {
  properties: {
    models: {
      additionalProperties: {
        items: {
          type: 'string',
        },
        type: 'array',
      },
      propertyNames: {
        $ref: '#/components/schemas/ProviderName',
      },
      type: 'object',
      title: 'Models',
    },
  },
  type: 'object',
  required: ['models'],
  title: 'ListModelsResponse',
} as const;

export const $Login = {
  properties: {
    strategy: {
      type: 'string',
      title: 'Strategy',
    },
    payload: {
      additionalProperties: {
        type: 'string',
      },
      type: 'object',
      title: 'Payload',
    },
  },
  type: 'object',
  required: ['strategy', 'payload'],
  title: 'Login',
} as const;

export const $Logout = {
  properties: {},
  type: 'object',
  title: 'Logout',
} as const;

export const $Message = {
  properties: {
    text: {
      type: 'string',
      title: 'Text',
    },
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    generation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Generation Id',
    },
    model: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Model',
    },
    deployment: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Deployment',
    },
    position: {
      type: 'integer',
      title: 'Position',
    },
    is_active: {
      type: 'boolean',
      title: 'Is Active',
    },
    documents: {
      items: {
        $ref: '#/components/schemas/ResponseDocument',
      },
      type: 'array',
      title: 'Documents',
    },
    citations: {
      items: {
        $ref: '#/components/schemas/Citation',
      },
      type: 'array',
      title: 'Citations',
    },
    files: {
      items: {
        $ref: '#/components/schemas/ConversationFilePublic',
      },
      type: 'array',
      title: 'Files',
    },
    tool_calls: {
      items: {
        $ref: '#/components/schemas/ToolCall',
      },
      type: 'array',
      title: 'Tool Calls',
    },
    document_edits: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/DocumentEdit',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Document Edits',
    },
    tool_plan: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Plan',
    },
    raw_prompt: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Raw Prompt',
    },
    raw_generation: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Raw Generation',
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error',
    },
    feedback: {
      anyOf: [
        {
          $ref: '#/components/schemas/FeedbackType',
        },
        {
          type: 'null',
        },
      ],
    },
    agent: {
      $ref: '#/components/schemas/MessageAgent',
    },
  },
  type: 'object',
  required: [
    'text',
    'id',
    'created_at',
    'updated_at',
    'generation_id',
    'position',
    'is_active',
    'documents',
    'citations',
    'files',
    'tool_calls',
    'tool_plan',
    'agent',
  ],
  title: 'Message',
} as const;

export const $MessageAgent = {
  type: 'string',
  enum: ['USER', 'CHATBOT', 'SYSTEM'],
  title: 'MessageAgent',
} as const;

export const $MicrosoftSubscription = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    subscription_id: {
      type: 'string',
      title: 'Subscription Id',
    },
    user_id: {
      type: 'string',
      title: 'User Id',
    },
    tool_id: {
      type: 'string',
      title: 'Tool Id',
    },
    expires_at_utc: {
      type: 'string',
      format: 'date-time',
      title: 'Expires At Utc',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
  },
  type: 'object',
  required: [
    'id',
    'subscription_id',
    'user_id',
    'tool_id',
    'expires_at_utc',
    'created_at',
    'updated_at',
  ],
  title: 'MicrosoftSubscription',
} as const;

export const $ModelSimple = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    cohere_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Cohere Name',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
  },
  type: 'object',
  required: ['id', 'name', 'cohere_name', 'description'],
  title: 'ModelSimple',
} as const;

export const $NonStreamedChatResponse = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Unique identifier for the response.',
    },
    response_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Unique identifier for the response.',
    },
    generation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Unique identifier for the generation.',
    },
    chat_history: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ChatMessage',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title:
        "A list of previous messages between the user and the model, meant to give the model conversational context for responding to the user's message.",
    },
    finish_reason: {
      type: 'string',
      title: 'Reason the chat stream ended.',
    },
    text: {
      type: 'string',
      title: 'Contents of the chat message.',
    },
    citations: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/Citation',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Citations for the chat message.',
      default: [],
    },
    documents: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ResponseDocument',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Documents used to generate grounded response with citations.',
      default: [],
    },
    search_results: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Search results used to generate grounded response with citations.',
      default: [],
    },
    search_queries: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/SearchQuery',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'List of generated search queries.',
      default: [],
    },
    conversation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title:
        'To store a conversation then create a conversation id and use it for every related request.',
    },
    tool_calls: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ToolCall',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'List of tool calls generated for custom tools',
      default: [],
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error message if the response is an error.',
    },
  },
  type: 'object',
  required: [
    'response_id',
    'generation_id',
    'chat_history',
    'finish_reason',
    'text',
    'conversation_id',
  ],
  title: 'NonStreamedChatResponse',
} as const;

export const $PartialStreamEnd = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Unique identifier for the response.',
    },
    response_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Response Id',
    },
    generation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Generation Id',
    },
    conversation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Conversation Id',
    },
    finish_reason: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Finish Reason',
    },
    debug_info: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/DebugInfo',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Debug info',
    },
  },
  type: 'object',
  title: 'PartialStreamEnd',
} as const;

export const $PostFeedbackRequest = {
  properties: {
    message_id: {
      type: 'string',
      title: 'Message Id',
    },
    feedback_type: {
      $ref: '#/components/schemas/FeedbackType',
    },
    additional_details: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Additional Details',
    },
  },
  type: 'object',
  required: ['message_id', 'feedback_type', 'additional_details'],
  title: 'PostFeedbackRequest',
} as const;

export const $PostFeedbackResponse = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    snapshot_link_id: {
      type: 'string',
      title: 'Snapshot Link Id',
    },
  },
  type: 'object',
  required: ['id', 'snapshot_link_id'],
  title: 'PostFeedbackResponse',
} as const;

export const $PromptSuggestionRequest = {
  properties: {
    current_prompt: {
      type: 'string',
      maxLength: 150,
      minLength: 5,
      title: 'Current Prompt',
    },
  },
  type: 'object',
  required: ['current_prompt'],
  title: 'PromptSuggestionRequest',
} as const;

export const $PromptSuggestionResponse = {
  properties: {
    suggested_prompt: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Suggested Prompt',
    },
  },
  type: 'object',
  required: ['suggested_prompt'],
  title: 'PromptSuggestionResponse',
} as const;

export const $ProviderName = {
  type: 'string',
  enum: ['cohere_platform', 'sagemaker', 'azure', 'bedrock', 'single_container'],
  title: 'ProviderName',
} as const;

export const $RecommendationItem = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    document_ids: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Document Ids',
    },
    tool_name: {
      type: 'string',
      title: 'Tool Name',
    },
    operation: {
      type: 'string',
      title: 'Operation',
    },
    content: {
      type: 'string',
      title: 'Content',
    },
    header: {
      $ref: '#/components/schemas/RecommendationItemHeader',
    },
  },
  type: 'object',
  required: ['id', 'document_ids', 'tool_name', 'operation', 'content', 'header'],
  title: 'RecommendationItem',
} as const;

export const $RecommendationItemHeader = {
  properties: {
    title: {
      type: 'string',
      title: 'Title',
    },
    url: {
      type: 'string',
      title: 'Url',
    },
  },
  type: 'object',
  required: ['title', 'url'],
  title: 'RecommendationItemHeader',
} as const;

export const $RelevantRepoDetails = {
  properties: {
    owner_login: {
      type: 'string',
      title: 'Owner Login',
    },
    id: {
      type: 'integer',
      title: 'Id',
    },
    html_url: {
      type: 'string',
      title: 'Html Url',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    full_name: {
      type: 'string',
      title: 'Full Name',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    private: {
      type: 'boolean',
      title: 'Private',
    },
    clone_url: {
      type: 'string',
      title: 'Clone Url',
    },
    git_url: {
      type: 'string',
      title: 'Git Url',
    },
    commits_url: {
      type: 'string',
      title: 'Commits Url',
    },
    branches_url: {
      type: 'string',
      title: 'Branches Url',
    },
    default_branch: {
      type: 'string',
      title: 'Default Branch',
    },
    archive_url: {
      type: 'string',
      title: 'Archive Url',
    },
    pushed_at: {
      type: 'string',
      format: 'date-time',
      title: 'Pushed At',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
  },
  type: 'object',
  required: [
    'owner_login',
    'id',
    'html_url',
    'full_name',
    'name',
    'private',
    'clone_url',
    'git_url',
    'commits_url',
    'branches_url',
    'default_branch',
    'archive_url',
    'pushed_at',
    'created_at',
    'updated_at',
  ],
  title: 'RelevantRepoDetails',
} as const;

export const $ResponseDocument = {
  properties: {
    text: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Text',
    },
    document_id: {
      type: 'string',
      title: 'Document Id',
    },
    title: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Title',
    },
    url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Url',
    },
    fields: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Fields',
    },
    tool_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Name',
    },
    did_user_have_access: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Did User Have Access',
    },
  },
  type: 'object',
  required: ['document_id'],
  title: 'ResponseDocument',
} as const;

export const $RunBase = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    description: {
      type: 'string',
      title: 'Description',
    },
    agent_id: {
      type: 'string',
      title: 'Agent Id',
    },
    template_id: {
      type: 'string',
      format: 'uuid',
      title: 'Template Id',
    },
    inputs: {
      items: {
        $ref: '#/components/schemas/Input',
      },
      type: 'array',
      title: 'Inputs',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    status: {
      $ref: '#/components/schemas/WorkflowRunStatus',
    },
  },
  type: 'object',
  required: [
    'id',
    'name',
    'description',
    'agent_id',
    'template_id',
    'inputs',
    'created_at',
    'status',
  ],
  title: 'RunBase',
} as const;

export const $RunDetails = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    description: {
      type: 'string',
      title: 'Description',
    },
    agent_id: {
      type: 'string',
      title: 'Agent Id',
    },
    template_id: {
      type: 'string',
      format: 'uuid',
      title: 'Template Id',
    },
    inputs: {
      items: {
        $ref: '#/components/schemas/Input',
      },
      type: 'array',
      title: 'Inputs',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    status: {
      $ref: '#/components/schemas/WorkflowRunStatus',
    },
    tasks: {
      items: {
        items: {
          $ref: '#/components/schemas/Task',
        },
        type: 'array',
      },
      type: 'array',
      title: 'Tasks',
    },
    output_template: {
      type: 'string',
      title: 'Output Template',
    },
    output: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Output',
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error',
    },
  },
  type: 'object',
  required: [
    'id',
    'name',
    'description',
    'agent_id',
    'template_id',
    'inputs',
    'created_at',
    'status',
    'tasks',
    'output_template',
    'output',
    'error',
  ],
  title: 'RunDetails',
} as const;

export const $SearchQuery = {
  properties: {
    text: {
      type: 'string',
      title: 'Text',
    },
    generation_id: {
      type: 'string',
      title: 'Generation Id',
    },
  },
  type: 'object',
  required: ['text', 'generation_id'],
  title: 'SearchQuery',
} as const;

export const $SearchResponse = {
  properties: {
    connector_name: {
      type: 'string',
      title: 'Connector Name',
    },
    results: {
      items: {
        type: 'object',
      },
      type: 'array',
      title: 'Results',
    },
  },
  type: 'object',
  required: ['connector_name', 'results'],
  title: 'SearchResponse',
} as const;

export const $SnapshotData = {
  properties: {
    title: {
      type: 'string',
      title: 'Title',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    messages: {
      items: {
        $ref: '#/components/schemas/Message',
      },
      type: 'array',
      title: 'Messages',
    },
  },
  type: 'object',
  required: ['title', 'description', 'messages'],
  title: 'SnapshotData',
} as const;

export const $SnapshotPublic = {
  properties: {
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
    id: {
      type: 'string',
      title: 'Id',
    },
    last_message_id: {
      type: 'string',
      title: 'Last Message Id',
    },
    version: {
      type: 'integer',
      title: 'Version',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    snapshot: {
      $ref: '#/components/schemas/SnapshotData',
    },
    agent_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Agent Id',
    },
  },
  type: 'object',
  required: [
    'conversation_id',
    'id',
    'last_message_id',
    'version',
    'created_at',
    'updated_at',
    'snapshot',
  ],
  title: 'SnapshotPublic',
} as const;

export const $SnapshotWithLinks = {
  properties: {
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
    id: {
      type: 'string',
      title: 'Id',
    },
    last_message_id: {
      type: 'string',
      title: 'Last Message Id',
    },
    version: {
      type: 'integer',
      title: 'Version',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    snapshot: {
      $ref: '#/components/schemas/SnapshotData',
    },
    agent_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Agent Id',
    },
    links: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Links',
    },
  },
  type: 'object',
  required: [
    'conversation_id',
    'id',
    'last_message_id',
    'version',
    'created_at',
    'updated_at',
    'snapshot',
    'links',
  ],
  title: 'SnapshotWithLinks',
} as const;

export const $StartRunRequest = {
  properties: {
    agent_id: {
      type: 'string',
      title: 'Agent Id',
    },
    template_id: {
      type: 'string',
      format: 'uuid',
      title: 'Template Id',
    },
    inputs: {
      additionalProperties: {
        type: 'string',
      },
      type: 'object',
      title: 'Inputs',
    },
  },
  type: 'object',
  required: ['agent_id', 'template_id', 'inputs'],
  title: 'StartRunRequest',
} as const;

export const $StartRunResponse = {
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      title: 'Id',
    },
  },
  type: 'object',
  required: ['id'],
  title: 'StartRunResponse',
} as const;

export const $StreamCitationGeneration = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Unique identifier for the response.',
    },
    citations: {
      items: {
        $ref: '#/components/schemas/Citation',
      },
      type: 'array',
      title: 'Citations for the chat message.',
      default: [],
    },
  },
  type: 'object',
  title: 'StreamCitationGeneration',
  description: 'Stream citation generation event.',
} as const;

export const $StreamEnd = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Unique identifier for the response.',
    },
    response_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Response Id',
    },
    generation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Generation Id',
    },
    conversation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Conversation Id',
    },
    text: {
      type: 'string',
      title: 'Contents of the chat message.',
    },
    citations: {
      items: {
        $ref: '#/components/schemas/Citation',
      },
      type: 'array',
      title: 'Citations for the chat message.',
      default: [],
    },
    documents: {
      items: {
        $ref: '#/components/schemas/ResponseDocument',
      },
      type: 'array',
      title: 'Documents used to generate grounded response with citations.',
      default: [],
    },
    search_results: {
      items: {
        type: 'object',
      },
      type: 'array',
      title: 'Search results used to generate grounded response with citations.',
      default: [],
    },
    search_queries: {
      items: {
        $ref: '#/components/schemas/SearchQuery',
      },
      type: 'array',
      title: 'List of generated search queries.',
      default: [],
    },
    tool_calls: {
      items: {
        $ref: '#/components/schemas/ToolCall',
      },
      type: 'array',
      title: 'List of tool calls generated for custom tools',
      default: [],
    },
    finish_reason: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Finish Reason',
    },
    chat_history: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ChatMessage',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title:
        'A list of entries used to construct the conversation. If provided, these messages will be used to build the prompt and the conversation_id will be ignored so no data will be stored to maintain state.',
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error message if the response is an error.',
    },
    debug_info: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/DebugInfo',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Debug info',
    },
  },
  type: 'object',
  required: ['text'],
  title: 'StreamEnd',
} as const;

export const $StreamEvent = {
  type: 'string',
  enum: [
    'stream-start',
    'search-queries-generation',
    'search-results',
    'tool-input',
    'tool-results',
    'text-generation',
    'citation-generation',
    'stream-end',
    'partial-stream-end',
    'non-streamed-chat-response',
    'tool-calls-generation',
    'tool-calls-chunk',
    'debug',
  ],
  title: 'StreamEvent',
  description: "Stream Events returned by Cohere's chat stream response.",
} as const;

export const $StreamQueryGeneration = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Unique identifier for the response.',
    },
    query: {
      type: 'string',
      title: 'Search query used to generate grounded response with citations.',
    },
  },
  type: 'object',
  required: ['query'],
  title: 'StreamQueryGeneration',
  description: 'Stream query generation event.',
} as const;

export const $StreamSearchQueriesGeneration = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Unique identifier for the response.',
    },
    search_queries: {
      items: {
        $ref: '#/components/schemas/SearchQuery',
      },
      type: 'array',
      title: 'Search query used to generate grounded response with citations.',
      default: [],
    },
  },
  type: 'object',
  title: 'StreamSearchQueriesGeneration',
  description: 'Stream queries generation event.',
} as const;

export const $StreamSearchResults = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Unique identifier for the response.',
    },
    search_results: {
      items: {
        type: 'object',
      },
      type: 'array',
      title: 'Search results used to generate grounded response with citations.',
      default: [],
    },
    documents: {
      items: {
        $ref: '#/components/schemas/ResponseDocument',
      },
      type: 'array',
      title: 'Documents used to generate grounded response with citations.',
      default: [],
    },
  },
  type: 'object',
  title: 'StreamSearchResults',
} as const;

export const $StreamStart = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Unique identifier for the response.',
    },
    generation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Generation Id',
    },
    conversation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Conversation Id',
    },
  },
  type: 'object',
  title: 'StreamStart',
  description: 'Stream start event.',
} as const;

export const $StreamTextGeneration = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Unique identifier for the response.',
    },
    text: {
      type: 'string',
      title: 'Contents of the chat message.',
    },
  },
  type: 'object',
  required: ['text'],
  title: 'StreamTextGeneration',
  description: 'Stream text generation event.',
} as const;

export const $StreamToolCallsChunk = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Unique identifier for the response.',
    },
    tool_call_delta: {
      anyOf: [
        {
          $ref: '#/components/schemas/ToolCallDelta',
        },
        {
          type: 'null',
        },
      ],
      title: 'Partial tool call',
      default: {},
    },
    text: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Contents of the chat message.',
    },
  },
  type: 'object',
  required: ['text'],
  title: 'StreamToolCallsChunk',
} as const;

export const $StreamToolCallsGeneration = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Unique identifier for the response.',
    },
    stream_search_results: {
      anyOf: [
        {
          $ref: '#/components/schemas/StreamSearchResults',
        },
        {
          type: 'null',
        },
      ],
      title: 'List of search results used to generate grounded response with citations',
    },
    tool_calls: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ToolCall',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'List of tool calls generated for custom tools',
      default: [],
    },
    text: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Contents of the chat message.',
    },
  },
  type: 'object',
  required: ['text'],
  title: 'StreamToolCallsGeneration',
  description: 'Stream tool calls generation event.',
} as const;

export const $StreamToolInput = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Unique identifier for the response.',
    },
    input_type: {
      $ref: '#/components/schemas/ToolInputType',
    },
    tool_name: {
      type: 'string',
      title: 'Tool Name',
    },
    input: {
      type: 'string',
      title: 'Input',
    },
    text: {
      type: 'string',
      title: 'Text',
    },
  },
  type: 'object',
  required: ['input_type', 'tool_name', 'input', 'text'],
  title: 'StreamToolInput',
} as const;

export const $StreamToolResult = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Unique identifier for the response.',
    },
    tool_results: {
      items: {
        type: 'object',
      },
      type: 'array',
      title: 'Tool Results',
    },
  },
  type: 'object',
  required: ['tool_results'],
  title: 'StreamToolResult',
} as const;

export const $SyncAgentToolResponse = {
  properties: {},
  type: 'object',
  title: 'SyncAgentToolResponse',
} as const;

export const $Task = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    prompt: {
      type: 'string',
      title: 'Prompt',
    },
    tools: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Tools',
    },
    status: {
      $ref: '#/components/schemas/WorkflowTaskStatus',
    },
    results: {
      anyOf: [
        {
          $ref: '#/components/schemas/TaskResults',
        },
        {
          type: 'null',
        },
      ],
    },
  },
  type: 'object',
  required: ['id', 'name', 'prompt', 'tools', 'status'],
  title: 'Task',
} as const;

export const $TaskDefinition = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    tools: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Tools',
    },
    prompt: {
      type: 'string',
      title: 'Prompt',
    },
  },
  type: 'object',
  required: ['id', 'name', 'tools', 'prompt'],
  title: 'TaskDefinition',
} as const;

export const $TaskResponse = {
  properties: {
    text: {
      type: 'string',
      title: 'Text',
    },
    generation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Generation Id',
    },
    documents: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Documents',
    },
    citations: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Citations',
    },
    is_search_required: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Search Required',
    },
    search_queries: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Search Queries',
    },
    search_results: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Search Results',
    },
    finish_reason: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Finish Reason',
    },
    tool_calls: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Calls',
    },
    chat_history: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Chat History',
    },
  },
  type: 'object',
  required: [
    'text',
    'generation_id',
    'documents',
    'citations',
    'is_search_required',
    'search_queries',
    'search_results',
    'finish_reason',
    'tool_calls',
    'chat_history',
  ],
  title: 'TaskResponse',
} as const;

export const $TaskResults = {
  properties: {
    task_id: {
      type: 'string',
      title: 'Task Id',
    },
    response: {
      anyOf: [
        {
          $ref: '#/components/schemas/TaskResponse',
        },
        {
          type: 'null',
        },
      ],
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error',
    },
  },
  type: 'object',
  required: ['task_id', 'response'],
  title: 'TaskResults',
} as const;

export const $TemplateBase = {
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    description: {
      type: 'string',
      title: 'Description',
    },
    creator_id: {
      type: 'string',
      title: 'Creator Id',
    },
    creator_fullname: {
      type: 'string',
      title: 'Creator Fullname',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    workflow_tools: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Workflow Tools',
    },
  },
  type: 'object',
  required: [
    'id',
    'name',
    'description',
    'creator_id',
    'creator_fullname',
    'created_at',
    'workflow_tools',
  ],
  title: 'TemplateBase',
} as const;

export const $TemplateDetails = {
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    description: {
      type: 'string',
      title: 'Description',
    },
    creator_id: {
      type: 'string',
      title: 'Creator Id',
    },
    creator_fullname: {
      type: 'string',
      title: 'Creator Fullname',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    workflow_tools: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Workflow Tools',
    },
    input_definitions: {
      items: {
        $ref: '#/components/schemas/InputDefinition',
      },
      type: 'array',
      title: 'Input Definitions',
    },
    task_definitions: {
      items: {
        items: {
          $ref: '#/components/schemas/TaskDefinition',
        },
        type: 'array',
      },
      type: 'array',
      title: 'Task Definitions',
    },
    output_template: {
      type: 'string',
      title: 'Output Template',
    },
  },
  type: 'object',
  required: [
    'id',
    'name',
    'description',
    'creator_id',
    'creator_fullname',
    'created_at',
    'workflow_tools',
    'input_definitions',
    'task_definitions',
    'output_template',
  ],
  title: 'TemplateDetails',
} as const;

export const $TextResponseFormat = {
  properties: {
    type: {
      type: 'string',
      const: 'text',
      title: 'Type',
      default: 'text',
    },
  },
  additionalProperties: true,
  type: 'object',
  title: 'TextResponseFormat',
  description: `Configuration for forcing the model output to adhere to the specified format. Supported on [Command R 03-2024](https://docs.cohere.com/docs/command-r), [Command R+ 04-2024](https://docs.cohere.com/docs/command-r-plus) and newer models.

The model can be forced into outputting JSON objects (with up to 5 levels of nesting) by setting \`{ "type": "json_object" }\`.

A [JSON Schema](https://json-schema.org/) can optionally be provided, to ensure a specific structure.

**Note**: When using  \`{ "type": "json_object" }\` your \`message\` should always explicitly instruct the model to generate a JSON (eg: _"Generate a JSON ..."_) . Otherwise the model may end up getting stuck generating an infinite stream of characters and eventually run out of context length.
**Limitation**: The parameter is not supported in RAG mode (when any of \`connectors\`, \`documents\`, \`tools\`, \`tool_results\` are provided).`,
} as const;

export const $ToolArtifacts = {
  properties: {
    artifacts: {
      items: {},
      type: 'array',
      title: 'Artifacts',
    },
    nextPage: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Nextpage',
    },
  },
  type: 'object',
  required: ['artifacts'],
  title: 'ToolArtifacts',
} as const;

export const $ToolCall = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    parameters: {
      type: 'object',
      title: 'Parameters',
      default: {},
    },
  },
  type: 'object',
  required: ['name'],
  title: 'ToolCall',
} as const;

export const $ToolCallDelta = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
    },
    index: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Index',
    },
    parameters: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Parameters',
    },
    text: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Text',
    },
  },
  type: 'object',
  required: ['name', 'index', 'parameters', 'text'],
  title: 'ToolCallDelta',
} as const;

export const $ToolInputType = {
  type: 'string',
  enum: ['QUERY', 'CODE'],
  title: 'ToolInputType',
  description: 'Type of input passed to the tool',
} as const;

export const $ToolName = {
  type: 'string',
  enum: [
    'file_tools',
    'search_file',
    'read_document',
    'file_peek',
    'toolkit_python_interpreter',
    'toolkit_calculator',
    'google_drive',
    'web_scrape',
    'tavily_web_search',
    'google_web_search',
    'brave_web_search',
    'hybrid_web_search',
    'gmail',
    'gmail_compass',
    'github',
    'slack',
    'salesforce',
    'sharepoint',
    'outlook',
    'direct-injected-document',
  ],
  title: 'ToolName',
} as const;

export const $ToolResponse = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
    },
    display_name: {
      type: 'string',
      title: 'Display Name',
    },
    stage: {
      $ref: '#/components/schemas/ToolStage',
      default: 'Release',
    },
    description: {
      type: 'string',
      title: 'Description',
    },
    category: {
      $ref: '#/components/schemas/Category',
    },
    is_auth_required: {
      type: 'boolean',
      title: 'Is Auth Required',
      default: false,
    },
    auth_url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Auth Url',
      default: '',
    },
    token: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Token',
      default: '',
    },
    email: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Email',
      default: '',
    },
    is_visible: {
      type: 'boolean',
      title: 'Is Visible',
      default: false,
    },
    sync_available: {
      type: 'boolean',
      title: 'Sync Available',
      default: false,
    },
    is_compass_bypassed: {
      type: 'boolean',
      title: 'Is Compass Bypassed',
      default: false,
    },
    private_agent_only: {
      type: 'boolean',
      title: 'Private Agent Only',
      default: false,
    },
  },
  type: 'object',
  required: ['name', 'display_name', 'description', 'category'],
  title: 'ToolResponse',
} as const;

export const $ToolResponsePrefix = {
  properties: {
    tool_plan: {
      type: 'string',
      title: 'Tool Plan',
    },
    tool_calls: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ToolCall',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Calls',
    },
    tool_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Name',
    },
  },
  type: 'object',
  required: ['tool_plan'],
  title: 'ToolResponsePrefix',
  description: 'A string to prepend to open chatbot turn',
} as const;

export const $ToolStage = {
  type: 'string',
  enum: ['Release', 'Alpha', 'Beta'],
  title: 'ToolStage',
} as const;

export const $UpdateAgentRequest = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
    },
    version: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Version',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    preamble: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Preamble',
    },
    temperature: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title: 'Temperature',
    },
    model: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Model',
    },
    deployment: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Deployment',
    },
    deployment_config: {
      anyOf: [
        {
          additionalProperties: {
            type: 'string',
          },
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Deployment Config',
    },
    is_default_deployment: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Default Deployment',
      default: false,
    },
    is_default_model: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Default Model',
      default: false,
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
    },
    tools: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools',
    },
    tools_metadata: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/CreateAgentToolMetadataRequest',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools Metadata',
    },
    is_private: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Private',
    },
    type: {
      anyOf: [
        {
          $ref: '#/components/schemas/AgentType',
        },
        {
          type: 'null',
        },
      ],
    },
  },
  type: 'object',
  title: 'UpdateAgentRequest',
} as const;

export const $UpdateConversationRequest = {
  properties: {
    title: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Title',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    agent_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Agent Id',
    },
  },
  type: 'object',
  title: 'UpdateConversationRequest',
} as const;

export const $UpdateMessage = {
  properties: {
    tool_calls: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ToolCall',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Calls',
    },
    tool_selection: {
      anyOf: [
        {
          $ref: '#/components/schemas/ToolCall',
        },
        {
          type: 'null',
        },
      ],
    },
    tool_plan: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Plan',
    },
    text: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Text',
    },
    documents: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ResponseDocument',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Documents',
    },
    raw_prompt: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Raw Prompt',
    },
    raw_generation: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Raw Generation',
    },
  },
  type: 'object',
  title: 'UpdateMessage',
} as const;

export const $UpdateMessageResponse = {
  properties: {},
  type: 'object',
  title: 'UpdateMessageResponse',
} as const;

export const $UpdateUser = {
  properties: {
    password: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Password',
    },
    hashed_password: {
      anyOf: [
        {
          type: 'string',
          format: 'binary',
        },
        {
          type: 'null',
        },
      ],
      title: 'Hashed Password',
    },
    fullname: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Fullname',
    },
    email: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Email',
    },
    has_completed_onboarding: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Has Completed Onboarding',
    },
    department: {
      anyOf: [
        {
          $ref: '#/components/schemas/UserDepartment',
        },
        {
          type: 'null',
        },
      ],
    },
    locale: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Locale',
    },
  },
  type: 'object',
  title: 'UpdateUser',
} as const;

export const $UploadAgentFileResponse = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    file_name: {
      type: 'string',
      title: 'File Name',
    },
    file_size: {
      type: 'integer',
      minimum: 0,
      title: 'File Size',
      default: 0,
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'file_name'],
  title: 'UploadAgentFileResponse',
} as const;

export const $UploadConversationFileErrorResponse = {
  properties: {
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
    file_name: {
      type: 'string',
      title: 'File Name',
    },
    file_size: {
      type: 'integer',
      minimum: 0,
      title: 'File Size',
      default: 0,
    },
    error: {
      type: 'string',
      title: 'Error',
    },
  },
  type: 'object',
  required: ['conversation_id', 'file_name', 'error'],
  title: 'UploadConversationFileErrorResponse',
} as const;

export const $UploadConversationFileResponse = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
    file_name: {
      type: 'string',
      title: 'File Name',
    },
    file_size: {
      type: 'integer',
      minimum: 0,
      title: 'File Size',
      default: 0,
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'conversation_id', 'file_name'],
  title: 'UploadConversationFileResponse',
} as const;

export const $User = {
  properties: {
    fullname: {
      type: 'string',
      title: 'Fullname',
    },
    locale: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Locale',
      default: 'en',
    },
    nickname: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Nickname',
    },
    given_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Given Name',
    },
    family_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Family Name',
    },
    email: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Email',
    },
    role: {
      type: 'string',
      title: 'Role',
      default: 'user',
    },
    id: {
      type: 'string',
      title: 'Id',
    },
    department: {
      anyOf: [
        {
          $ref: '#/components/schemas/UserDepartment',
        },
        {
          type: 'null',
        },
      ],
    },
    has_completed_onboarding: {
      type: 'boolean',
      title: 'Has Completed Onboarding',
      default: false,
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
  },
  type: 'object',
  required: ['fullname', 'id', 'created_at', 'updated_at'],
  title: 'User',
} as const;

export const $UserDepartment = {
  type: 'string',
  enum: [
    'sales',
    'marketing',
    'human_resources',
    'it_security',
    'general',
    'finance',
    'engineering',
  ],
  title: 'UserDepartment',
} as const;

export const $UserStats = {
  properties: {
    daily_active_users: {
      items: {
        $ref: '#/components/schemas/ActiveUserCount',
      },
      type: 'array',
      title: 'Daily Active Users',
    },
  },
  type: 'object',
  required: ['daily_active_users'],
  title: 'UserStats',
} as const;

export const $ValidationError = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: 'string',
          },
          {
            type: 'integer',
          },
        ],
      },
      type: 'array',
      title: 'Location',
    },
    msg: {
      type: 'string',
      title: 'Message',
    },
    type: {
      type: 'string',
      title: 'Error Type',
    },
  },
  type: 'object',
  required: ['loc', 'msg', 'type'],
  title: 'ValidationError',
} as const;

export const $WorkflowRunStatus = {
  type: 'string',
  enum: ['PENDING', 'RUNNING', 'FAILED', 'COMPLETED'],
  title: 'WorkflowRunStatus',
} as const;

export const $WorkflowTaskStatus = {
  type: 'string',
  enum: ['WAITING', 'RUNNING', 'FAILED', 'COMPLETED', 'CANCELLED'],
  title: 'WorkflowTaskStatus',
} as const;
