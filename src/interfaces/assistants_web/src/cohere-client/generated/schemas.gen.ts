// This file is auto-generated by @hey-api/openapi-ts

export const $AgentPublic = {
  properties: {
    user_id: {
      type: 'string',
      title: 'User ID',
      description: 'User ID for the Agent',
    },
    id: {
      type: 'string',
      title: 'ID',
      description: 'Agent ID',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At Timestamp',
      description: 'When the agent was created',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At Timestamp',
      description: 'When the agent was updated',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the Agent',
    },
    version: {
      type: 'integer',
      title: 'Version',
      description: 'Version of the Agent',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'Agent Description',
    },
    preamble: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Preamble',
      description: 'The preamble for the Agent',
    },
    temperature: {
      type: 'number',
      title: 'Temperature',
      description: 'The temperature for the Agent',
    },
    tools: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools',
      description: 'List of tools for the Agent',
    },
    tools_metadata: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/AgentToolMetadataPublic',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools Metadata',
      description: 'List of tool metadata for the Agent',
    },
    deployment: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Deployment',
      description: 'Deployment for the Agent',
    },
    model: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Model',
      description: 'Model for the Agent',
    },
    is_private: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Private',
      description: 'If the Agent is private',
    },
  },
  type: 'object',
  required: ['user_id', 'id', 'created_at', 'updated_at', 'name', 'version', 'temperature'],
  title: 'AgentPublic',
  description: 'Public agent schema',
} as const;

export const $AgentToolMetadata = {
  properties: {
    id: {
      type: 'string',
      title: 'ID',
      description: 'Agent tool metadata ID',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At Timestamp',
      description: 'When the agent tool metadata was created',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At Timestamp',
      description: 'When the agent tool metadata was updated',
    },
    user_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'User ID',
      description: 'User ID for the agent tool metadata',
    },
    agent_id: {
      type: 'string',
      title: 'Agent ID',
      description: 'Agent ID for the agent tool metadata',
    },
    tool_name: {
      type: 'string',
      title: 'Tool Name',
      description: 'Tool Name for the agent tool metadata',
    },
    artifacts: {
      items: {
        type: 'object',
      },
      type: 'array',
      title: 'Artifacts',
      description: 'Artifacts for the agent tool metadata',
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'agent_id', 'tool_name', 'artifacts'],
  title: 'AgentToolMetadata',
  description: 'Agent tool metadata schema',
} as const;

export const $AgentToolMetadataPublic = {
  properties: {
    id: {
      type: 'string',
      title: 'ID',
      description: 'Agent tool metadata ID',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At Timestamp',
      description: 'When the agent tool metadata was created',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At Timestamp',
      description: 'When the agent tool metadata was updated',
    },
    agent_id: {
      type: 'string',
      title: 'Agent ID',
      description: 'Agent ID for the agent tool metadata',
    },
    tool_name: {
      type: 'string',
      title: 'Tool Name',
      description: 'Tool Name for the agent tool metadata',
    },
    artifacts: {
      items: {
        type: 'object',
      },
      type: 'array',
      title: 'Artifacts',
      description: 'Artifacts for the agent tool metadata',
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'agent_id', 'tool_name', 'artifacts'],
  title: 'AgentToolMetadataPublic',
  description: 'Public agent tool metadata schema',
} as const;

export const $AgentVisibility = {
  type: 'string',
  enum: ['private', 'public', 'all'],
  title: 'AgentVisibility',
  description: 'Supported values for Agent Visibility',
} as const;

export const $Body_batch_upload_file_v1_agents_batch_upload_file_post = {
  properties: {
    files: {
      items: {
        type: 'string',
        format: 'binary',
      },
      type: 'array',
      title: 'Files',
    },
  },
  type: 'object',
  required: ['files'],
  title: 'Body_batch_upload_file_v1_agents_batch_upload_file_post',
} as const;

export const $Body_batch_upload_file_v1_conversations_batch_upload_file_post = {
  properties: {
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
    files: {
      items: {
        type: 'string',
        format: 'binary',
      },
      type: 'array',
      title: 'Files',
    },
  },
  type: 'object',
  required: ['files'],
  title: 'Body_batch_upload_file_v1_conversations_batch_upload_file_post',
} as const;

export const $ChatMessage = {
  properties: {
    role: {
      $ref: '#/components/schemas/ChatRole',
      title: 'Role',
    },
    message: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Message',
      description: 'Contents of the chat message.',
    },
    tool_plan: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Plan',
      description: 'Contents of the tool plan.',
    },
    tool_results: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Results',
      description: 'Results from the tool call.',
    },
    tool_calls: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Calls',
      description: 'List of tool calls generated for custom tools',
    },
  },
  type: 'object',
  required: ['role'],
  title: 'ChatMessage',
  description: `A list of previous messages between the user and the model, meant to give the mode
conversational context for responding to the user's message.`,
} as const;

export const $ChatResponseEvent = {
  properties: {
    event: {
      $ref: '#/components/schemas/StreamEvent',
      title: 'Event',
      description: 'Type of stream event',
    },
    data: {
      anyOf: [
        {
          $ref: '#/components/schemas/StreamStart',
        },
        {
          $ref: '#/components/schemas/StreamTextGeneration',
        },
        {
          $ref: '#/components/schemas/StreamCitationGeneration',
        },
        {
          $ref: '#/components/schemas/StreamQueryGeneration',
        },
        {
          $ref: '#/components/schemas/StreamSearchResults',
        },
        {
          $ref: '#/components/schemas/StreamEnd',
        },
        {
          $ref: '#/components/schemas/StreamToolInput',
        },
        {
          $ref: '#/components/schemas/StreamToolResult',
        },
        {
          $ref: '#/components/schemas/StreamSearchQueriesGeneration',
        },
        {
          $ref: '#/components/schemas/StreamToolCallsGeneration',
        },
        {
          $ref: '#/components/schemas/StreamToolCallsChunk',
        },
        {
          $ref: '#/components/schemas/NonStreamedChatResponse',
        },
      ],
      title: 'Data',
      description: 'Data returned from chat response of a given event type',
    },
  },
  type: 'object',
  required: ['event', 'data'],
  title: 'ChatResponseEvent',
  description: 'Chat Response Event',
} as const;

export const $ChatRole = {
  type: 'string',
  enum: ['CHATBOT', 'USER', 'SYSTEM', 'TOOL'],
  title: 'ChatRole',
  description: 'One of CHATBOT|USER|SYSTEM to identify who the message is coming from.',
} as const;

export const $Citation = {
  properties: {
    text: {
      type: 'string',
      title: 'Text',
      description: 'Citation text',
    },
    start: {
      type: 'integer',
      title: 'Start',
      description: 'Start position for the citation',
    },
    end: {
      type: 'integer',
      title: 'End',
      description: 'End position for the citation',
    },
    document_ids: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Document IDs',
      description: 'Documents used for the citation',
    },
  },
  type: 'object',
  required: ['text', 'start', 'end', 'document_ids'],
  title: 'Citation',
  description: 'Schema for a citation',
} as const;

export const $CohereChatPromptTruncation = {
  type: 'string',
  enum: ['OFF', 'AUTO_PRESERVE_ORDER'],
  title: 'CohereChatPromptTruncation',
  description: 'Dictates how the prompt will be constructed. Defaults to "AUTO_PRESERVE_ORDER".',
} as const;

export const $CohereChatRequest = {
  properties: {
    message: {
      type: 'string',
      title: 'Message',
      description: 'The message to send to the chatbot',
    },
    chat_history: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ChatMessage',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Chat History',
      description:
        'A list of entries used to construct the conversation. If provided, these messages will be used to build the prompt and the conversation_id will be ignored so no data will be stored to maintain state.',
    },
    conversation_id: {
      type: 'string',
      title: 'Conversation ID',
      description:
        'To store a conversation then create a conversation id and use it for every related request',
    },
    tools: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/Tool',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools',
      description: `
            List of custom or managed tools to use for the response.
            If passing in managed tools, you only need to provide the name of the tool.
            If passing in custom tools, you need to provide the name, description, and optionally parameter defintions of the tool.
            Passing a mix of custom and managed tools is not supported.

            Managed Tools Examples:
            tools=[
                {
                    "name": "Wiki Retriever - LangChain",
                },
                {
                    "name": "Calculator",
                }
            ]

            Custom Tools Examples:
            tools=[
                {
                    "name": "movie_title_generator",
                    "description": "tool to generate a cool movie title",
                    "parameter_definitions": {
                        "synopsis": {
                            "description": "short synopsis of the movie",
                            "type": "str",
                            "required": true
                        }
                    }
                },
                {
                    "name": "random_number_generator",
                    "description": "tool to generate a random number between min and max",
                    "parameter_definitions": {
                        "min": {
                            "description": "minimum number",
                            "type": "int",
                            "required": true
                        },
                        "max": {
                            "description": "maximum number",
                            "type": "int",
                            "required": true
                        }
                    }
                },
                {
                    "name": "joke_generator",
                    "description": "tool to generate a random joke",
                }
            ]
        `,
    },
    documents: {
      items: {
        type: 'object',
      },
      type: 'array',
      title: 'Documents',
      description: `Documents to use to generate grounded response with citations. Example:
            documents=[
                {
                    "id": "national_geographic_everest",
                    "title": "Height of Mount Everest",
                    "text": "The height of Mount Everest is 29,035 feet",
                    "url": "https://education.nationalgeographic.org/resource/mount-everest/",
                },
                {
                    "id": "national_geographic_mariana",
                    "title": "Depth of the Mariana Trench",
                    "text": "The depth of the Mariana Trench is 36,070 feet",
                    "url": "https://www.nationalgeographic.org/activity/mariana-trench-deepest-place-earth",
                },
            ]
        `,
    },
    model: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Model',
      description: 'The model to use for generating the response.',
      default: 'command-r-plus',
    },
    temperature: {
      anyOf: [
        {
          type: 'number',
          minimum: 0,
        },
        {
          type: 'null',
        },
      ],
      title: 'Temperature',
      description:
        'A non-negative float that tunes the degree of randomness in generation. Lower temperatures mean less random generations, and higher temperatures mean more random generations.',
    },
    k: {
      anyOf: [
        {
          type: 'integer',
          maximum: 500,
          minimum: 0,
        },
        {
          type: 'null',
        },
      ],
      title: 'Top-K',
      description:
        'Ensures only the top k most likely tokens are considered for generation at each step.',
    },
    p: {
      anyOf: [
        {
          type: 'number',
          maximum: 0.99,
          minimum: 0,
        },
        {
          type: 'null',
        },
      ],
      title: 'Top-P',
      description:
        'Ensures that only the most likely tokens, with total probability mass of p, are considered for generation at each step. If both k and p are enabled, p acts after k.',
    },
    preamble: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Preamble',
      description: 'A string to override the preamble.',
    },
    file_ids: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'File IDs',
      description: 'List of File IDs for PDFs used in RAG for the response.',
    },
    search_queries_only: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Search Queries Only',
      description:
        "When set to true a list of search queries are generated. No search will occur nor replies to the user's message.",
      default: false,
    },
    max_tokens: {
      anyOf: [
        {
          type: 'integer',
          minimum: 1,
        },
        {
          type: 'null',
        },
      ],
      title: 'Max Tokens',
      description:
        'The maximum number of tokens the model will generate as part of the response. Note: Setting a low value may result in incomplete generations.',
    },
    seed: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title: 'Seed',
      description:
        'If specified, the backend will make a best effort to sample tokens deterministically, such that repeated requests with the same seed and parameters should return the same result. However, determinism cannot be totally guaranteed.',
    },
    stop_sequences: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Stop Sequences',
      description:
        'A list of up to 5 strings that the model will use to stop generation. If the model generates a string that matches any of the strings in the list, it will stop generating tokens and return the generated text up to that point not including the stop sequence.',
    },
    presence_penalty: {
      anyOf: [
        {
          type: 'number',
          maximum: 1,
          minimum: 0,
        },
        {
          type: 'null',
        },
      ],
      title: 'Presence Penalty',
      description:
        'Used to reduce repetitiveness of generated tokens. Similar to frequency_penalty, except that this penalty is applied equally to all tokens that have already appeared, regardless of their exact frequencies.',
    },
    frequency_penalty: {
      anyOf: [
        {
          type: 'number',
          maximum: 1,
          minimum: 0,
        },
        {
          type: 'null',
        },
      ],
      title: 'Frequency Penalty',
      description:
        'Used to reduce repetitiveness of generated tokens. The higher the value, the stronger a penalty is applied to previously present tokens, proportional to how many times they have already appeared in the prompt or prior generation.',
    },
    prompt_truncation: {
      anyOf: [
        {
          $ref: '#/components/schemas/CohereChatPromptTruncation',
        },
        {
          type: 'null',
        },
      ],
      title: 'Prompt Truncation',
      description:
        "Dictates how the prompt will be constructed. Defaults to 'AUTO_PRESERVE_ORDER'.",
      default: 'AUTO_PRESERVE_ORDER',
    },
    tool_results: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Results',
      description:
        'A list of results from invoking tools recommended by the model in the previous chat turn. Results are used to produce a text response and will be referenced in citations.',
    },
    force_single_step: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Force Single Step',
      description:
        'If set to true, the model will generate a single response in a single step. This is useful for generating a response to a single message.',
    },
    agent_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Agent ID',
      description: 'The agent ID to use for the chat.',
    },
  },
  type: 'object',
  required: ['message'],
  title: 'CohereChatRequest',
  description: `Request shape for Cohere Python SDK Streamed Chat.
See: https://github.com/cohere-ai/cohere-python/blob/main/src/cohere/base_client.py#L1629`,
} as const;

export const $ConversationFilePublic = {
  properties: {
    id: {
      type: 'string',
      title: 'ID',
      description: 'Unique identifier of the file',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At Timestamp',
      description: 'When file was created',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At Timestamp',
      description: 'When file was updated',
    },
    file_name: {
      type: 'string',
      title: 'File Name',
      description: 'Name of the file',
    },
    file_size: {
      type: 'integer',
      minimum: 0,
      title: 'File Size',
      description: 'Size of the file in bytes',
      default: 0,
    },
    user_id: {
      type: 'string',
      title: 'User ID',
      description: 'Unique identifier for who created the file',
    },
    conversation_id: {
      type: 'string',
      title: 'Conversation ID',
      description: 'Unique identifier for the conversation the file is associated to',
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'file_name', 'user_id', 'conversation_id'],
  title: 'ConversationFilePublic',
  description: 'Schema for a public conversation file',
} as const;

export const $ConversationPublic = {
  properties: {
    id: {
      type: 'string',
      title: 'ID',
      description: 'Unique identifier for the conversation',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At Timestamp',
      description: 'When the conversation was created',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At Timestamp',
      description: 'When the conversation was updated',
    },
    title: {
      type: 'string',
      title: 'Title',
      description: 'Title of the conversation',
    },
    messages: {
      items: {
        $ref: '#/components/schemas/Message',
      },
      type: 'array',
      title: 'Messages',
      description: 'The conversation messages',
    },
    files: {
      items: {
        $ref: '#/components/schemas/ConversationFilePublic',
      },
      type: 'array',
      title: 'Files',
      description: 'List of files for the conversation',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'Description of the conversation',
    },
    agent_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Agent ID',
      description: 'Unique identifier for the agent used in the conversation',
    },
    is_pinned: {
      type: 'boolean',
      title: 'Is Pinned',
      description: 'If conversation is pinned',
    },
    total_file_size: {
      type: 'integer',
      title: 'Total File Size',
      readOnly: true,
    },
  },
  type: 'object',
  required: [
    'id',
    'created_at',
    'updated_at',
    'title',
    'messages',
    'files',
    'is_pinned',
    'total_file_size',
  ],
  title: 'ConversationPublic',
  description: 'A public conversation which removes the User ID and Organization ID',
} as const;

export const $ConversationWithoutMessages = {
  properties: {
    id: {
      type: 'string',
      title: 'ID',
      description: 'Unique identifier for the conversation',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At Timestamp',
      description: 'When the conversation was created',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At Timestamp',
      description: 'When the conversation was updated',
    },
    title: {
      type: 'string',
      title: 'Title',
      description: 'Title of the conversation',
    },
    files: {
      items: {
        $ref: '#/components/schemas/ConversationFilePublic',
      },
      type: 'array',
      title: 'Files',
      description: 'List of files for the conversation',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'Description of the conversation',
    },
    agent_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Agent ID',
      description: 'Unique identifier for the agent used in the conversation',
    },
    is_pinned: {
      type: 'boolean',
      title: 'Is Pinned',
      description: 'If conversation is pinned',
    },
    total_file_size: {
      type: 'integer',
      title: 'Total File Size',
      readOnly: true,
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'title', 'files', 'is_pinned', 'total_file_size'],
  title: 'ConversationWithoutMessages',
  description: 'A public conversation without messages attached',
} as const;

export const $CreateAgentRequest = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the Agent',
    },
    version: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Version',
      description: 'Version of the Agent',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'Agent Description',
    },
    preamble: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Preamble',
      description: 'The preamble for the Agent',
    },
    temperature: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title: 'Temperature',
      description: 'The temperature for the Agent',
    },
    tools: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools',
      description: 'List of tools for the Agent',
    },
    tools_metadata: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/CreateAgentToolMetadataRequest',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools Metadata',
      description: 'Tools metadata for the Agent',
    },
    deployment: {
      type: 'string',
      title: 'Deployment',
      description: 'Deployment for the Agent',
    },
    deployment_config: {
      anyOf: [
        {
          additionalProperties: {
            type: 'string',
          },
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Deployment Config',
      description: 'Deployment config for the Agent',
    },
    model: {
      type: 'string',
      title: 'Model',
      description: 'Model for the Agent',
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization ID',
      description: 'Organization ID for the Agent',
    },
    is_private: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Private',
      description: 'If the Agent is private',
      default: false,
    },
  },
  type: 'object',
  required: ['name', 'deployment', 'model'],
  title: 'CreateAgentRequest',
  description: 'Schema to create an agent',
} as const;

export const $CreateAgentToolMetadataRequest = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'ID',
      description: 'Agent Tool Metadata ID',
    },
    tool_name: {
      type: 'string',
      title: 'Tool Name',
      description: 'Tool Name for the agent tool metadata',
    },
    artifacts: {
      items: {
        type: 'object',
      },
      type: 'array',
      title: 'Artifacts',
      description: 'Artifacts for the agent tool metadata',
    },
  },
  type: 'object',
  required: ['tool_name', 'artifacts'],
  title: 'CreateAgentToolMetadataRequest',
  description: 'Request to create Agent Tool Metadata',
} as const;

export const $CreateGroup = {
  properties: {
    schemas: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Schemas',
      description: 'Schemas for the group',
    },
    members: {
      items: {
        $ref: '#/components/schemas/GroupMember',
      },
      type: 'array',
      title: 'Members',
      description: 'Members of the group',
    },
    displayName: {
      type: 'string',
      title: 'Display Name',
      description: 'Display name for the group',
    },
  },
  type: 'object',
  required: ['schemas', 'members', 'displayName'],
  title: 'CreateGroup',
} as const;

export const $CreateOrganization = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the organization',
    },
  },
  type: 'object',
  required: ['name'],
  title: 'CreateOrganization',
  description: 'Request to create an organization',
} as const;

export const $CreateSnapshotRequest = {
  properties: {
    conversation_id: {
      type: 'string',
      title: 'Conversation ID',
      description: 'Unique identifier for the conversation',
    },
  },
  type: 'object',
  required: ['conversation_id'],
  title: 'CreateSnapshotRequest',
  description: 'Request to create a snapshot',
} as const;

export const $CreateSnapshotResponse = {
  properties: {
    snapshot_id: {
      type: 'string',
      title: 'Snapshot ID',
      description: 'Unique identifier for the snapshot',
    },
    link_id: {
      type: 'string',
      title: 'Link ID',
      description: 'Unique identifier for the link',
    },
    messages: {
      items: {
        $ref: '#/components/schemas/Message',
      },
      type: 'array',
      title: 'Messages',
      description: 'List of messages',
    },
  },
  type: 'object',
  required: ['snapshot_id', 'link_id', 'messages'],
  title: 'CreateSnapshotResponse',
  description: 'Response for creating a snapshot',
} as const;

export const $DeleteAgent = {
  properties: {},
  type: 'object',
  title: 'DeleteAgent',
  description: 'Response for deleting an agent',
} as const;

export const $DeleteAgentFileResponse = {
  properties: {},
  type: 'object',
  title: 'DeleteAgentFileResponse',
  description: 'Response for deleting an agent file',
} as const;

export const $DeleteAgentToolMetadata = {
  properties: {},
  type: 'object',
  title: 'DeleteAgentToolMetadata',
  description: 'Delete agent tool metadata response',
} as const;

export const $DeleteConversationFileResponse = {
  properties: {},
  type: 'object',
  title: 'DeleteConversationFileResponse',
  description: 'Response for deleting a conversation file',
} as const;

export const $DeleteConversationResponse = {
  properties: {},
  type: 'object',
  title: 'DeleteConversationResponse',
  description: 'Response for deleting a conversation',
} as const;

export const $DeleteDeployment = {
  properties: {},
  type: 'object',
  title: 'DeleteDeployment',
  description: 'Delete Deployment Response',
} as const;

export const $DeleteModel = {
  properties: {},
  type: 'object',
  title: 'DeleteModel',
  description: 'Response for deleting a model',
} as const;

export const $DeleteOrganization = {
  properties: {},
  type: 'object',
  title: 'DeleteOrganization',
  description: 'Response when deleting organization',
} as const;

export const $DeleteSnapshotLinkResponse = {
  properties: {},
  type: 'object',
  title: 'DeleteSnapshotLinkResponse',
  description: 'Response for deleting a snapshot link',
} as const;

export const $DeleteSnapshotResponse = {
  properties: {},
  type: 'object',
  title: 'DeleteSnapshotResponse',
  description: 'Response for deleting a snapshot',
} as const;

export const $DeleteToolAuth = {
  properties: {},
  type: 'object',
  title: 'DeleteToolAuth',
  description: 'Response when deleting a tool auth',
} as const;

export const $DeleteUser = {
  properties: {},
  type: 'object',
  title: 'DeleteUser',
  description: 'Response when deleting a user',
} as const;

export const $Deployment = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'ID',
      description: 'Unique Identifier for the Deployment',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the Deployment',
    },
    models: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Models',
      description: 'List of models for the deployment',
    },
    is_available: {
      type: 'boolean',
      title: 'Is Available',
      description: 'Is deployment is available',
      default: false,
    },
    env_vars: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Env Vars',
      description: 'Environment Variables for the Deployment',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'Description of the deployment',
    },
    is_community: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Community',
      description: 'Is the deployment from the commmunity',
      default: false,
    },
  },
  type: 'object',
  required: ['name', 'models'],
  title: 'Deployment',
  description: 'Deployment Schema',
} as const;

export const $DeploymentCreate = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'ID',
      description: 'Unique Identifier for the Deployment',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the Deployment',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'Description of the deployment',
    },
    deployment_class_name: {
      type: 'string',
      title: 'Deployment Class Name',
      description: 'Deployment Class Name',
    },
    is_community: {
      type: 'boolean',
      title: 'Is Community',
      description: 'Is the deployment from the commmunity',
      default: false,
    },
    default_deployment_config: {
      additionalProperties: {
        type: 'string',
      },
      type: 'object',
      title: 'Default Deployment Config',
      description: 'The default deployment configuration',
    },
  },
  type: 'object',
  required: ['name', 'deployment_class_name', 'default_deployment_config'],
  title: 'DeploymentCreate',
  description: 'Deployment Create Schema',
} as const;

export const $DeploymentDefinition = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    config: {
      additionalProperties: {
        type: 'string',
      },
      type: 'object',
      title: 'Config',
      default: {},
    },
    is_available: {
      type: 'boolean',
      title: 'Is Available',
      default: false,
    },
    is_community: {
      type: 'boolean',
      title: 'Is Community',
      default: false,
    },
    models: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Models',
    },
    class_name: {
      type: 'string',
      title: 'Class Name',
    },
  },
  type: 'object',
  required: ['id', 'name', 'models', 'class_name'],
  title: 'DeploymentDefinition',
} as const;

export const $DeploymentUpdate = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      description: 'Name of the Deployment',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'Description of the deployment',
    },
    deployment_class_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Deployment Class Name',
      description: 'Deployment Class Name',
    },
    is_community: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Community',
      description: 'Is the deployment from the commmunity',
    },
    default_deployment_config: {
      anyOf: [
        {
          additionalProperties: {
            type: 'string',
          },
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Default Deployment Config',
      description: 'The default deployment configuration',
    },
  },
  type: 'object',
  title: 'DeploymentUpdate',
  description: 'Deployment Update Schema',
} as const;

export const $Document = {
  properties: {
    text: {
      type: 'string',
      title: 'Text',
      description: 'Document text',
    },
    document_id: {
      type: 'string',
      title: 'Document_Id',
      description: 'Unique Identifier for the document',
    },
    title: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Title',
      description: 'Document title',
    },
    url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'URL',
      description: 'Document URL',
    },
    fields: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Fields',
      description: 'Document Fields',
    },
    tool_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Name',
      description: 'Tool name for the document',
    },
  },
  type: 'object',
  required: ['text', 'document_id'],
  title: 'Document',
  description: 'Schema for a Document',
} as const;

export const $Email = {
  properties: {
    primary: {
      type: 'boolean',
      title: 'Primary',
      description: 'Is email the primary email',
    },
    value: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Value',
      description: 'Email value',
    },
    type: {
      type: 'string',
      title: 'Type',
      description: 'Type of email',
    },
  },
  type: 'object',
  required: ['primary', 'type'],
  title: 'Email',
} as const;

export const $FileMetadata = {
  properties: {
    id: {
      type: 'string',
      title: 'ID',
      description: 'Unique identifier of the file',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At Timestamp',
      description: 'When file was created',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At Timestamp',
      description: 'When file was updated',
    },
    file_name: {
      type: 'string',
      title: 'File Name',
      description: 'Name of the file',
    },
    file_size: {
      type: 'integer',
      minimum: 0,
      title: 'File Size',
      description: 'Size of the file in bytes',
      default: 0,
    },
    file_content: {
      type: 'string',
      title: 'File Content',
      description: 'The contents of the file',
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'file_name', 'file_content'],
  title: 'FileMetadata',
  description: 'Schema for file metadata',
} as const;

export const $GenerateTitleResponse = {
  properties: {
    title: {
      type: 'string',
      title: 'Title',
      description: 'Title generated for the conversation',
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error',
      description: 'Error message if the response is an error',
    },
  },
  type: 'object',
  required: ['title'],
  title: 'GenerateTitleResponse',
  description: 'Response for generating a title',
} as const;

export const $Group = {
  properties: {
    schemas: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Schemas',
      description: 'Schemas for the group',
    },
    members: {
      items: {
        $ref: '#/components/schemas/GroupMember',
      },
      type: 'array',
      title: 'Members',
      description: 'Members of the group',
    },
    displayName: {
      type: 'string',
      title: 'Display Name',
      description: 'Display name for the group',
    },
    id: {
      type: 'string',
      title: 'ID',
      description: 'Unique identifier for the group',
    },
    meta: {
      $ref: '#/components/schemas/Meta',
      description: 'Metadata for the group',
    },
  },
  type: 'object',
  required: ['schemas', 'members', 'displayName', 'id', 'meta'],
  title: 'Group',
} as const;

export const $GroupMember = {
  properties: {
    value: {
      type: 'string',
      title: 'Value',
      description: 'Value',
    },
    display: {
      type: 'string',
      title: 'Display',
      description: 'Display',
    },
  },
  type: 'object',
  required: ['value', 'display'],
  title: 'GroupMember',
} as const;

export const $GroupOperation = {
  properties: {
    op: {
      type: 'string',
      title: 'Op',
      description: 'Op',
    },
    path: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Path',
      description: 'Path',
    },
    value: {
      anyOf: [
        {
          additionalProperties: {
            type: 'string',
          },
          type: 'object',
        },
        {
          items: {
            additionalProperties: {
              type: 'string',
            },
            type: 'object',
          },
          type: 'array',
        },
      ],
      title: 'Value',
      description: 'Value',
    },
  },
  type: 'object',
  required: ['op', 'value'],
  title: 'GroupOperation',
} as const;

export const $HTTPValidationError = {
  properties: {
    detail: {
      items: {
        $ref: '#/components/schemas/ValidationError',
      },
      type: 'array',
      title: 'Detail',
    },
  },
  type: 'object',
  title: 'HTTPValidationError',
} as const;

export const $JWTResponse = {
  properties: {
    token: {
      type: 'string',
      title: 'Token',
      description: 'JSON Web Token',
    },
  },
  type: 'object',
  required: ['token'],
  title: 'JWTResponse',
  description: 'JWT Response',
} as const;

export const $ListAuthStrategy = {
  properties: {
    strategy: {
      type: 'string',
      title: 'Strategy',
      description: 'Auth strategy name',
    },
    client_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Client ID',
      description: 'Client ID to be used',
    },
    authorization_endpoint: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Authorization Endpoint',
      description: 'The endpoint for authorization',
    },
    pkce_enabled: {
      type: 'boolean',
      title: 'PKCE Enabled',
      description: 'If PKCE is enabled',
    },
  },
  type: 'object',
  required: ['strategy', 'pkce_enabled'],
  title: 'ListAuthStrategy',
  description: 'List Auth Strategy',
} as const;

export const $ListConversationFile = {
  properties: {
    id: {
      type: 'string',
      title: 'ID',
      description: 'Unique identifier of the file',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At Timestamp',
      description: 'When file was created',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At Timestamp',
      description: 'When file was updated',
    },
    file_name: {
      type: 'string',
      title: 'File Name',
      description: 'Name of the file',
    },
    file_size: {
      type: 'integer',
      minimum: 0,
      title: 'File Size',
      description: 'Size of the file in bytes',
      default: 0,
    },
    user_id: {
      type: 'string',
      title: 'User ID',
      description: 'Unique identifier for who created the file',
    },
    conversation_id: {
      type: 'string',
      title: 'Conversation ID',
      description: 'Unique identifier for the conversation the file is associated to',
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'file_name', 'user_id', 'conversation_id'],
  title: 'ListConversationFile',
  description: 'Listing conversation files',
} as const;

export const $ListGroupResponse = {
  properties: {
    totalResults: {
      type: 'integer',
      title: 'Total Results',
      description: 'Total results available',
    },
    startIndex: {
      type: 'integer',
      title: 'Start Index',
      description: 'Start index for returned results',
    },
    itemsPerPage: {
      type: 'integer',
      title: 'Items Per Page',
      description: 'Total results returned in the request',
    },
    Resources: {
      items: {
        $ref: '#/components/schemas/Group',
      },
      type: 'array',
      title: 'Resources',
      description: 'List of Groups',
    },
  },
  type: 'object',
  required: ['totalResults', 'startIndex', 'itemsPerPage', 'Resources'],
  title: 'ListGroupResponse',
} as const;

export const $ListUserResponse = {
  properties: {
    totalResults: {
      type: 'integer',
      title: 'Total Results',
      description: 'Total results available',
    },
    startIndex: {
      type: 'integer',
      title: 'Start Index',
      description: 'Start index for returned results',
    },
    itemsPerPage: {
      type: 'integer',
      title: 'Items Per Page',
      description: 'Total results returned in the request',
    },
    Resources: {
      items: {
        $ref: '#/components/schemas/backend__schemas__scim__User',
      },
      type: 'array',
      title: 'Resources',
      description: 'List of Users',
    },
  },
  type: 'object',
  required: ['totalResults', 'startIndex', 'itemsPerPage', 'Resources'],
  title: 'ListUserResponse',
} as const;

export const $Login = {
  properties: {
    strategy: {
      type: 'string',
      title: 'Strategy',
      description: 'Auth strategy to use',
    },
    payload: {
      anyOf: [
        {
          additionalProperties: {
            type: 'string',
          },
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Payload',
      description: 'Login payload depending on strategy used',
    },
  },
  type: 'object',
  required: ['strategy'],
  title: 'Login',
  description: 'Login Request',
} as const;

export const $Logout = {
  properties: {},
  type: 'object',
  title: 'Logout',
  description: 'Logout Request',
} as const;

export const $Message = {
  properties: {
    text: {
      type: 'string',
      title: 'Text',
      description: 'The text content of the message',
    },
    id: {
      type: 'string',
      title: 'ID',
      description: 'Unique identifier of the message',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At Timestamp',
      description: 'When message was created',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At Timestamp',
      description: 'When message was updated',
    },
    generation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Generation ID',
      description: 'Generation ID for the message',
    },
    position: {
      type: 'integer',
      title: 'Position',
      description: 'Position in the conversation',
    },
    is_active: {
      type: 'boolean',
      title: 'Is Active',
      description: 'Is the message active',
    },
    documents: {
      items: {
        $ref: '#/components/schemas/Document',
      },
      type: 'array',
      title: 'Documents',
      description: 'Documents associated with the message',
    },
    citations: {
      items: {
        $ref: '#/components/schemas/Citation',
      },
      type: 'array',
      title: 'Citations',
      description: 'Citations associated with the message',
    },
    files: {
      items: {
        $ref: '#/components/schemas/ConversationFilePublic',
      },
      type: 'array',
      title: 'Files',
      description: 'Files associated with the message',
    },
    tool_calls: {
      items: {
        $ref: '#/components/schemas/ToolCall',
      },
      type: 'array',
      title: 'Tool Calls',
      description: 'Tool calls associated with the message',
    },
    tool_plan: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Plan',
      description: 'Tool plan associated with the message',
    },
    agent: {
      $ref: '#/components/schemas/MessageAgent',
      title: 'Agent',
      description: 'Agent associated with the message',
    },
  },
  type: 'object',
  required: [
    'text',
    'id',
    'created_at',
    'updated_at',
    'position',
    'is_active',
    'documents',
    'citations',
    'files',
    'tool_calls',
    'agent',
  ],
  title: 'Message',
  description: 'Message Schema',
} as const;

export const $MessageAgent = {
  type: 'string',
  enum: ['USER', 'CHATBOT'],
  title: 'MessageAgent',
} as const;

export const $Meta = {
  properties: {
    resourceType: {
      type: 'string',
      title: 'Resource Type',
      description: 'Type of resource the metadata is for',
    },
    created: {
      type: 'string',
      title: 'Created',
      description: 'When metadata was created',
    },
    lastModified: {
      type: 'string',
      title: 'Last Modified',
      description: 'When metadata was last modified',
    },
  },
  type: 'object',
  required: ['resourceType', 'created', 'lastModified'],
  title: 'Meta',
  description: 'Schema for metadata',
} as const;

export const $Model = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
      description: 'Model name',
    },
    cohere_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Cohere Name',
      description: 'Cohere model name',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'Model description',
    },
    id: {
      type: 'string',
      title: 'ID',
      description: 'Unique identifier for the model',
    },
    deployment_id: {
      type: 'string',
      title: 'Deployment ID',
      description: 'Unique identifier for the deployment',
    },
  },
  type: 'object',
  required: ['name', 'id', 'deployment_id'],
  title: 'Model',
} as const;

export const $ModelCreate = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
      description: 'Model name',
    },
    cohere_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Cohere Name',
      description: 'Cohere model name',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'Model description',
    },
    deployment_id: {
      type: 'string',
      title: 'Deployment ID',
      description: 'Unique identifier for the deployment',
    },
  },
  type: 'object',
  required: ['name', 'deployment_id'],
  title: 'ModelCreate',
} as const;

export const $ModelUpdate = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      description: 'Model name',
    },
    cohere_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Cohere Name',
      description: 'Cohere model name',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'Model description',
    },
    deployment_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Deployment ID',
      description: 'Unique identifier for the deployment',
    },
  },
  type: 'object',
  title: 'ModelUpdate',
} as const;

export const $Name = {
  properties: {
    givenName: {
      type: 'string',
      title: 'Given Name',
      description: "User's given name",
    },
    familyName: {
      type: 'string',
      title: 'Family Name',
      description: "User's family name",
    },
  },
  type: 'object',
  required: ['givenName', 'familyName'],
  title: 'Name',
} as const;

export const $NonStreamedChatResponse = {
  properties: {
    response_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Response ID',
      description: 'Unique identifier for the response',
    },
    generation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Generation ID',
      description: 'Unique identifier for the generation',
    },
    chat_history: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ChatMessage',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Chat History',
      description:
        "A list of previous messages between the user and the model, meant to give the model conversational context for responding to the user's message.",
    },
    finish_reason: {
      type: 'string',
      title: 'Finish Reason',
      description: 'Reason the chat stream ended',
    },
    text: {
      type: 'string',
      title: 'Text',
      description: 'Contents of the chat message',
    },
    citations: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/Citation',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Citations',
      description: 'Citations for the chat message',
      default: [],
    },
    documents: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/Document',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Documents',
      description: 'Documents used to generate grounded response with citations',
      default: [],
    },
    search_results: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Search Results',
      description: 'Search results used to generate grounded response with citations',
      default: [],
    },
    search_queries: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/SearchQuery',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Search Queries',
      description: 'List of generated search queries.',
      default: [],
    },
    conversation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Conversation ID',
      description:
        'To store a conversation then create a conversation id and use it for every related request',
    },
    tool_calls: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ToolCall',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Calls',
      description: 'List of tool calls generated for custom tools',
      default: [],
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error',
      description: 'Error message if the response is an error',
    },
  },
  type: 'object',
  required: ['finish_reason', 'text'],
  title: 'NonStreamedChatResponse',
  description: 'Non streamed chat response',
} as const;

export const $Operation = {
  properties: {
    op: {
      type: 'string',
      title: 'Op',
      description: 'Op',
    },
    value: {
      additionalProperties: {
        type: 'boolean',
      },
      type: 'object',
      title: 'Value',
      description: 'Value',
    },
  },
  type: 'object',
  required: ['op', 'value'],
  title: 'Operation',
} as const;

export const $Organization = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the organization',
    },
    id: {
      type: 'string',
      title: 'ID',
      description: 'Unique identifier of the organization',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At Timestamp',
      description: 'When organization was created',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At Timestamp',
      description: 'When organization was updated',
    },
  },
  type: 'object',
  required: ['name', 'id', 'created_at', 'updated_at'],
  title: 'Organization',
  description: 'Schema for an organization',
} as const;

export const $PatchGroup = {
  properties: {
    schemas: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Schemas',
      description: 'Schemas for group',
    },
    operations: {
      items: {
        $ref: '#/components/schemas/GroupOperation',
      },
      type: 'array',
      title: 'Operations',
      description: 'Operations for the group',
    },
  },
  type: 'object',
  required: ['schemas', 'operations'],
  title: 'PatchGroup',
} as const;

export const $PatchUser = {
  properties: {
    schemas: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Schemas',
      description: 'Schemas for user',
    },
    operations: {
      items: {
        $ref: '#/components/schemas/Operation',
      },
      type: 'array',
      title: 'Operations',
      description: 'Operations for the user',
    },
  },
  type: 'object',
  required: ['schemas', 'operations'],
  title: 'PatchUser',
} as const;

export const $SearchQuery = {
  properties: {
    text: {
      type: 'string',
      title: 'Text',
      description: 'Text for the search',
    },
    generation_id: {
      type: 'string',
      title: 'Generation ID',
      description: 'Unique identifier for the generation',
    },
  },
  type: 'object',
  required: ['text', 'generation_id'],
  title: 'SearchQuery',
  description: 'Schema for search query',
} as const;

export const $SnapshotData = {
  properties: {
    title: {
      type: 'string',
      title: 'Title',
      description: 'Title of the snapshot',
    },
    description: {
      type: 'string',
      title: 'Description',
      description: 'Description of the snapshot',
    },
    messages: {
      items: {
        $ref: '#/components/schemas/Message',
      },
      type: 'array',
      title: 'Messages',
      description: 'List of messages',
    },
  },
  type: 'object',
  required: ['title', 'description', 'messages'],
  title: 'SnapshotData',
  description: 'Snapshot data',
} as const;

export const $SnapshotPublic = {
  properties: {
    conversation_id: {
      type: 'string',
      title: 'Conversation ID',
      description: 'Unique identifier for the conversation',
    },
    id: {
      type: 'string',
      title: 'ID',
      description: 'Unique identifier for the snapshot',
    },
    last_message_id: {
      type: 'string',
      title: 'Last Message ID',
      description: 'Unique identifier for the last message',
    },
    version: {
      type: 'integer',
      title: 'Version',
      description: 'Snapshot version',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At Timestamp',
      description: 'When snapshot was creted',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At Timestamp',
      description: 'When snapshot was updated',
    },
    snapshot: {
      $ref: '#/components/schemas/SnapshotData',
      title: 'Snapshot Data',
      description: 'Data for the snapshot',
    },
  },
  type: 'object',
  required: [
    'conversation_id',
    'id',
    'last_message_id',
    'version',
    'created_at',
    'updated_at',
    'snapshot',
  ],
  title: 'SnapshotPublic',
  description: 'Public snapshot',
} as const;

export const $SnapshotWithLinks = {
  properties: {
    conversation_id: {
      type: 'string',
      title: 'Conversation ID',
      description: 'Unique identifier for the conversation',
    },
    id: {
      type: 'string',
      title: 'ID',
      description: 'Unique identifier for the snapshot',
    },
    last_message_id: {
      type: 'string',
      title: 'Last Message ID',
      description: 'Unique identifier for the last message',
    },
    version: {
      type: 'integer',
      title: 'Version',
      description: 'Snapshot version',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At Timestamp',
      description: 'When snapshot was creted',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At Timestamp',
      description: 'When snapshot was updated',
    },
    snapshot: {
      $ref: '#/components/schemas/SnapshotData',
      title: 'Snapshot Data',
      description: 'Data for the snapshot',
    },
    links: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Links',
      description: 'List of links',
    },
  },
  type: 'object',
  required: [
    'conversation_id',
    'id',
    'last_message_id',
    'version',
    'created_at',
    'updated_at',
    'snapshot',
    'links',
  ],
  title: 'SnapshotWithLinks',
  description: 'Snapshot with links',
} as const;

export const $StreamCitationGeneration = {
  properties: {
    citations: {
      items: {
        $ref: '#/components/schemas/Citation',
      },
      type: 'array',
      title: 'Citations',
      description: 'Citations for the chat message',
      default: [],
    },
  },
  type: 'object',
  title: 'StreamCitationGeneration',
  description: 'Stream citation generation event',
} as const;

export const $StreamEnd = {
  properties: {
    message_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Message ID',
      description: 'Unique identifier for the message',
    },
    response_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Response ID',
      description: 'Unique identifier for the response',
    },
    generation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Generation ID',
      description: 'Unique identifier for the generation',
    },
    conversation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Conversation ID',
      description: 'Unique identifier for the conversation',
    },
    text: {
      type: 'string',
      title: 'Text',
      description: 'Contents of the chat message',
    },
    citations: {
      items: {
        $ref: '#/components/schemas/Citation',
      },
      type: 'array',
      title: 'Citations',
      description: 'Citations for the chat messae.',
      default: [],
    },
    documents: {
      items: {
        $ref: '#/components/schemas/Document',
      },
      type: 'array',
      title: 'Documents',
      description: 'Documents used to generate grounded response with citations',
      default: [],
    },
    search_results: {
      items: {
        type: 'object',
      },
      type: 'array',
      title: 'Search Results',
      description: 'Search results used to generate grounded response with citations',
      default: [],
    },
    search_queries: {
      items: {
        $ref: '#/components/schemas/SearchQuery',
      },
      type: 'array',
      title: 'Search Queries',
      description: 'List of generated search queries',
      default: [],
    },
    tool_calls: {
      items: {
        $ref: '#/components/schemas/ToolCall',
      },
      type: 'array',
      title: 'Tool Calls',
      description: 'List of tool calls generated for custom tools',
      default: [],
    },
    finish_reason: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Finish Reason',
      description: 'Reson why the model finished the request',
    },
    chat_history: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ChatMessage',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Chat History',
      description:
        'A list of entries used to construct the conversation. If provided, these messages will be used to build the prompt and the conversation_id will be ignored so no data will be stored to maintain state.',
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error',
      description: 'Error message if the response is an error',
    },
  },
  type: 'object',
  required: ['text'],
  title: 'StreamEnd',
  description: 'Stream end generation event',
} as const;

export const $StreamEvent = {
  type: 'string',
  enum: [
    'stream-start',
    'search-queries-generation',
    'search-results',
    'tool-input',
    'tool-result',
    'text-generation',
    'citation-generation',
    'stream-end',
    'non-streamed-chat-response',
    'tool-calls-generation',
    'tool-calls-chunk',
  ],
  title: 'StreamEvent',
  description: "Stream Events returned by Cohere's chat stream response.",
} as const;

export const $StreamQueryGeneration = {
  properties: {
    query: {
      type: 'string',
      title: 'Query',
      description: 'Search query used to generate grounded response with citations',
    },
  },
  type: 'object',
  required: ['query'],
  title: 'StreamQueryGeneration',
  description: 'Stream query generation event',
} as const;

export const $StreamSearchQueriesGeneration = {
  properties: {
    search_queries: {
      items: {
        $ref: '#/components/schemas/SearchQuery',
      },
      type: 'array',
      title: 'Search Queries',
      description: 'Search query used to generate grounded response with citations',
      default: [],
    },
  },
  type: 'object',
  title: 'StreamSearchQueriesGeneration',
  description: 'Stream queries generation event',
} as const;

export const $StreamSearchResults = {
  properties: {
    search_results: {
      items: {
        type: 'object',
      },
      type: 'array',
      title: 'Search Results',
      description: 'Search results used to generate grounded response with citations',
      default: [],
    },
    documents: {
      items: {
        $ref: '#/components/schemas/Document',
      },
      type: 'array',
      title: 'Documents',
      description: 'Documents used to generate grounded response with citations',
      default: [],
    },
  },
  type: 'object',
  title: 'StreamSearchResults',
  description: 'Stream search generation event',
} as const;

export const $StreamStart = {
  properties: {
    generation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Generation ID',
      description: 'Generation ID for the event',
    },
    conversation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Conversation ID',
      description: 'Conversation ID for the event',
    },
  },
  type: 'object',
  title: 'StreamStart',
  description: 'Stream start event',
} as const;

export const $StreamTextGeneration = {
  properties: {
    text: {
      type: 'string',
      title: 'Text',
      description: 'Contents of the chat message',
    },
  },
  type: 'object',
  required: ['text'],
  title: 'StreamTextGeneration',
  description: 'Stream text generation event',
} as const;

export const $StreamToolCallsChunk = {
  properties: {
    tool_call_delta: {
      anyOf: [
        {
          $ref: '#/components/schemas/ToolCallDelta',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Call Delta',
      description: 'Partial tool call',
      default: {},
    },
    text: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Text',
      description: 'Contents of the chat message',
    },
  },
  type: 'object',
  title: 'StreamToolCallsChunk',
  description: 'Stream tool call chunk generated event',
} as const;

export const $StreamToolCallsGeneration = {
  properties: {
    stream_search_results: {
      anyOf: [
        {
          $ref: '#/components/schemas/StreamSearchResults',
        },
        {
          type: 'null',
        },
      ],
      title: 'Stream Search Results',
      description: 'Search results used to generate grounded response with citations',
    },
    tool_calls: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ToolCall',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Calls',
      description: 'List of tool calls generated for custom tools',
      default: [],
    },
    text: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Text',
      description: 'Contents of the chat message',
    },
  },
  type: 'object',
  title: 'StreamToolCallsGeneration',
  description: 'Stream tool calls generation event',
} as const;

export const $StreamToolInput = {
  properties: {
    input_type: {
      $ref: '#/components/schemas/ToolInputType',
      title: 'Input Type',
      description: 'Tool input type',
    },
    tool_name: {
      type: 'string',
      title: 'Tool Name',
      description: 'Name of the tool to be used',
    },
    input: {
      type: 'string',
      title: 'Input',
      description: 'Tool input',
    },
    text: {
      type: 'string',
      title: 'Text',
      description: 'Contents of the chat message',
    },
  },
  type: 'object',
  required: ['input_type', 'tool_name', 'input', 'text'],
  title: 'StreamToolInput',
  description: 'Stream tool input generation event',
} as const;

export const $StreamToolResult = {
  properties: {
    result: {
      title: 'Result',
      description: 'Result from the tool',
    },
    tool_name: {
      type: 'string',
      title: 'Tool Name',
      description: 'Name of tool that generated the result',
    },
    documents: {
      items: {
        $ref: '#/components/schemas/Document',
      },
      type: 'array',
      title: 'Documents',
      description: 'Documents used to generate grounded response with citations',
      default: [],
    },
  },
  type: 'object',
  required: ['result', 'tool_name'],
  title: 'StreamToolResult',
  description: 'Stream tool result generation event',
} as const;

export const $ToggleConversationPinRequest = {
  properties: {
    is_pinned: {
      type: 'boolean',
      title: 'Is Pinned',
      description: 'If conversation is pinned',
    },
  },
  type: 'object',
  required: ['is_pinned'],
  title: 'ToggleConversationPinRequest',
  description: 'Request to toggle pinning a conversation',
} as const;

export const $Tool = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      description: 'Name of the Tool',
      default: '',
    },
    parameter_definitions: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Parameter Definitions',
      description: 'Parameters definitions for the tool',
      default: {},
    },
  },
  type: 'object',
  title: 'Tool',
  description: 'Tool Schema',
} as const;

export const $ToolCall = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
      description: 'Name of the Tool',
    },
    parameters: {
      type: 'object',
      title: 'Parameters',
      description: 'Parameters for the tool call',
      default: {},
    },
  },
  type: 'object',
  required: ['name'],
  title: 'ToolCall',
  description: 'Schema for Tool Call',
} as const;

export const $ToolCallDelta = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      description: 'Name of the Tool',
    },
    index: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Index',
      description: 'Index',
    },
    parameters: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Parameters',
      description: 'Parameters for the tool call',
    },
  },
  type: 'object',
  title: 'ToolCallDelta',
  description: 'Schema for Tool Call Delta',
} as const;

export const $ToolCategory = {
  type: 'string',
  enum: ['Data loader', 'File loader', 'Function', 'Web search'],
  title: 'ToolCategory',
  description: 'Supported Tool Categories',
} as const;

export const $ToolDefinition = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      description: 'Name of the Tool',
      default: '',
    },
    parameter_definitions: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Parameter Definitions',
      description: 'Parameters definitions for the tool',
      default: {},
    },
    display_name: {
      type: 'string',
      title: 'Display Name',
      description: 'Display name for the tool',
      default: '',
    },
    description: {
      type: 'string',
      title: 'Description',
      description: 'Description of the tool',
      default: '',
    },
    error_message: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error Message',
      description: 'Error message',
      default: '',
    },
    kwargs: {
      type: 'object',
      title: 'kwargs',
      description: 'kwags for the tool',
      default: {},
    },
    is_visible: {
      type: 'boolean',
      title: 'Is Visible',
      description: 'Is the tool visible',
      default: false,
    },
    is_available: {
      type: 'boolean',
      title: 'Is Available',
      description: 'Is the tool available',
      default: false,
    },
    category: {
      $ref: '#/components/schemas/ToolCategory',
      title: 'Category',
      description: 'Tool category',
      default: 'Data loader',
    },
    is_auth_required: {
      type: 'boolean',
      title: 'Is Auth Required',
      description: 'Is auth required for the tool',
      default: false,
    },
    auth_url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Auth Url',
      description: 'Auth url for the tool',
      default: '',
    },
    token: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Token',
      description: 'Token for the tool',
      default: '',
    },
    should_return_token: {
      type: 'boolean',
      title: 'Should Return Token',
      description: 'If the tool returns a token',
      default: false,
    },
  },
  type: 'object',
  title: 'ToolDefinition',
  description: 'Tool Definition Schema',
} as const;

export const $ToolInputType = {
  type: 'string',
  enum: ['QUERY', 'CODE'],
  title: 'ToolInputType',
  description: 'Type of input passed to the tool',
} as const;

export const $UpdateAgentRequest = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      description: 'Name of the Agent',
    },
    version: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Version',
      description: 'Version of the Agent',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'Agent Description',
    },
    preamble: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Preamble',
      description: 'The preamble for the Agent',
    },
    temperature: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title: 'Temperature',
      description: 'The temperature for the Agent',
    },
    tools: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools',
      description: 'List of tools for the Agent',
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization ID',
      description: 'Organization ID for the Agent',
    },
    is_private: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Private',
      description: 'If the Agent is private',
    },
    deployment: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Deployment',
      description: 'Deployment for the Agent',
    },
    model: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Model',
      description: 'Model for the Agent',
    },
    tools_metadata: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/CreateAgentToolMetadataRequest',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools Metadata',
      description: 'Tools metadata for the Agent',
    },
  },
  type: 'object',
  title: 'UpdateAgentRequest',
  description: 'Schema to update an agent',
} as const;

export const $UpdateAgentToolMetadataRequest = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'ID',
      description: 'Agent Tool Metadata ID',
    },
    tool_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Name',
      description: 'Tool Name for the agent tool metadata',
    },
    artifacts: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Artifacts',
      description: 'Artifacts for the agent tool metadata',
    },
  },
  type: 'object',
  title: 'UpdateAgentToolMetadataRequest',
  description: 'Request to update Agent Tool Metadata',
} as const;

export const $UpdateConversationRequest = {
  properties: {
    title: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Title',
      description: 'Title of the conversation',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'Description of the conversation',
    },
  },
  type: 'object',
  title: 'UpdateConversationRequest',
  description: 'Request to update a conversation',
} as const;

export const $UpdateDeploymentEnv = {
  properties: {
    env_vars: {
      additionalProperties: {
        type: 'string',
      },
      type: 'object',
      title: 'Env Vars',
      description: 'Environment Variables for the Deployment',
    },
  },
  type: 'object',
  required: ['env_vars'],
  title: 'UpdateDeploymentEnv',
  description: 'Request to update Deployment Environment Variables',
} as const;

export const $UpdateOrganization = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      description: 'Name of the organization',
    },
  },
  type: 'object',
  title: 'UpdateOrganization',
  description: 'Request to update an organization',
} as const;

export const $UploadAgentFileResponse = {
  properties: {
    id: {
      type: 'string',
      title: 'ID',
      description: 'Unique identifier of the file',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At Timestamp',
      description: 'When file was created',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At Timestamp',
      description: 'When file was updated',
    },
    file_name: {
      type: 'string',
      title: 'File Name',
      description: 'Name of the file',
    },
    file_size: {
      type: 'integer',
      minimum: 0,
      title: 'File Size',
      description: 'Size of the file in bytes',
      default: 0,
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'file_name'],
  title: 'UploadAgentFileResponse',
  description: 'Reponse for uploading an agent file',
} as const;

export const $UploadConversationFileResponse = {
  properties: {
    id: {
      type: 'string',
      title: 'ID',
      description: 'Unique identifier of the file',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At Timestamp',
      description: 'When file was created',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At Timestamp',
      description: 'When file was updated',
    },
    file_name: {
      type: 'string',
      title: 'File Name',
      description: 'Name of the file',
    },
    file_size: {
      type: 'integer',
      minimum: 0,
      title: 'File Size',
      description: 'Size of the file in bytes',
      default: 0,
    },
    user_id: {
      type: 'string',
      title: 'User ID',
      description: 'Unique identifier for who created the file',
    },
    conversation_id: {
      type: 'string',
      title: 'Conversation ID',
      description: 'Unique identifier for the conversation the file is associated to',
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'file_name', 'user_id', 'conversation_id'],
  title: 'UploadConversationFileResponse',
  description: 'Response for uploading a conversation file',
} as const;

export const $ValidationError = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: 'string',
          },
          {
            type: 'integer',
          },
        ],
      },
      type: 'array',
      title: 'Location',
    },
    msg: {
      type: 'string',
      title: 'Message',
    },
    type: {
      type: 'string',
      title: 'Error Type',
    },
  },
  type: 'object',
  required: ['loc', 'msg', 'type'],
  title: 'ValidationError',
} as const;

export const $backend__schemas__scim__CreateUser = {
  properties: {
    userName: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'User Name',
      description: 'User name',
    },
    active: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Active',
      description: 'Is user active',
    },
    schemas: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Schemas',
      description: 'Schemas for the user',
    },
    name: {
      $ref: '#/components/schemas/Name',
      title: 'Name',
      description: 'Name of user',
    },
    emails: {
      items: {
        $ref: '#/components/schemas/Email',
      },
      type: 'array',
      title: 'Emails',
      description: 'List of emails for user',
    },
    externalId: {
      type: 'string',
      title: 'External ID',
      description: 'External ID for the user',
    },
  },
  type: 'object',
  required: ['schemas', 'name', 'emails', 'externalId'],
  title: 'CreateUser',
} as const;

export const $backend__schemas__scim__UpdateUser = {
  properties: {
    userName: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'User Name',
      description: 'User name',
    },
    active: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Active',
      description: 'Is user active',
    },
    schemas: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Schemas',
      description: 'Schemas for the user',
    },
    name: {
      $ref: '#/components/schemas/Name',
      description: 'Name of user',
    },
    emails: {
      items: {
        $ref: '#/components/schemas/Email',
      },
      type: 'array',
      title: 'Emails',
      description: 'List of emails for user',
    },
  },
  type: 'object',
  required: ['schemas', 'name', 'emails'],
  title: 'UpdateUser',
} as const;

export const $backend__schemas__scim__User = {
  properties: {
    userName: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'User Name',
      description: 'User name',
    },
    active: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Active',
      description: 'Is user active',
    },
    schemas: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Schemas',
      description: 'Schemas for the user',
    },
    id: {
      type: 'string',
      title: 'ID',
      description: 'Unique identifier for the user',
    },
    externalId: {
      type: 'string',
      title: 'External ID',
      description: 'External ID for the user',
    },
    meta: {
      $ref: '#/components/schemas/Meta',
      description: 'Metadata for the user',
    },
  },
  type: 'object',
  required: ['schemas', 'id', 'externalId', 'meta'],
  title: 'User',
} as const;

export const $backend__schemas__user__CreateUser = {
  properties: {
    password: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Password',
      description: 'Password for the user',
    },
    hashed_password: {
      anyOf: [
        {
          type: 'string',
          format: 'binary',
        },
        {
          type: 'null',
        },
      ],
      title: 'Hashed Password',
      description: "The user's password hashed",
    },
    fullname: {
      type: 'string',
      title: 'Full Name',
      description: "User's Full Name",
    },
    email: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Email',
      description: "User's email address",
    },
  },
  type: 'object',
  required: ['fullname'],
  title: 'CreateUser',
  description: 'Request to create a user',
} as const;

export const $backend__schemas__user__UpdateUser = {
  properties: {
    password: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Password',
      description: 'Password for the user',
    },
    hashed_password: {
      anyOf: [
        {
          type: 'string',
          format: 'binary',
        },
        {
          type: 'null',
        },
      ],
      title: 'Hashed Password',
      description: "The user's password hashed",
    },
    fullname: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Full Name',
      description: "User's Full Name",
    },
    email: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Email',
      description: "User's email address",
    },
  },
  type: 'object',
  title: 'UpdateUser',
  description: 'Request to update a user',
} as const;

export const $backend__schemas__user__User = {
  properties: {
    fullname: {
      type: 'string',
      title: 'Full Name',
      description: "User's Full Name",
    },
    email: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Email',
      description: "User's email address",
    },
    id: {
      type: 'string',
      title: 'ID',
      description: '',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At Timestamp',
      description: 'When the user was created',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At Timestamp',
      description: 'When the user was updated',
    },
  },
  type: 'object',
  required: ['fullname', 'id', 'created_at', 'updated_at'],
  title: 'User',
  description: 'User schema',
} as const;
