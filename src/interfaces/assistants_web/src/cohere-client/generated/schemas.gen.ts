// This file is auto-generated by @hey-api/openapi-ts

export const $AgentPublic = {
  properties: {
    user_id: {
      type: 'string',
      title: 'User Id',
    },
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    version: {
      type: 'integer',
      title: 'Version',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    preamble: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Preamble',
    },
    temperature: {
      type: 'number',
      title: 'Temperature',
    },
    tools: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools',
    },
    tools_metadata: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/AgentToolMetadataPublic',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools Metadata',
    },
    deployments: {
      items: {
        $ref: '#/components/schemas/DeploymentWithModels',
      },
      type: 'array',
      title: 'Deployments',
    },
    deployment: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Deployment',
    },
    model: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Model',
    },
    is_private: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Private',
    },
  },
  type: 'object',
  required: [
    'user_id',
    'id',
    'created_at',
    'updated_at',
    'version',
    'name',
    'description',
    'preamble',
    'temperature',
    'tools',
    'deployments',
    'deployment',
    'model',
    'is_private',
  ],
  title: 'AgentPublic',
} as const;

export const $AgentTaskResponse = {
  properties: {
    task_id: {
      type: 'string',
      title: 'Task Id',
    },
    status: {
      type: 'string',
      title: 'Status',
    },
    result: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Result',
    },
    date_done: {
      type: 'string',
      title: 'Date Done',
    },
    exception_snippet: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Exception Snippet',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    retries: {
      type: 'integer',
      title: 'Retries',
    },
  },
  type: 'object',
  required: ['task_id', 'status', 'date_done', 'name', 'retries'],
  title: 'AgentTaskResponse',
} as const;

export const $AgentToolMetadata = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    user_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'User Id',
    },
    agent_id: {
      type: 'string',
      title: 'Agent Id',
    },
    tool_name: {
      type: 'string',
      title: 'Tool Name',
    },
    artifacts: {
      items: {
        type: 'object',
      },
      type: 'array',
      title: 'Artifacts',
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'user_id', 'agent_id', 'tool_name', 'artifacts'],
  title: 'AgentToolMetadata',
} as const;

export const $AgentToolMetadataPublic = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    agent_id: {
      type: 'string',
      title: 'Agent Id',
    },
    tool_name: {
      type: 'string',
      title: 'Tool Name',
    },
    artifacts: {
      items: {
        type: 'object',
      },
      type: 'array',
      title: 'Artifacts',
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'agent_id', 'tool_name', 'artifacts'],
  title: 'AgentToolMetadataPublic',
} as const;

export const $AgentVisibility = {
  type: 'string',
  enum: ['private', 'public', 'all'],
  title: 'AgentVisibility',
} as const;

export const $Body_batch_upload_file_v1_agents_batch_upload_file_post = {
  properties: {
    files: {
      items: {
        type: 'string',
        format: 'binary',
      },
      type: 'array',
      title: 'Files',
    },
  },
  type: 'object',
  required: ['files'],
  title: 'Body_batch_upload_file_v1_agents_batch_upload_file_post',
} as const;

export const $Body_batch_upload_file_v1_conversations_batch_upload_file_post = {
  properties: {
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
    files: {
      items: {
        type: 'string',
        format: 'binary',
      },
      type: 'array',
      title: 'Files',
    },
  },
  type: 'object',
  required: ['files'],
  title: 'Body_batch_upload_file_v1_conversations_batch_upload_file_post',
} as const;

export const $Category = {
  type: 'string',
  enum: ['File loader', 'Data loader', 'Function'],
  title: 'Category',
} as const;

export const $ChatMessage = {
  properties: {
    role: {
      allOf: [
        {
          $ref: '#/components/schemas/ChatRole',
        },
      ],
      title: 'One of CHATBOT|USER|SYSTEM to identify who the message is coming from.',
    },
    message: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Contents of the chat message.',
    },
    tool_plan: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Contents of the tool plan.',
    },
    tool_results: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Results from the tool call.',
    },
    tool_calls: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'List of tool calls generated for custom tools',
    },
  },
  type: 'object',
  required: ['role'],
  title: 'ChatMessage',
  description:
    "A list of previous messages between the user and the model, meant to give the model conversational context for responding to the user's message.",
} as const;

export const $ChatResponseEvent = {
  properties: {
    event: {
      allOf: [
        {
          $ref: '#/components/schemas/StreamEvent',
        },
      ],
      title: 'type of stream event',
    },
    data: {
      anyOf: [
        {
          $ref: '#/components/schemas/StreamStart',
        },
        {
          $ref: '#/components/schemas/StreamTextGeneration',
        },
        {
          $ref: '#/components/schemas/StreamCitationGeneration',
        },
        {
          $ref: '#/components/schemas/StreamQueryGeneration',
        },
        {
          $ref: '#/components/schemas/StreamSearchResults',
        },
        {
          $ref: '#/components/schemas/StreamEnd',
        },
        {
          $ref: '#/components/schemas/StreamToolInput',
        },
        {
          $ref: '#/components/schemas/StreamToolResult',
        },
        {
          $ref: '#/components/schemas/StreamSearchQueriesGeneration',
        },
        {
          $ref: '#/components/schemas/StreamToolCallsGeneration',
        },
        {
          $ref: '#/components/schemas/StreamToolCallsChunk',
        },
        {
          $ref: '#/components/schemas/NonStreamedChatResponse',
        },
      ],
      title: 'Data returned from chat response of a given event type',
    },
  },
  type: 'object',
  required: ['event', 'data'],
  title: 'ChatResponseEvent',
} as const;

export const $ChatRole = {
  type: 'string',
  enum: ['CHATBOT', 'USER', 'SYSTEM', 'TOOL'],
  title: 'ChatRole',
  description: 'One of CHATBOT|USER|SYSTEM to identify who the message is coming from.',
} as const;

export const $Citation = {
  properties: {
    text: {
      type: 'string',
      title: 'Text',
    },
    start: {
      type: 'integer',
      title: 'Start',
    },
    end: {
      type: 'integer',
      title: 'End',
    },
    document_ids: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Document Ids',
    },
  },
  type: 'object',
  required: ['text', 'start', 'end', 'document_ids'],
  title: 'Citation',
} as const;

export const $CohereChatPromptTruncation = {
  type: 'string',
  enum: ['OFF', 'AUTO_PRESERVE_ORDER'],
  title: 'CohereChatPromptTruncation',
  description: 'Dictates how the prompt will be constructed. Defaults to "AUTO_PRESERVE_ORDER".',
} as const;

export const $CohereChatRequest = {
  properties: {
    message: {
      type: 'string',
      title: 'The message to send to the chatbot.',
    },
    chat_history: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ChatMessage',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title:
        'A list of entries used to construct the conversation. If provided, these messages will be used to build the prompt and the conversation_id will be ignored so no data will be stored to maintain state.',
    },
    conversation_id: {
      type: 'string',
      title:
        'To store a conversation then create a conversation id and use it for every related request',
    },
    tools: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/Tool',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: `
            List of custom or managed tools to use for the response.
            If passing in managed tools, you only need to provide the name of the tool.
            If passing in custom tools, you need to provide the name, description, and optionally parameter defintions of the tool.
            Passing a mix of custom and managed tools is not supported.

            Managed Tools Examples:
            tools=[
                {
                    "name": "Wiki Retriever - LangChain",
                },
                {
                    "name": "Calculator",
                }
            ]

            Custom Tools Examples:
            tools=[
                {
                    "name": "movie_title_generator",
                    "description": "tool to generate a cool movie title",
                    "parameter_definitions": {
                        "synopsis": {
                            "description": "short synopsis of the movie",
                            "type": "str",
                            "required": true
                        }
                    }
                },
                {
                    "name": "random_number_generator",
                    "description": "tool to generate a random number between min and max",
                    "parameter_definitions": {
                        "min": {
                            "description": "minimum number",
                            "type": "int",
                            "required": true
                        },
                        "max": {
                            "description": "maximum number",
                            "type": "int",
                            "required": true
                        }
                    }
                },
                {
                    "name": "joke_generator",
                    "description": "tool to generate a random joke",
                }
            ]
        `,
    },
    documents: {
      items: {
        type: 'object',
      },
      type: 'array',
      title: `Documents to use to generate grounded response with citations. Example:
            documents=[
                {
                    "id": "national_geographic_everest",
                    "title": "Height of Mount Everest",
                    "text": "The height of Mount Everest is 29,035 feet",
                    "url": "https://education.nationalgeographic.org/resource/mount-everest/",
                },
                {
                    "id": "national_geographic_mariana",
                    "title": "Depth of the Mariana Trench",
                    "text": "The depth of the Mariana Trench is 36,070 feet",
                    "url": "https://www.nationalgeographic.org/activity/mariana-trench-deepest-place-earth",
                },
            ]
        `,
    },
    model: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'The model to use for generating the response.',
      default: 'command-r',
    },
    temperature: {
      anyOf: [
        {
          type: 'number',
          minimum: 0,
        },
        {
          type: 'null',
        },
      ],
      title:
        'A non-negative float that tunes the degree of randomness in generation. Lower temperatures mean less random generations, and higher temperatures mean more random generations.',
    },
    k: {
      anyOf: [
        {
          type: 'integer',
          maximum: 500,
          minimum: 0,
        },
        {
          type: 'null',
        },
      ],
      title:
        'Ensures only the top k most likely tokens are considered for generation at each step.',
    },
    p: {
      anyOf: [
        {
          type: 'number',
          maximum: 0.99,
          minimum: 0,
        },
        {
          type: 'null',
        },
      ],
      title:
        'Ensures that only the most likely tokens, with total probability mass of p, are considered for generation at each step. If both k and p are enabled, p acts after k.',
    },
    preamble: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'A string to override the preamble.',
    },
    file_ids: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'List of File IDs for PDFs used in RAG for the response.',
    },
    search_queries_only: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title:
        "When set to true a list of search queries are generated. No search will occur nor replies to the user's message.",
      default: false,
    },
    max_tokens: {
      anyOf: [
        {
          type: 'integer',
          minimum: 1,
        },
        {
          type: 'null',
        },
      ],
      title:
        'The maximum number of tokens the model will generate as part of the response. Note: Setting a low value may result in incomplete generations.',
    },
    seed: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title:
        'If specified, the backend will make a best effort to sample tokens deterministically, such that repeated requests with the same seed and parameters should return the same result. However, determinism cannot be totally guaranteed.',
    },
    stop_sequences: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title:
        'A list of up to 5 strings that the model will use to stop generation. If the model generates a string that matches any of the strings in the list, it will stop generating tokens and return the generated text up to that point not including the stop sequence.',
    },
    presence_penalty: {
      anyOf: [
        {
          type: 'number',
          maximum: 1,
          minimum: 0,
        },
        {
          type: 'null',
        },
      ],
      title:
        'Used to reduce repetitiveness of generated tokens. Similar to frequency_penalty, except that this penalty is applied equally to all tokens that have already appeared, regardless of their exact frequencies.',
    },
    frequency_penalty: {
      anyOf: [
        {
          type: 'number',
          maximum: 1,
          minimum: 0,
        },
        {
          type: 'null',
        },
      ],
      title:
        'Used to reduce repetitiveness of generated tokens. The higher the value, the stronger a penalty is applied to previously present tokens, proportional to how many times they have already appeared in the prompt or prior generation.',
    },
    prompt_truncation: {
      allOf: [
        {
          $ref: '#/components/schemas/CohereChatPromptTruncation',
        },
      ],
      title: "Dictates how the prompt will be constructed. Defaults to 'AUTO_PRESERVE_ORDER'.",
      default: 'AUTO_PRESERVE_ORDER',
    },
    tool_results: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title:
        'A list of results from invoking tools recommended by the model in the previous chat turn. Results are used to produce a text response and will be referenced in citations.',
    },
    force_single_step: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title:
        'If set to true, the model will generate a single response in a single step. This is useful for generating a response to a single message.',
    },
    agent_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'The agent ID to use for the chat.',
    },
  },
  type: 'object',
  required: ['message'],
  title: 'CohereChatRequest',
  description: `Request shape for Cohere Python SDK Streamed Chat.
See: https://github.com/cohere-ai/cohere-python/blob/main/src/cohere/base_client.py#L1629`,
} as const;

export const $ConversationFilePublic = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
    file_name: {
      type: 'string',
      title: 'File Name',
    },
    file_path: {
      type: 'string',
      title: 'File Path',
    },
    file_size: {
      type: 'integer',
      minimum: 0,
      title: 'File Size',
      default: 0,
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'conversation_id', 'file_name', 'file_path'],
  title: 'ConversationFilePublic',
} as const;

export const $ConversationPublic = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    title: {
      type: 'string',
      title: 'Title',
    },
    messages: {
      items: {
        $ref: '#/components/schemas/Message',
      },
      type: 'array',
      title: 'Messages',
    },
    files: {
      items: {
        $ref: '#/components/schemas/ConversationFilePublic',
      },
      type: 'array',
      title: 'Files',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    agent_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Agent Id',
    },
    total_file_size: {
      type: 'integer',
      title: 'Total File Size',
      readOnly: true,
    },
  },
  type: 'object',
  required: [
    'id',
    'created_at',
    'updated_at',
    'title',
    'messages',
    'files',
    'description',
    'agent_id',
    'total_file_size',
  ],
  title: 'ConversationPublic',
} as const;

export const $ConversationWithoutMessages = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    title: {
      type: 'string',
      title: 'Title',
    },
    files: {
      items: {
        $ref: '#/components/schemas/ConversationFilePublic',
      },
      type: 'array',
      title: 'Files',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    agent_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Agent Id',
    },
    total_file_size: {
      type: 'integer',
      title: 'Total File Size',
      readOnly: true,
    },
  },
  type: 'object',
  required: [
    'id',
    'created_at',
    'updated_at',
    'title',
    'files',
    'description',
    'agent_id',
    'total_file_size',
  ],
  title: 'ConversationWithoutMessages',
} as const;

export const $CreateAgentRequest = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
    },
    version: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Version',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    preamble: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Preamble',
    },
    temperature: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title: 'Temperature',
    },
    tools: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools',
    },
    tools_metadata: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/CreateAgentToolMetadataRequest',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools Metadata',
    },
    deployment_config: {
      anyOf: [
        {
          additionalProperties: {
            type: 'string',
          },
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Deployment Config',
    },
    is_default_deployment: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Default Deployment',
      default: false,
    },
    model: {
      type: 'string',
      title: 'Model',
    },
    deployment: {
      type: 'string',
      title: 'Deployment',
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
    },
    is_private: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Private',
      default: false,
    },
  },
  type: 'object',
  required: ['name', 'model', 'deployment'],
  title: 'CreateAgentRequest',
} as const;

export const $CreateAgentToolMetadataRequest = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Id',
    },
    tool_name: {
      type: 'string',
      title: 'Tool Name',
    },
    artifacts: {
      items: {
        type: 'object',
      },
      type: 'array',
      title: 'Artifacts',
    },
  },
  type: 'object',
  required: ['tool_name', 'artifacts'],
  title: 'CreateAgentToolMetadataRequest',
} as const;

export const $CreateOrganization = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
    },
  },
  type: 'object',
  required: ['name'],
  title: 'CreateOrganization',
} as const;

export const $CreateSnapshotRequest = {
  properties: {
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
  },
  type: 'object',
  required: ['conversation_id'],
  title: 'CreateSnapshotRequest',
} as const;

export const $CreateSnapshotResponse = {
  properties: {
    snapshot_id: {
      type: 'string',
      title: 'Snapshot Id',
    },
    link_id: {
      type: 'string',
      title: 'Link Id',
    },
    messages: {
      items: {
        $ref: '#/components/schemas/Message',
      },
      type: 'array',
      title: 'Messages',
    },
  },
  type: 'object',
  required: ['snapshot_id', 'link_id', 'messages'],
  title: 'CreateSnapshotResponse',
} as const;

export const $CreateUser = {
  properties: {
    password: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Password',
    },
    hashed_password: {
      anyOf: [
        {
          type: 'string',
          format: 'binary',
        },
        {
          type: 'null',
        },
      ],
      title: 'Hashed Password',
    },
    fullname: {
      type: 'string',
      title: 'Fullname',
    },
    email: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Email',
    },
  },
  type: 'object',
  required: ['fullname'],
  title: 'CreateUser',
} as const;

export const $DeleteAgent = {
  properties: {},
  type: 'object',
  title: 'DeleteAgent',
} as const;

export const $DeleteAgentFileResponse = {
  properties: {},
  type: 'object',
  title: 'DeleteAgentFileResponse',
} as const;

export const $DeleteAgentToolMetadata = {
  properties: {},
  type: 'object',
  title: 'DeleteAgentToolMetadata',
} as const;

export const $DeleteConversationFileResponse = {
  properties: {},
  type: 'object',
  title: 'DeleteConversationFileResponse',
} as const;

export const $DeleteConversationResponse = {
  properties: {},
  type: 'object',
  title: 'DeleteConversationResponse',
} as const;

export const $DeleteDeployment = {
  properties: {},
  type: 'object',
  title: 'DeleteDeployment',
} as const;

export const $DeleteModel = {
  properties: {},
  type: 'object',
  title: 'DeleteModel',
} as const;

export const $DeleteOrganization = {
  properties: {},
  type: 'object',
  title: 'DeleteOrganization',
} as const;

export const $DeleteSnapshotLinkResponse = {
  properties: {},
  type: 'object',
  title: 'DeleteSnapshotLinkResponse',
} as const;

export const $DeleteSnapshotResponse = {
  properties: {},
  type: 'object',
  title: 'DeleteSnapshotResponse',
} as const;

export const $DeleteToolAuth = {
  properties: {},
  type: 'object',
  title: 'DeleteToolAuth',
} as const;

export const $DeleteUser = {
  properties: {},
  type: 'object',
  title: 'DeleteUser',
} as const;

export const $Deployment = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    models: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Models',
    },
    is_available: {
      type: 'boolean',
      title: 'Is Available',
      default: false,
    },
    env_vars: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Env Vars',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    is_community: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Community',
      default: false,
    },
  },
  type: 'object',
  required: ['name', 'models', 'env_vars'],
  title: 'Deployment',
} as const;

export const $DeploymentCreate = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    deployment_class_name: {
      type: 'string',
      title: 'Deployment Class Name',
    },
    is_community: {
      type: 'boolean',
      title: 'Is Community',
      default: false,
    },
    default_deployment_config: {
      additionalProperties: {
        type: 'string',
      },
      type: 'object',
      title: 'Default Deployment Config',
    },
  },
  type: 'object',
  required: ['name', 'deployment_class_name', 'default_deployment_config'],
  title: 'DeploymentCreate',
} as const;

export const $DeploymentUpdate = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    deployment_class_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Deployment Class Name',
    },
    is_community: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Community',
    },
    default_deployment_config: {
      anyOf: [
        {
          additionalProperties: {
            type: 'string',
          },
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Default Deployment Config',
    },
  },
  type: 'object',
  title: 'DeploymentUpdate',
} as const;

export const $DeploymentWithModels = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    is_available: {
      type: 'boolean',
      title: 'Is Available',
      default: false,
    },
    is_community: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Community',
      default: false,
    },
    env_vars: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Env Vars',
    },
    models: {
      items: {
        $ref: '#/components/schemas/ModelSimple',
      },
      type: 'array',
      title: 'Models',
    },
  },
  type: 'object',
  required: ['name', 'env_vars', 'models'],
  title: 'DeploymentWithModels',
} as const;

export const $Document = {
  properties: {
    text: {
      type: 'string',
      title: 'Text',
    },
    document_id: {
      type: 'string',
      title: 'Document Id',
    },
    title: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Title',
    },
    url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Url',
    },
    fields: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Fields',
    },
    tool_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Name',
    },
  },
  type: 'object',
  required: ['text', 'document_id', 'title', 'url', 'fields', 'tool_name'],
  title: 'Document',
} as const;

export const $GenerateTitleResponse = {
  properties: {
    title: {
      type: 'string',
      title: 'Title',
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error',
    },
  },
  type: 'object',
  required: ['title'],
  title: 'GenerateTitleResponse',
} as const;

export const $GenericResponseMessage = {
  properties: {
    message: {
      type: 'string',
      title: 'Message',
    },
  },
  type: 'object',
  required: ['message'],
  title: 'GenericResponseMessage',
} as const;

export const $HTTPValidationError = {
  properties: {
    detail: {
      items: {
        $ref: '#/components/schemas/ValidationError',
      },
      type: 'array',
      title: 'Detail',
    },
  },
  type: 'object',
  title: 'HTTPValidationError',
} as const;

export const $JWTResponse = {
  properties: {
    token: {
      type: 'string',
      title: 'Token',
    },
  },
  type: 'object',
  required: ['token'],
  title: 'JWTResponse',
} as const;

export const $LangchainChatRequest = {
  properties: {
    message: {
      type: 'string',
      title: 'The message to send to the chatbot.',
    },
    chat_history: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ChatMessage',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title:
        'A list of entries used to construct the conversation. If provided, these messages will be used to build the prompt and the conversation_id will be ignored so no data will be stored to maintain state.',
    },
    conversation_id: {
      type: 'string',
      title:
        'To store a conversation then create a conversation id and use it for every related request',
    },
    tools: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/Tool',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: `
            List of custom or managed tools to use for the response.
            If passing in managed tools, you only need to provide the name of the tool.
            If passing in custom tools, you need to provide the name, description, and optionally parameter defintions of the tool.
            Passing a mix of custom and managed tools is not supported.

            Managed Tools Examples:
            tools=[
                {
                    "name": "Wiki Retriever - LangChain",
                },
                {
                    "name": "Calculator",
                }
            ]

            Custom Tools Examples:
            tools=[
                {
                    "name": "movie_title_generator",
                    "description": "tool to generate a cool movie title",
                    "parameter_definitions": {
                        "synopsis": {
                            "description": "short synopsis of the movie",
                            "type": "str",
                            "required": true
                        }
                    }
                },
                {
                    "name": "random_number_generator",
                    "description": "tool to generate a random number between min and max",
                    "parameter_definitions": {
                        "min": {
                            "description": "minimum number",
                            "type": "int",
                            "required": true
                        },
                        "max": {
                            "description": "maximum number",
                            "type": "int",
                            "required": true
                        }
                    }
                },
                {
                    "name": "joke_generator",
                    "description": "tool to generate a random joke",
                }
            ]
        `,
    },
  },
  type: 'object',
  required: ['message'],
  title: 'LangchainChatRequest',
  description: 'Request shape for Langchain Streamed Chat.',
} as const;

export const $ListAuthStrategy = {
  properties: {
    strategy: {
      type: 'string',
      title: 'Strategy',
    },
    client_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Client Id',
    },
    authorization_endpoint: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Authorization Endpoint',
    },
    pkce_enabled: {
      type: 'boolean',
      title: 'Pkce Enabled',
    },
  },
  type: 'object',
  required: ['strategy', 'client_id', 'authorization_endpoint', 'pkce_enabled'],
  title: 'ListAuthStrategy',
} as const;

export const $ListConversationFile = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
    file_name: {
      type: 'string',
      title: 'File Name',
    },
    file_path: {
      type: 'string',
      title: 'File Path',
    },
    file_size: {
      type: 'integer',
      minimum: 0,
      title: 'File Size',
      default: 0,
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'conversation_id', 'file_name', 'file_path'],
  title: 'ListConversationFile',
} as const;

export const $Login = {
  properties: {
    strategy: {
      type: 'string',
      title: 'Strategy',
    },
    payload: {
      anyOf: [
        {
          additionalProperties: {
            type: 'string',
          },
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Payload',
    },
  },
  type: 'object',
  required: ['strategy'],
  title: 'Login',
} as const;

export const $Logout = {
  properties: {},
  type: 'object',
  title: 'Logout',
} as const;

export const $ManagedTool = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      default: '',
    },
    display_name: {
      type: 'string',
      title: 'Display Name',
      default: '',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      default: '',
    },
    parameter_definitions: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Parameter Definitions',
      default: {},
    },
    kwargs: {
      type: 'object',
      title: 'Kwargs',
      default: {},
    },
    is_visible: {
      type: 'boolean',
      title: 'Is Visible',
      default: false,
    },
    is_available: {
      type: 'boolean',
      title: 'Is Available',
      default: false,
    },
    error_message: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error Message',
      default: '',
    },
    category: {
      allOf: [
        {
          $ref: '#/components/schemas/Category',
        },
      ],
      default: 'Data loader',
    },
    is_auth_required: {
      type: 'boolean',
      title: 'Is Auth Required',
      default: false,
    },
    auth_url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Auth Url',
      default: '',
    },
    token: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Token',
      default: '',
    },
  },
  type: 'object',
  title: 'ManagedTool',
} as const;

export const $Message = {
  properties: {
    text: {
      type: 'string',
      title: 'Text',
    },
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    generation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Generation Id',
    },
    position: {
      type: 'integer',
      title: 'Position',
    },
    is_active: {
      type: 'boolean',
      title: 'Is Active',
    },
    documents: {
      items: {
        $ref: '#/components/schemas/Document',
      },
      type: 'array',
      title: 'Documents',
    },
    citations: {
      items: {
        $ref: '#/components/schemas/Citation',
      },
      type: 'array',
      title: 'Citations',
    },
    files: {
      items: {
        $ref: '#/components/schemas/ConversationFilePublic',
      },
      type: 'array',
      title: 'Files',
    },
    tool_calls: {
      items: {
        $ref: '#/components/schemas/ToolCall',
      },
      type: 'array',
      title: 'Tool Calls',
    },
    tool_plan: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Plan',
    },
    agent: {
      $ref: '#/components/schemas/MessageAgent',
    },
  },
  type: 'object',
  required: [
    'text',
    'id',
    'created_at',
    'updated_at',
    'generation_id',
    'position',
    'is_active',
    'documents',
    'citations',
    'files',
    'tool_calls',
    'tool_plan',
    'agent',
  ],
  title: 'Message',
} as const;

export const $MessageAgent = {
  type: 'string',
  enum: ['USER', 'CHATBOT'],
  title: 'MessageAgent',
} as const;

export const $Model = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    deployment_id: {
      type: 'string',
      title: 'Deployment Id',
    },
    cohere_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Cohere Name',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
  },
  type: 'object',
  required: ['id', 'name', 'deployment_id', 'cohere_name', 'description'],
  title: 'Model',
} as const;

export const $ModelCreate = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
    },
    cohere_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Cohere Name',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    deployment_id: {
      type: 'string',
      title: 'Deployment Id',
    },
  },
  type: 'object',
  required: ['name', 'cohere_name', 'description', 'deployment_id'],
  title: 'ModelCreate',
} as const;

export const $ModelSimple = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    cohere_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Cohere Name',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
  },
  type: 'object',
  required: ['id', 'name', 'cohere_name', 'description'],
  title: 'ModelSimple',
} as const;

export const $ModelUpdate = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
    },
    cohere_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Cohere Name',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    deployment_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Deployment Id',
    },
  },
  type: 'object',
  title: 'ModelUpdate',
} as const;

export const $NonStreamedChatResponse = {
  properties: {
    response_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Unique identifier for the response.',
    },
    generation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Unique identifier for the generation.',
    },
    chat_history: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ChatMessage',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title:
        "A list of previous messages between the user and the model, meant to give the model conversational context for responding to the user's message.",
    },
    finish_reason: {
      type: 'string',
      title: 'Reason the chat stream ended.',
    },
    text: {
      type: 'string',
      title: 'Contents of the chat message.',
    },
    citations: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/Citation',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Citations for the chat message.',
      default: [],
    },
    documents: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/Document',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Documents used to generate grounded response with citations.',
      default: [],
    },
    search_results: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Search results used to generate grounded response with citations.',
      default: [],
    },
    search_queries: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/SearchQuery',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'List of generated search queries.',
      default: [],
    },
    conversation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title:
        'To store a conversation then create a conversation id and use it for every related request.',
    },
    tool_calls: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ToolCall',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'List of tool calls generated for custom tools',
      default: [],
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error message if the response is an error.',
    },
  },
  type: 'object',
  required: [
    'response_id',
    'generation_id',
    'chat_history',
    'finish_reason',
    'text',
    'conversation_id',
  ],
  title: 'NonStreamedChatResponse',
} as const;

export const $Organization = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
    },
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
  },
  type: 'object',
  required: ['name', 'id', 'created_at', 'updated_at'],
  title: 'Organization',
} as const;

export const $SearchQuery = {
  properties: {
    text: {
      type: 'string',
      title: 'Text',
    },
    generation_id: {
      type: 'string',
      title: 'Generation Id',
    },
  },
  type: 'object',
  required: ['text', 'generation_id'],
  title: 'SearchQuery',
} as const;

export const $SnapshotData = {
  properties: {
    title: {
      type: 'string',
      title: 'Title',
    },
    description: {
      type: 'string',
      title: 'Description',
    },
    messages: {
      items: {
        $ref: '#/components/schemas/Message',
      },
      type: 'array',
      title: 'Messages',
    },
  },
  type: 'object',
  required: ['title', 'description', 'messages'],
  title: 'SnapshotData',
} as const;

export const $SnapshotPublic = {
  properties: {
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
    id: {
      type: 'string',
      title: 'Id',
    },
    last_message_id: {
      type: 'string',
      title: 'Last Message Id',
    },
    version: {
      type: 'integer',
      title: 'Version',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    snapshot: {
      $ref: '#/components/schemas/SnapshotData',
    },
  },
  type: 'object',
  required: [
    'conversation_id',
    'id',
    'last_message_id',
    'version',
    'created_at',
    'updated_at',
    'snapshot',
  ],
  title: 'SnapshotPublic',
} as const;

export const $SnapshotWithLinks = {
  properties: {
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
    id: {
      type: 'string',
      title: 'Id',
    },
    last_message_id: {
      type: 'string',
      title: 'Last Message Id',
    },
    version: {
      type: 'integer',
      title: 'Version',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    snapshot: {
      $ref: '#/components/schemas/SnapshotData',
    },
    links: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Links',
    },
  },
  type: 'object',
  required: [
    'conversation_id',
    'id',
    'last_message_id',
    'version',
    'created_at',
    'updated_at',
    'snapshot',
    'links',
  ],
  title: 'SnapshotWithLinks',
} as const;

export const $StreamCitationGeneration = {
  properties: {
    citations: {
      items: {
        $ref: '#/components/schemas/Citation',
      },
      type: 'array',
      title: 'Citations for the chat message.',
      default: [],
    },
  },
  type: 'object',
  title: 'StreamCitationGeneration',
  description: 'Stream citation generation event.',
} as const;

export const $StreamEnd = {
  properties: {
    response_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Response Id',
    },
    generation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Generation Id',
    },
    conversation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Conversation Id',
    },
    text: {
      type: 'string',
      title: 'Contents of the chat message.',
    },
    citations: {
      items: {
        $ref: '#/components/schemas/Citation',
      },
      type: 'array',
      title: 'Citations for the chat message.',
      default: [],
    },
    documents: {
      items: {
        $ref: '#/components/schemas/Document',
      },
      type: 'array',
      title: 'Documents used to generate grounded response with citations.',
      default: [],
    },
    search_results: {
      items: {
        type: 'object',
      },
      type: 'array',
      title: 'Search results used to generate grounded response with citations.',
      default: [],
    },
    search_queries: {
      items: {
        $ref: '#/components/schemas/SearchQuery',
      },
      type: 'array',
      title: 'List of generated search queries.',
      default: [],
    },
    tool_calls: {
      items: {
        $ref: '#/components/schemas/ToolCall',
      },
      type: 'array',
      title: 'List of tool calls generated for custom tools',
      default: [],
    },
    finish_reason: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Finish Reason',
    },
    chat_history: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ChatMessage',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title:
        'A list of entries used to construct the conversation. If provided, these messages will be used to build the prompt and the conversation_id will be ignored so no data will be stored to maintain state.',
    },
    error: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Error message if the response is an error.',
    },
  },
  type: 'object',
  required: ['text'],
  title: 'StreamEnd',
} as const;

export const $StreamEvent = {
  type: 'string',
  enum: [
    'stream-start',
    'search-queries-generation',
    'search-results',
    'tool-input',
    'tool-result',
    'text-generation',
    'citation-generation',
    'stream-end',
    'non-streamed-chat-response',
    'tool-calls-generation',
    'tool-calls-chunk',
  ],
  title: 'StreamEvent',
  description: "Stream Events returned by Cohere's chat stream response.",
} as const;

export const $StreamQueryGeneration = {
  properties: {
    query: {
      type: 'string',
      title: 'Search query used to generate grounded response with citations.',
    },
  },
  type: 'object',
  required: ['query'],
  title: 'StreamQueryGeneration',
  description: 'Stream query generation event.',
} as const;

export const $StreamSearchQueriesGeneration = {
  properties: {
    search_queries: {
      items: {
        $ref: '#/components/schemas/SearchQuery',
      },
      type: 'array',
      title: 'Search query used to generate grounded response with citations.',
      default: [],
    },
  },
  type: 'object',
  title: 'StreamSearchQueriesGeneration',
  description: 'Stream queries generation event.',
} as const;

export const $StreamSearchResults = {
  properties: {
    search_results: {
      items: {
        type: 'object',
      },
      type: 'array',
      title: 'Search results used to generate grounded response with citations.',
      default: [],
    },
    documents: {
      items: {
        $ref: '#/components/schemas/Document',
      },
      type: 'array',
      title: 'Documents used to generate grounded response with citations.',
      default: [],
    },
  },
  type: 'object',
  title: 'StreamSearchResults',
} as const;

export const $StreamStart = {
  properties: {
    generation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Generation Id',
    },
    conversation_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Conversation Id',
    },
  },
  type: 'object',
  title: 'StreamStart',
  description: 'Stream start event.',
} as const;

export const $StreamTextGeneration = {
  properties: {
    text: {
      type: 'string',
      title: 'Contents of the chat message.',
    },
  },
  type: 'object',
  required: ['text'],
  title: 'StreamTextGeneration',
  description: 'Stream text generation event.',
} as const;

export const $StreamToolCallsChunk = {
  properties: {
    tool_call_delta: {
      anyOf: [
        {
          $ref: '#/components/schemas/ToolCallDelta',
        },
        {
          type: 'null',
        },
      ],
      title: 'Partial tool call',
      default: {},
    },
    text: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Contents of the chat message.',
    },
  },
  type: 'object',
  required: ['text'],
  title: 'StreamToolCallsChunk',
} as const;

export const $StreamToolCallsGeneration = {
  properties: {
    stream_search_results: {
      anyOf: [
        {
          $ref: '#/components/schemas/StreamSearchResults',
        },
        {
          type: 'null',
        },
      ],
      title: 'List of search results used to generate grounded response with citations',
      default: [],
    },
    tool_calls: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ToolCall',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'List of tool calls generated for custom tools',
      default: [],
    },
    text: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Contents of the chat message.',
    },
  },
  type: 'object',
  required: ['text'],
  title: 'StreamToolCallsGeneration',
  description: 'Stream tool calls generation event.',
} as const;

export const $StreamToolInput = {
  properties: {
    input_type: {
      $ref: '#/components/schemas/ToolInputType',
    },
    tool_name: {
      type: 'string',
      title: 'Tool Name',
    },
    input: {
      type: 'string',
      title: 'Input',
    },
    text: {
      type: 'string',
      title: 'Text',
    },
  },
  type: 'object',
  required: ['input_type', 'tool_name', 'input', 'text'],
  title: 'StreamToolInput',
} as const;

export const $StreamToolResult = {
  properties: {
    result: {
      title: 'Result',
    },
    tool_name: {
      type: 'string',
      title: 'Tool Name',
    },
    documents: {
      items: {
        $ref: '#/components/schemas/Document',
      },
      type: 'array',
      title: 'Documents used to generate grounded response with citations.',
      default: [],
    },
  },
  type: 'object',
  required: ['result', 'tool_name'],
  title: 'StreamToolResult',
} as const;

export const $Tool = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      default: '',
    },
    display_name: {
      type: 'string',
      title: 'Display Name',
      default: '',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      default: '',
    },
    parameter_definitions: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Parameter Definitions',
      default: {},
    },
  },
  type: 'object',
  title: 'Tool',
} as const;

export const $ToolCall = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
    },
    parameters: {
      type: 'object',
      title: 'Parameters',
      default: {},
    },
  },
  type: 'object',
  required: ['name'],
  title: 'ToolCall',
} as const;

export const $ToolCallDelta = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
    },
    index: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Index',
    },
    parameters: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Parameters',
    },
  },
  type: 'object',
  required: ['name', 'index', 'parameters'],
  title: 'ToolCallDelta',
} as const;

export const $ToolInputType = {
  type: 'string',
  enum: ['QUERY', 'CODE'],
  title: 'ToolInputType',
  description: 'Type of input passed to the tool',
} as const;

export const $UpdateAgentRequest = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
    },
    version: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Version',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    preamble: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Preamble',
    },
    temperature: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title: 'Temperature',
    },
    model: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Model',
    },
    deployment: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Deployment',
    },
    deployment_config: {
      anyOf: [
        {
          additionalProperties: {
            type: 'string',
          },
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Deployment Config',
    },
    is_default_deployment: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Default Deployment',
      default: false,
    },
    is_default_model: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Default Model',
      default: false,
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
    },
    tools: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools',
    },
    tools_metadata: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/CreateAgentToolMetadataRequest',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools Metadata',
    },
    is_private: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Private',
    },
  },
  type: 'object',
  title: 'UpdateAgentRequest',
} as const;

export const $UpdateAgentToolMetadataRequest = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Id',
    },
    tool_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Name',
    },
    artifacts: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Artifacts',
    },
  },
  type: 'object',
  title: 'UpdateAgentToolMetadataRequest',
} as const;

export const $UpdateConversationRequest = {
  properties: {
    title: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Title',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
  },
  type: 'object',
  title: 'UpdateConversationRequest',
} as const;

export const $UpdateDeploymentEnv = {
  properties: {
    env_vars: {
      additionalProperties: {
        type: 'string',
      },
      type: 'object',
      title: 'Env Vars',
    },
  },
  type: 'object',
  required: ['env_vars'],
  title: 'UpdateDeploymentEnv',
} as const;

export const $UpdateOrganization = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
    },
  },
  type: 'object',
  required: ['name'],
  title: 'UpdateOrganization',
} as const;

export const $UpdateUser = {
  properties: {
    password: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Password',
    },
    hashed_password: {
      anyOf: [
        {
          type: 'string',
          format: 'binary',
        },
        {
          type: 'null',
        },
      ],
      title: 'Hashed Password',
    },
    fullname: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Fullname',
    },
    email: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Email',
    },
  },
  type: 'object',
  title: 'UpdateUser',
} as const;

export const $UploadAgentFileResponse = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    file_name: {
      type: 'string',
      title: 'File Name',
    },
    file_path: {
      type: 'string',
      title: 'File Path',
    },
    file_size: {
      type: 'integer',
      minimum: 0,
      title: 'File Size',
      default: 0,
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'file_name', 'file_path'],
  title: 'UploadAgentFileResponse',
} as const;

export const $UploadConversationFileResponse = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
    conversation_id: {
      type: 'string',
      title: 'Conversation Id',
    },
    file_name: {
      type: 'string',
      title: 'File Name',
    },
    file_path: {
      type: 'string',
      title: 'File Path',
    },
    file_size: {
      type: 'integer',
      minimum: 0,
      title: 'File Size',
      default: 0,
    },
  },
  type: 'object',
  required: ['id', 'created_at', 'updated_at', 'conversation_id', 'file_name', 'file_path'],
  title: 'UploadConversationFileResponse',
} as const;

export const $User = {
  properties: {
    fullname: {
      type: 'string',
      title: 'Fullname',
    },
    email: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Email',
    },
    id: {
      type: 'string',
      title: 'Id',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
      title: 'Updated At',
    },
  },
  type: 'object',
  required: ['fullname', 'id', 'created_at', 'updated_at'],
  title: 'User',
} as const;

export const $ValidationError = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: 'string',
          },
          {
            type: 'integer',
          },
        ],
      },
      type: 'array',
      title: 'Location',
    },
    msg: {
      type: 'string',
      title: 'Message',
    },
    type: {
      type: 'string',
      title: 'Error Type',
    },
  },
  type: 'object',
  required: ['loc', 'msg', 'type'],
  title: 'ValidationError',
} as const;
