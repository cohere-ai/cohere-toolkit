// This file is auto-generated by @hey-api/openapi-ts

export type AgentPublic = {
  user_id: string;
  id: string;
  created_at: string;
  updated_at: string;
  version: number;
  name: string;
  description: string | null;
  preamble: string | null;
  temperature: number;
  tools: Array<string> | null;
  tools_metadata?: Array<AgentToolMetadataPublic> | null;
  deployments: Array<DeploymentWithModels>;
  deployment: string | null;
  model: string | null;
  is_private: boolean | null;
};

export type AgentTaskResponse = {
  task_id: string;
  status: string;
  result?: {
    [key: string]: unknown;
  } | null;
  date_done: string;
  exception_snippet?: string | null;
  name: string;
  retries: number;
};

export type AgentToolMetadata = {
  id: string;
  created_at: string;
  updated_at: string;
  user_id: string | null;
  agent_id: string;
  tool_name: string;
  artifacts: Array<{
    [key: string]: unknown;
  }>;
};

export type AgentToolMetadataPublic = {
  id: string;
  created_at: string;
  updated_at: string;
  agent_id: string;
  tool_name: string;
  artifacts: Array<{
    [key: string]: unknown;
  }>;
};

export enum AgentVisibility {
  PRIVATE = 'private',
  PUBLIC = 'public',
  ALL = 'all',
}

export type Body_batch_upload_file_v1_agents_batch_upload_file_post = {
  files: Array<Blob | File>;
};

export type Body_batch_upload_file_v1_conversations_batch_upload_file_post = {
  conversation_id?: string;
  files: Array<Blob | File>;
};

export enum Category {
  FILE_LOADER = 'File loader',
  DATA_LOADER = 'Data loader',
  FUNCTION = 'Function',
}

/**
 * A list of previous messages between the user and the model, meant to give the model conversational context for responding to the user's message.
 */
export type ChatMessage = {
  role: ChatRole;
  message?: string | null;
  tool_plan?: string | null;
  tool_results?: Array<{
    [key: string]: unknown;
  }> | null;
  tool_calls?: Array<{
    [key: string]: unknown;
  }> | null;
};

export type ChatResponseEvent = {
  event: StreamEvent;
  data:
    | StreamStart
    | StreamTextGeneration
    | StreamCitationGeneration
    | StreamQueryGeneration
    | StreamSearchResults
    | StreamEnd
    | StreamToolInput
    | StreamToolResult
    | StreamSearchQueriesGeneration
    | StreamToolCallsGeneration
    | StreamToolCallsChunk
    | NonStreamedChatResponse;
};

/**
 * One of CHATBOT|USER|SYSTEM to identify who the message is coming from.
 */
export enum ChatRole {
  CHATBOT = 'CHATBOT',
  USER = 'USER',
  SYSTEM = 'SYSTEM',
  TOOL = 'TOOL',
}

export type Citation = {
  text: string;
  start: number;
  end: number;
  document_ids: Array<string>;
};

/**
 * Dictates how the prompt will be constructed. Defaults to "AUTO_PRESERVE_ORDER".
 */
export enum CohereChatPromptTruncation {
  OFF = 'OFF',
  AUTO_PRESERVE_ORDER = 'AUTO_PRESERVE_ORDER',
}

/**
 * Request shape for Cohere Python SDK Streamed Chat.
 * See: https://github.com/cohere-ai/cohere-python/blob/main/src/cohere/base_client.py#L1629
 */
export type CohereChatRequest = {
  message: string;
  chat_history?: Array<ChatMessage> | null;
  conversation_id?: string;
  tools?: Array<Tool> | null;
  documents?: Array<{
    [key: string]: unknown;
  }>;
  model?: string | null;
  temperature?: number | null;
  k?: number | null;
  p?: number | null;
  preamble?: string | null;
  file_ids?: Array<string> | null;
  search_queries_only?: boolean | null;
  max_tokens?: number | null;
  seed?: number | null;
  stop_sequences?: Array<string> | null;
  presence_penalty?: number | null;
  frequency_penalty?: number | null;
  prompt_truncation?: CohereChatPromptTruncation;
  tool_results?: Array<{
    [key: string]: unknown;
  }> | null;
  force_single_step?: boolean | null;
  agent_id?: string | null;
};

export type ConversationFilePublic = {
  id: string;
  created_at: string;
  updated_at: string;
  conversation_id: string;
  file_name: string;
  file_path: string;
  file_size?: number;
};

export type ConversationPublic = {
  id: string;
  created_at: string;
  updated_at: string;
  title: string;
  messages: Array<Message>;
  files: Array<ConversationFilePublic>;
  description: string | null;
  agent_id: string | null;
  readonly total_file_size: number;
};

export type ConversationWithoutMessages = {
  id: string;
  created_at: string;
  updated_at: string;
  title: string;
  files: Array<ConversationFilePublic>;
  description: string | null;
  agent_id: string | null;
  readonly total_file_size: number;
};

export type CreateAgentRequest = {
  name: string;
  version?: number | null;
  description?: string | null;
  preamble?: string | null;
  temperature?: number | null;
  tools?: Array<string> | null;
  tools_metadata?: Array<CreateAgentToolMetadataRequest> | null;
  deployment_config?: {
    [key: string]: string;
  } | null;
  is_default_deployment?: boolean | null;
  model: string;
  deployment: string;
  organization_id?: string | null;
  is_private?: boolean | null;
};

export type CreateAgentToolMetadataRequest = {
  id?: string | null;
  tool_name: string;
  artifacts: Array<{
    [key: string]: unknown;
  }>;
};

export type CreateOrganization = {
  name: string;
};

export type CreateSnapshotRequest = {
  conversation_id: string;
};

export type CreateSnapshotResponse = {
  snapshot_id: string;
  link_id: string;
  messages: Array<Message>;
};

export type CreateUser = {
  password?: string | null;
  hashed_password?: (Blob | File) | null;
  fullname: string;
  email?: string | null;
};

export type DeleteAgent = unknown;

export type DeleteAgentFileResponse = unknown;

export type DeleteAgentToolMetadata = unknown;

export type DeleteConversationFileResponse = unknown;

export type DeleteConversationResponse = unknown;

export type DeleteDeployment = unknown;

export type DeleteModel = unknown;

export type DeleteOrganization = unknown;

export type DeleteSnapshotLinkResponse = unknown;

export type DeleteSnapshotResponse = unknown;

export type DeleteToolAuth = unknown;

export type DeleteUser = unknown;

export type Deployment = {
  id?: string | null;
  name: string;
  models: Array<string>;
  is_available?: boolean;
  env_vars: Array<string> | null;
  description?: string | null;
  is_community?: boolean | null;
};

export type DeploymentCreate = {
  id?: string | null;
  name: string;
  description?: string | null;
  deployment_class_name: string;
  is_community?: boolean;
  default_deployment_config: {
    [key: string]: string;
  };
};

export type DeploymentUpdate = {
  name?: string | null;
  description?: string | null;
  deployment_class_name?: string | null;
  is_community?: boolean | null;
  default_deployment_config?: {
    [key: string]: string;
  } | null;
};

export type DeploymentWithModels = {
  id?: string | null;
  name: string;
  description?: string | null;
  is_available?: boolean;
  is_community?: boolean | null;
  env_vars: Array<string> | null;
  models: Array<ModelSimple>;
};

export type Document = {
  text: string;
  document_id: string;
  title: string | null;
  url: string | null;
  fields: {
    [key: string]: unknown;
  } | null;
  tool_name: string | null;
};

export type GenerateTitleResponse = {
  title: string;
  error?: string | null;
};

export type GenericResponseMessage = {
  message: string;
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

export type JWTResponse = {
  token: string;
};

/**
 * Request shape for Langchain Streamed Chat.
 */
export type LangchainChatRequest = {
  message: string;
  chat_history?: Array<ChatMessage> | null;
  conversation_id?: string;
  tools?: Array<Tool> | null;
};

export type ListAuthStrategy = {
  strategy: string;
  client_id: string | null;
  authorization_endpoint: string | null;
  pkce_enabled: boolean;
};

export type ListConversationFile = {
  id: string;
  created_at: string;
  updated_at: string;
  conversation_id: string;
  file_name: string;
  file_path: string;
  file_size?: number;
};

export type Login = {
  strategy: string;
  payload?: {
    [key: string]: string;
  } | null;
};

export type Logout = unknown;

export type ManagedTool = {
  name?: string | null;
  display_name?: string;
  description?: string | null;
  parameter_definitions?: {
    [key: string]: unknown;
  } | null;
  kwargs?: {
    [key: string]: unknown;
  };
  is_visible?: boolean;
  is_available?: boolean;
  error_message?: string | null;
  category?: Category;
  is_auth_required?: boolean;
  auth_url?: string | null;
  token?: string | null;
};

export type Message = {
  text: string;
  id: string;
  created_at: string;
  updated_at: string;
  generation_id: string | null;
  position: number;
  is_active: boolean;
  documents: Array<Document>;
  citations: Array<Citation>;
  files: Array<ConversationFilePublic>;
  tool_calls: Array<ToolCall>;
  tool_plan: string | null;
  agent: MessageAgent;
};

export enum MessageAgent {
  USER = 'USER',
  CHATBOT = 'CHATBOT',
}

export type Model = {
  id: string;
  name: string;
  deployment_id: string;
  cohere_name: string | null;
  description: string | null;
};

export type ModelCreate = {
  name: string;
  cohere_name: string | null;
  description: string | null;
  deployment_id: string;
};

export type ModelSimple = {
  id: string;
  name: string;
  cohere_name: string | null;
  description: string | null;
};

export type ModelUpdate = {
  name?: string | null;
  cohere_name?: string | null;
  description?: string | null;
  deployment_id?: string | null;
};

export type NonStreamedChatResponse = {
  response_id: string | null;
  generation_id: string | null;
  chat_history: Array<ChatMessage> | null;
  finish_reason: string;
  text: string;
  citations?: Array<Citation> | null;
  documents?: Array<Document> | null;
  search_results?: Array<{
    [key: string]: unknown;
  }> | null;
  search_queries?: Array<SearchQuery> | null;
  conversation_id: string | null;
  tool_calls?: Array<ToolCall> | null;
  error?: string | null;
};

export type Organization = {
  name: string;
  id: string;
  created_at: string;
  updated_at: string;
};

export type SearchQuery = {
  text: string;
  generation_id: string;
};

export type SnapshotData = {
  title: string;
  description: string;
  messages: Array<Message>;
};

export type SnapshotPublic = {
  conversation_id: string;
  id: string;
  last_message_id: string;
  version: number;
  created_at: string;
  updated_at: string;
  snapshot: SnapshotData;
};

export type SnapshotWithLinks = {
  conversation_id: string;
  id: string;
  last_message_id: string;
  version: number;
  created_at: string;
  updated_at: string;
  snapshot: SnapshotData;
  links: Array<string>;
};

/**
 * Stream citation generation event.
 */
export type StreamCitationGeneration = {
  citations?: Array<Citation>;
};

export type StreamEnd = {
  response_id?: string | null;
  generation_id?: string | null;
  conversation_id?: string | null;
  text: string;
  citations?: Array<Citation>;
  documents?: Array<Document>;
  search_results?: Array<{
    [key: string]: unknown;
  }>;
  search_queries?: Array<SearchQuery>;
  tool_calls?: Array<ToolCall>;
  finish_reason?: string | null;
  chat_history?: Array<ChatMessage> | null;
  error?: string | null;
};

/**
 * Stream Events returned by Cohere's chat stream response.
 */
export enum StreamEvent {
  STREAM_START = 'stream-start',
  SEARCH_QUERIES_GENERATION = 'search-queries-generation',
  SEARCH_RESULTS = 'search-results',
  TOOL_INPUT = 'tool-input',
  TOOL_RESULT = 'tool-result',
  TEXT_GENERATION = 'text-generation',
  CITATION_GENERATION = 'citation-generation',
  STREAM_END = 'stream-end',
  NON_STREAMED_CHAT_RESPONSE = 'non-streamed-chat-response',
  TOOL_CALLS_GENERATION = 'tool-calls-generation',
  TOOL_CALLS_CHUNK = 'tool-calls-chunk',
}

/**
 * Stream query generation event.
 */
export type StreamQueryGeneration = {
  query: string;
};

/**
 * Stream queries generation event.
 */
export type StreamSearchQueriesGeneration = {
  search_queries?: Array<SearchQuery>;
};

export type StreamSearchResults = {
  search_results?: Array<{
    [key: string]: unknown;
  }>;
  documents?: Array<Document>;
};

/**
 * Stream start event.
 */
export type StreamStart = {
  generation_id?: string | null;
  conversation_id?: string | null;
};

/**
 * Stream text generation event.
 */
export type StreamTextGeneration = {
  text: string;
};

export type StreamToolCallsChunk = {
  tool_call_delta?: ToolCallDelta | null;
  text: string | null;
};

/**
 * Stream tool calls generation event.
 */
export type StreamToolCallsGeneration = {
  stream_search_results?: StreamSearchResults | null;
  tool_calls?: Array<ToolCall> | null;
  text: string | null;
};

export type StreamToolInput = {
  input_type: ToolInputType;
  tool_name: string;
  input: string;
  text: string;
};

export type StreamToolResult = {
  result: unknown;
  tool_name: string;
  documents?: Array<Document>;
};

export type Tool = {
  name?: string | null;
  display_name?: string;
  description?: string | null;
  parameter_definitions?: {
    [key: string]: unknown;
  } | null;
};

export type ToolCall = {
  name: string;
  parameters?: {
    [key: string]: unknown;
  };
};

export type ToolCallDelta = {
  name: string | null;
  index: number | null;
  parameters: string | null;
};

/**
 * Type of input passed to the tool
 */
export enum ToolInputType {
  QUERY = 'QUERY',
  CODE = 'CODE',
}

export type UpdateAgentRequest = {
  name?: string | null;
  version?: number | null;
  description?: string | null;
  preamble?: string | null;
  temperature?: number | null;
  model?: string | null;
  deployment?: string | null;
  deployment_config?: {
    [key: string]: string;
  } | null;
  is_default_deployment?: boolean | null;
  is_default_model?: boolean | null;
  organization_id?: string | null;
  tools?: Array<string> | null;
  tools_metadata?: Array<CreateAgentToolMetadataRequest> | null;
  is_private?: boolean | null;
};

export type UpdateAgentToolMetadataRequest = {
  id?: string | null;
  tool_name?: string | null;
  artifacts?: Array<{
    [key: string]: unknown;
  }> | null;
};

export type UpdateConversationRequest = {
  title?: string | null;
  description?: string | null;
};

export type UpdateDeploymentEnv = {
  env_vars: {
    [key: string]: string;
  };
};

export type UpdateOrganization = {
  name: string | null;
};

export type UpdateUser = {
  password?: string | null;
  hashed_password?: (Blob | File) | null;
  fullname?: string | null;
  email?: string | null;
};

export type UploadAgentFileResponse = {
  id: string;
  created_at: string;
  updated_at: string;
  file_name: string;
  file_path: string;
  file_size?: number;
};

export type UploadConversationFileResponse = {
  id: string;
  created_at: string;
  updated_at: string;
  conversation_id: string;
  file_name: string;
  file_path: string;
  file_size?: number;
};

export type User = {
  fullname: string;
  email?: string | null;
  id: string;
  created_at: string;
  updated_at: string;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type GetStrategiesV1AuthStrategiesGetResponse = Array<ListAuthStrategy>;

export type LoginV1LoginPostData = {
  requestBody: Login;
};

export type LoginV1LoginPostResponse = JWTResponse | null;

export type AuthorizeV1StrategyAuthPostData = {
  code?: string;
  strategy: string;
};

export type AuthorizeV1StrategyAuthPostResponse = JWTResponse;

export type LogoutV1LogoutGetResponse = Logout;

export type ToolAuthV1ToolAuthGetResponse = unknown;

export type DeleteToolAuthV1ToolAuthToolIdDeleteData = {
  toolId: string;
};

export type DeleteToolAuthV1ToolAuthToolIdDeleteResponse = DeleteToolAuth;

export type ChatStreamV1ChatStreamPostData = {
  requestBody: CohereChatRequest;
};

export type ChatStreamV1ChatStreamPostResponse = Array<ChatResponseEvent>;

export type ChatV1ChatPostData = {
  requestBody: CohereChatRequest;
};

export type ChatV1ChatPostResponse = NonStreamedChatResponse;

export type LangchainChatStreamV1LangchainChatPostData = {
  requestBody: LangchainChatRequest;
};

export type LangchainChatStreamV1LangchainChatPostResponse = unknown;

export type CreateUserV1UsersPostData = {
  requestBody: CreateUser;
};

export type CreateUserV1UsersPostResponse = User;

export type ListUsersV1UsersGetData = {
  limit?: number;
  offset?: number;
};

export type ListUsersV1UsersGetResponse = Array<User>;

export type GetUserV1UsersUserIdGetData = {
  userId: string;
};

export type GetUserV1UsersUserIdGetResponse = User;

export type UpdateUserV1UsersUserIdPutData = {
  requestBody: UpdateUser;
  userId: string;
};

export type UpdateUserV1UsersUserIdPutResponse = User;

export type DeleteUserV1UsersUserIdDeleteData = {
  userId: string;
};

export type DeleteUserV1UsersUserIdDeleteResponse = DeleteUser;

export type GetConversationV1ConversationsConversationIdGetData = {
  conversationId: string;
};

export type GetConversationV1ConversationsConversationIdGetResponse = ConversationPublic;

export type UpdateConversationV1ConversationsConversationIdPutData = {
  conversationId: string;
  requestBody: UpdateConversationRequest;
};

export type UpdateConversationV1ConversationsConversationIdPutResponse = ConversationPublic;

export type DeleteConversationV1ConversationsConversationIdDeleteData = {
  conversationId: string;
};

export type DeleteConversationV1ConversationsConversationIdDeleteResponse =
  DeleteConversationResponse;

export type ListConversationsV1ConversationsGetData = {
  agentId?: string;
  limit?: number;
  offset?: number;
};

export type ListConversationsV1ConversationsGetResponse = Array<ConversationWithoutMessages>;

export type SearchConversationsV1ConversationsSearchGetData = {
  agentId?: string;
  limit?: number;
  offset?: number;
  query: string;
};

export type SearchConversationsV1ConversationsSearchGetResponse =
  Array<ConversationWithoutMessages>;

export type BatchUploadFileV1ConversationsBatchUploadFilePostData = {
  formData: Body_batch_upload_file_v1_conversations_batch_upload_file_post;
};

export type BatchUploadFileV1ConversationsBatchUploadFilePostResponse =
  Array<UploadConversationFileResponse>;

export type ListFilesV1ConversationsConversationIdFilesGetData = {
  conversationId: string;
};

export type ListFilesV1ConversationsConversationIdFilesGetResponse = Array<ListConversationFile>;

export type DeleteFileV1ConversationsConversationIdFilesFileIdDeleteData = {
  conversationId: string;
  fileId: string;
};

export type DeleteFileV1ConversationsConversationIdFilesFileIdDeleteResponse =
  DeleteConversationFileResponse;

export type GenerateTitleV1ConversationsConversationIdGenerateTitlePostData = {
  conversationId: string;
  model?: string | null;
};

export type GenerateTitleV1ConversationsConversationIdGenerateTitlePostResponse =
  GenerateTitleResponse;

export type ListToolsV1ToolsGetData = {
  agentId?: string | null;
};

export type ListToolsV1ToolsGetResponse = Array<ManagedTool>;

export type CreateDeploymentV1DeploymentsPostData = {
  requestBody: DeploymentCreate;
};

export type CreateDeploymentV1DeploymentsPostResponse = Deployment;

export type ListDeploymentsV1DeploymentsGetData = {
  all?: boolean;
};

export type ListDeploymentsV1DeploymentsGetResponse = Array<Deployment>;

export type UpdateDeploymentV1DeploymentsDeploymentIdPutData = {
  deploymentId: string;
  requestBody: DeploymentUpdate;
};

export type UpdateDeploymentV1DeploymentsDeploymentIdPutResponse = Deployment;

export type GetDeploymentV1DeploymentsDeploymentIdGetData = {
  deploymentId: string;
};

export type GetDeploymentV1DeploymentsDeploymentIdGetResponse = Deployment;

export type DeleteDeploymentV1DeploymentsDeploymentIdDeleteData = {
  deploymentId: string;
};

export type DeleteDeploymentV1DeploymentsDeploymentIdDeleteResponse = DeleteDeployment;

export type SetEnvVarsV1DeploymentsNameSetEnvVarsPostData = {
  name: string;
  requestBody: UpdateDeploymentEnv;
};

export type SetEnvVarsV1DeploymentsNameSetEnvVarsPostResponse = unknown;

export type ListExperimentalFeaturesV1ExperimentalFeaturesGetResponse = unknown;

export type CreateAgentV1AgentsPostData = {
  requestBody: CreateAgentRequest;
};

export type CreateAgentV1AgentsPostResponse = AgentPublic;

export type ListAgentsV1AgentsGetData = {
  limit?: number;
  offset?: number;
  organizationId?: string | null;
  visibility?: AgentVisibility;
};

export type ListAgentsV1AgentsGetResponse = Array<AgentPublic>;

export type GetAgentByIdV1AgentsAgentIdGetData = {
  agentId: string;
};

export type GetAgentByIdV1AgentsAgentIdGetResponse = AgentPublic;

export type UpdateAgentV1AgentsAgentIdPutData = {
  agentId: string;
  requestBody: UpdateAgentRequest;
};

export type UpdateAgentV1AgentsAgentIdPutResponse = AgentPublic;

export type DeleteAgentV1AgentsAgentIdDeleteData = {
  agentId: string;
};

export type DeleteAgentV1AgentsAgentIdDeleteResponse = DeleteAgent;

export type GetAgentDeploymentsV1AgentsAgentIdDeploymentsGetData = {
  agentId: string;
};

export type GetAgentDeploymentsV1AgentsAgentIdDeploymentsGetResponse = Array<Deployment>;

export type GetAgentTasksV1AgentsAgentIdTasksGetData = {
  agentId: string;
};

export type GetAgentTasksV1AgentsAgentIdTasksGetResponse = Array<AgentTaskResponse>;

export type ListAgentToolMetadataV1AgentsAgentIdToolMetadataGetData = {
  agentId: string;
};

export type ListAgentToolMetadataV1AgentsAgentIdToolMetadataGetResponse =
  Array<AgentToolMetadataPublic>;

export type CreateAgentToolMetadataV1AgentsAgentIdToolMetadataPostData = {
  agentId: string;
  requestBody: CreateAgentToolMetadataRequest;
};

export type CreateAgentToolMetadataV1AgentsAgentIdToolMetadataPostResponse =
  AgentToolMetadataPublic;

export type UpdateAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdPutData = {
  agentId: string;
  agentToolMetadataId: string;
  requestBody: UpdateAgentToolMetadataRequest;
};

export type UpdateAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdPutResponse =
  AgentToolMetadata;

export type DeleteAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdDeleteData = {
  agentId: string;
  agentToolMetadataId: string;
};

export type DeleteAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdDeleteResponse =
  DeleteAgentToolMetadata;

export type BatchUploadFileV1AgentsBatchUploadFilePostData = {
  formData: Body_batch_upload_file_v1_agents_batch_upload_file_post;
};

export type BatchUploadFileV1AgentsBatchUploadFilePostResponse = Array<UploadAgentFileResponse>;

export type DeleteAgentFileV1AgentsAgentIdFilesFileIdDeleteData = {
  agentId: string;
  fileId: string;
};

export type DeleteAgentFileV1AgentsAgentIdFilesFileIdDeleteResponse = DeleteAgentFileResponse;

export type GetDefaultAgentV1DefaultAgentGetResponse = GenericResponseMessage;

export type ListSnapshotsV1SnapshotsGetResponse = Array<SnapshotWithLinks>;

export type CreateSnapshotV1SnapshotsPostData = {
  requestBody: CreateSnapshotRequest;
};

export type CreateSnapshotV1SnapshotsPostResponse = CreateSnapshotResponse;

export type GetSnapshotV1SnapshotsLinkLinkIdGetData = {
  linkId: string;
};

export type GetSnapshotV1SnapshotsLinkLinkIdGetResponse = SnapshotPublic;

export type DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteData = {
  linkId: string;
};

export type DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteResponse = DeleteSnapshotLinkResponse;

export type DeleteSnapshotV1SnapshotsSnapshotIdDeleteData = {
  snapshotId: string;
};

export type DeleteSnapshotV1SnapshotsSnapshotIdDeleteResponse = DeleteSnapshotResponse;

export type ListOrganizationsV1OrganizationsGetResponse = Array<Organization>;

export type CreateOrganizationV1OrganizationsPostData = {
  requestBody: CreateOrganization;
};

export type CreateOrganizationV1OrganizationsPostResponse = Organization;

export type UpdateOrganizationV1OrganizationsOrganizationIdPutData = {
  organizationId: string;
  requestBody: UpdateOrganization;
};

export type UpdateOrganizationV1OrganizationsOrganizationIdPutResponse = Organization;

export type GetOrganizationV1OrganizationsOrganizationIdGetData = {
  organizationId: string;
};

export type GetOrganizationV1OrganizationsOrganizationIdGetResponse = Organization;

export type DeleteOrganizationV1OrganizationsOrganizationIdDeleteData = {
  organizationId: string;
};

export type DeleteOrganizationV1OrganizationsOrganizationIdDeleteResponse = DeleteOrganization;

export type CreateModelV1ModelsPostData = {
  requestBody: ModelCreate;
};

export type CreateModelV1ModelsPostResponse = Model;

export type ListModelsV1ModelsGetData = {
  limit?: number;
  offset?: number;
};

export type ListModelsV1ModelsGetResponse = Array<Model>;

export type UpdateModelV1ModelsModelIdPutData = {
  modelId: string;
  requestBody: ModelUpdate;
};

export type UpdateModelV1ModelsModelIdPutResponse = Model;

export type GetModelV1ModelsModelIdGetData = {
  modelId: string;
};

export type GetModelV1ModelsModelIdGetResponse = Model;

export type DeleteModelV1ModelsModelIdDeleteData = {
  modelId: string;
};

export type DeleteModelV1ModelsModelIdDeleteResponse = DeleteModel;

export type HealthHealthGetResponse = unknown;

export type ApplyMigrationsMigratePostResponse = unknown;

export type $OpenApiTs = {
  '/v1/auth_strategies': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<ListAuthStrategy>;
      };
    };
  };
  '/v1/login': {
    post: {
      req: LoginV1LoginPostData;
      res: {
        /**
         * Successful Response
         */
        200: JWTResponse | null;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/{strategy}/auth': {
    post: {
      req: AuthorizeV1StrategyAuthPostData;
      res: {
        /**
         * Successful Response
         */
        200: JWTResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/logout': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Logout;
      };
    };
  };
  '/v1/tool/auth': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
  '/v1/tool/auth/{tool_id}': {
    delete: {
      req: DeleteToolAuthV1ToolAuthToolIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteToolAuth;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/chat-stream': {
    post: {
      req: ChatStreamV1ChatStreamPostData;
      res: {
        /**
         * Successful Response
         */
        200: Array<ChatResponseEvent>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/chat': {
    post: {
      req: ChatV1ChatPostData;
      res: {
        /**
         * Successful Response
         */
        200: NonStreamedChatResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/langchain-chat': {
    post: {
      req: LangchainChatStreamV1LangchainChatPostData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/users': {
    post: {
      req: CreateUserV1UsersPostData;
      res: {
        /**
         * Successful Response
         */
        200: User;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: ListUsersV1UsersGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<User>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/users/{user_id}': {
    get: {
      req: GetUserV1UsersUserIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: User;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: UpdateUserV1UsersUserIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: User;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteUserV1UsersUserIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteUser;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/{conversation_id}': {
    get: {
      req: GetConversationV1ConversationsConversationIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: ConversationPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: UpdateConversationV1ConversationsConversationIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: ConversationPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteConversationV1ConversationsConversationIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteConversationResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations': {
    get: {
      req: ListConversationsV1ConversationsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<ConversationWithoutMessages>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations:search': {
    get: {
      req: SearchConversationsV1ConversationsSearchGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<ConversationWithoutMessages>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/batch_upload_file': {
    post: {
      req: BatchUploadFileV1ConversationsBatchUploadFilePostData;
      res: {
        /**
         * Successful Response
         */
        200: Array<UploadConversationFileResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/{conversation_id}/files': {
    get: {
      req: ListFilesV1ConversationsConversationIdFilesGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<ListConversationFile>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/{conversation_id}/files/{file_id}': {
    delete: {
      req: DeleteFileV1ConversationsConversationIdFilesFileIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteConversationFileResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/{conversation_id}/generate-title': {
    post: {
      req: GenerateTitleV1ConversationsConversationIdGenerateTitlePostData;
      res: {
        /**
         * Successful Response
         */
        200: GenerateTitleResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/tools': {
    get: {
      req: ListToolsV1ToolsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<ManagedTool>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/deployments': {
    post: {
      req: CreateDeploymentV1DeploymentsPostData;
      res: {
        /**
         * Successful Response
         */
        200: Deployment;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: ListDeploymentsV1DeploymentsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<Deployment>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/deployments/{deployment_id}': {
    put: {
      req: UpdateDeploymentV1DeploymentsDeploymentIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: Deployment;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: GetDeploymentV1DeploymentsDeploymentIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: Deployment;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteDeploymentV1DeploymentsDeploymentIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteDeployment;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/deployments/{name}/set_env_vars': {
    post: {
      req: SetEnvVarsV1DeploymentsNameSetEnvVarsPostData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/experimental_features/': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
  '/v1/agents': {
    post: {
      req: CreateAgentV1AgentsPostData;
      res: {
        /**
         * Successful Response
         */
        200: AgentPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: ListAgentsV1AgentsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<AgentPublic>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/{agent_id}': {
    get: {
      req: GetAgentByIdV1AgentsAgentIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: AgentPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: UpdateAgentV1AgentsAgentIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: AgentPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteAgentV1AgentsAgentIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteAgent;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/{agent_id}/deployments': {
    get: {
      req: GetAgentDeploymentsV1AgentsAgentIdDeploymentsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<Deployment>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/{agent_id}/tasks': {
    get: {
      req: GetAgentTasksV1AgentsAgentIdTasksGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<AgentTaskResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/{agent_id}/tool-metadata': {
    get: {
      req: ListAgentToolMetadataV1AgentsAgentIdToolMetadataGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<AgentToolMetadataPublic>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: CreateAgentToolMetadataV1AgentsAgentIdToolMetadataPostData;
      res: {
        /**
         * Successful Response
         */
        200: AgentToolMetadataPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/{agent_id}/tool-metadata/{agent_tool_metadata_id}': {
    put: {
      req: UpdateAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: AgentToolMetadata;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteAgentToolMetadataV1AgentsAgentIdToolMetadataAgentToolMetadataIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteAgentToolMetadata;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/batch_upload_file': {
    post: {
      req: BatchUploadFileV1AgentsBatchUploadFilePostData;
      res: {
        /**
         * Successful Response
         */
        200: Array<UploadAgentFileResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/{agent_id}/files/{file_id}': {
    delete: {
      req: DeleteAgentFileV1AgentsAgentIdFilesFileIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteAgentFileResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/default_agent/': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: GenericResponseMessage;
      };
    };
  };
  '/v1/snapshots': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<SnapshotWithLinks>;
      };
    };
    post: {
      req: CreateSnapshotV1SnapshotsPostData;
      res: {
        /**
         * Successful Response
         */
        200: CreateSnapshotResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/snapshots/link/{link_id}': {
    get: {
      req: GetSnapshotV1SnapshotsLinkLinkIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: SnapshotPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteSnapshotLinkResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/snapshots/{snapshot_id}': {
    delete: {
      req: DeleteSnapshotV1SnapshotsSnapshotIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteSnapshotResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/organizations': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<Organization>;
      };
    };
    post: {
      req: CreateOrganizationV1OrganizationsPostData;
      res: {
        /**
         * Successful Response
         */
        200: Organization;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/organizations/{organization_id}': {
    put: {
      req: UpdateOrganizationV1OrganizationsOrganizationIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: Organization;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: GetOrganizationV1OrganizationsOrganizationIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: Organization;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteOrganizationV1OrganizationsOrganizationIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteOrganization;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/models': {
    post: {
      req: CreateModelV1ModelsPostData;
      res: {
        /**
         * Successful Response
         */
        200: Model;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: ListModelsV1ModelsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<Model>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/models/{model_id}': {
    put: {
      req: UpdateModelV1ModelsModelIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: Model;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: GetModelV1ModelsModelIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: Model;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteModelV1ModelsModelIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteModel;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/health': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
  '/migrate': {
    post: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
};
