// This file is auto-generated by @hey-api/openapi-ts

export type ActiveUserCount = {
  count: number;
  date: string;
};

export type AgentConversationJobResponse = {
  agent_id: string;
  tool_id: string;
  conversation_id: string;
  version: string;
  job_state: JobState;
};

export type AgentJobResponse = {
  tool_id: string;
  job_state: JobState;
  last_updated: string;
  count_completed_file: number;
  count_queued_file: number;
  files_failed: Array<FileStatus>;
  count_deletion_tasks_remaining?: number | null;
};

export type AgentPublic = {
  id: string;
  created_at: string;
  updated_at: string;
  version: number;
  name: string;
  description: string | null;
  preamble: string | null;
  temperature: number;
  tools: Array<string> | null;
  tools_metadata?: Array<AgentToolMetadataPublic> | null;
  deployments: Array<DeploymentWithModels>;
  deployment: string | null;
  model: string | null;
  type: AgentType;
  base_agent_id: string | null;
  user_fullname: string | null;
  created_by?: string | null;
  is_owner?: boolean | null;
};

export type AgentStats = {
  num_users: number;
};

export type AgentToolMetadataPublic = {
  id: string;
  created_at: string;
  updated_at: string;
  agent_id: string;
  tool_name: string;
  artifacts: Array<{
    [key: string]: unknown;
  }>;
};

export enum AgentType {
  PRIVATE = 'PRIVATE',
  PUBLIC = 'PUBLIC',
  BASE = 'BASE',
  DEFAULT = 'DEFAULT',
}

export enum AgentVisibility {
  PRIVATE = 'PRIVATE',
  PUBLIC = 'PUBLIC',
  ALL = 'ALL',
}

export type AzureEventResource = {
  '@odata.type': string;
  '@odata.id': string;
  '@odata.etag': string;
  id: string;
};

export type AzureLifecycleEvent = {
  subscriptionId: string;
  subscriptionExpirationDateTime: string;
  tenantId: string;
  lifecycleEvent: 'reauthorizationRequired' | 'subscriptionRemoved' | 'missed';
  clientState: string;
};

export enum lifecycleEvent {
  REAUTHORIZATION_REQUIRED = 'reauthorizationRequired',
  SUBSCRIPTION_REMOVED = 'subscriptionRemoved',
  MISSED = 'missed',
}

export type AzureLifecyclePayload = {
  value?: Array<AzureLifecycleEvent>;
};

export type AzureWebhookEvent = {
  subscriptionId: string;
  subscriptionExpirationDateTime: string;
  changeType: string;
  resource: string;
  resourceData: AzureEventResource;
  clientState: string;
  tenantId: string;
};

export type AzureWebhookPayload = {
  value?: Array<AzureWebhookEvent>;
};

export type Body_batch_upload_file_v1_agents_batch_upload_file_post = {
  files: Array<Blob | File>;
};

export type Body_batch_upload_file_v1_conversations_batch_upload_file_post = {
  conversation_id?: string;
  agent_id?: string;
  files: Array<Blob | File>;
};

export type CallToolRequest = {
  parameters?: {
    [key: string]: unknown;
  } | null;
};

export type CallToolResponse = {
  outputs?: Array<{
    [key: string]: unknown;
  }> | null;
};

export enum Category {
  WEB_SEARCH = 'WebSearch',
  BASIC = 'Basic',
  ARTIFACT = 'Artifact',
  KNOWLEDGE = 'Knowledge',
}

export type ChatMessage = {
  role: ChatRole;
  message?: string | null;
  tool_results?: Array<{
    [key: string]: unknown;
  }> | null;
  tool_calls?: Array<{
    [key: string]: unknown;
  }> | null;
  [key: string]: unknown | ChatRole;
};

export type ChatResponseEvent = {
  event: StreamEvent;
  data:
    | StreamStart
    | StreamTextGeneration
    | StreamCitationGeneration
    | StreamQueryGeneration
    | StreamSearchResults
    | StreamEnd
    | PartialStreamEnd
    | StreamToolInput
    | StreamToolResult
    | StreamSearchQueriesGeneration
    | StreamToolCallsGeneration
    | StreamToolCallsChunk
    | NonStreamedChatResponse;
};

/**
 * One of CHATBOT|USER|SYSTEM to identify who the message is coming from.
 */
export enum ChatRole {
  CHATBOT = 'CHATBOT',
  USER = 'USER',
  SYSTEM = 'SYSTEM',
  TOOL = 'TOOL',
  EDIT = 'EDIT',
}

export type CheckDocumentAccessRequest = {
  document_ids: Array<string>;
};

export type Citation = {
  text: string;
  start: number;
  end: number;
  document_ids: Array<string>;
  type?: CitationType;
};

export enum CitationType {
  TEXT_CONTENT = 'TEXT_CONTENT',
  PLAN = 'PLAN',
  UNKNOWN = 'UNKNOWN',
}

/**
 * Dictates how the prompt will be constructed. Defaults to "AUTO_PRESERVE_ORDER".
 */
export enum CohereChatPromptTruncation {
  OFF = 'OFF',
  AUTO_PRESERVE_ORDER = 'AUTO_PRESERVE_ORDER',
}

/**
 * Request shape for Cohere Python SDK Streamed Chat.
 * See: https://github.com/cohere-ai/cohere-python/blob/main/src/cohere/base_client.py#L1629
 */
export type CohereChatRequest = {
  message?: string | null;
  preamble?: string | null;
  chat_history?: Array<ChatMessage> | null;
  conversation_id?: string;
  tools?: Array<CohereRequestTool> | null;
  documents?: Array<{
    [key: string]: unknown;
  }>;
  model?: string | null;
  temperature?: number | null;
  k?: number | null;
  p?: number | null;
  file_ids?: Array<string> | null;
  search_queries_only?: boolean | null;
  max_tokens?: number | null;
  seed?: number | null;
  stop_sequences?: Array<string> | null;
  presence_penalty?: number | null;
  frequency_penalty?: number | null;
  prompt_truncation?: CohereChatPromptTruncation;
  tool_results?: Array<{
    [key: string]: unknown;
  }> | null;
  force_single_step?: boolean | null;
  agent_id?: string | null;
  citation_quality?: string | null;
  tool_response_prefix?: ToolResponsePrefix | null;
  safety_mode?: CohereChatSafetyMode;
  response_format?: TextResponseFormat | JsonObjectResponseFormat | null;
  edits?: Array<DocumentEditItem> | null;
  add_pre_user_turn_message?: boolean | null;
};

/**
 * Used to select the safety instruction inserted into the prompt. Defaults to "CONTEXTUAL".
 */
export enum CohereChatSafetyMode {
  CONTEXTUAL = 'CONTEXTUAL',
  STRICT = 'STRICT',
  NONE = 'NONE',
}

/**
 * `name` has to match tool id
 * see `get_prompt_tool_mapping()`
 *
 * [permalink at time of writing](https://github.com/cohere-ai/north/blob/149bd3abd32211a5ba6d4dbd3902426690a3bee9/src/backend/config/tools.py#L96)
 */
export type CohereRequestTool = {
  name?: string | null;
  description?: string | null;
  parameter_definitions?: {
    [key: string]: unknown;
  } | null;
  document_ids?: Array<string> | null;
};

export type ConversationFilePublic = {
  id: string;
  created_at: string;
  updated_at: string;
  conversation_id: string;
  file_name: string;
  file_size?: number;
};

export type ConversationJobStatus = {
  tool_id: string;
  job_state: JobState;
  last_updated: string;
  total_count: number;
  success_count: number;
  files_failed: Array<FileStatus>;
};

export type ConversationPublic = {
  id: string;
  created_at: string;
  updated_at: string;
  title: string;
  messages: Array<Message>;
  files: Array<ConversationFilePublic>;
  description: string | null;
  agent_id: string | null;
  type: ConversationType;
  readonly total_file_size: number;
};

export enum ConversationType {
  CHAT = 'chat',
  DOCUMENT_EDITING = 'document_editing',
}

export type ConversationWithoutMessages = {
  id: string;
  created_at: string;
  updated_at: string;
  title: string;
  description: string | null;
  agent_id: string | null;
  type: ConversationType;
  readonly total_file_size: number;
};

export type CreateAgentRequest = {
  name: string;
  version?: number | null;
  description?: string | null;
  preamble?: string | null;
  temperature?: number | null;
  tools?: Array<string> | null;
  tools_metadata?: Array<CreateAgentToolMetadataRequest> | null;
  deployment_config?: {
    [key: string]: string;
  } | null;
  is_default_deployment?: boolean | null;
  model?: string | null;
  deployment?: string | null;
  organization_id?: string | null;
  is_private?: boolean | null;
};

export type CreateAgentToolMetadataRequest = {
  id?: string | null;
  tool_name: string;
  artifacts: Array<{
    [key: string]: unknown;
  }>;
};

export type CreateSnapshotRequest = {
  conversation_id: string;
};

export type CreateSnapshotResponse = {
  snapshot_id: string;
  link_id: string;
  messages: Array<Message>;
};

export type CreateTemplateRequest = {
  name: string;
  description: string;
  input_definitions: Array<InputDefinition>;
  task_definitions: Array<Array<TaskDefinition>>;
  output_template: string;
};

export type CreateTemplateResponse = {
  id: string;
};

export type CreateUser = {
  password?: string | null;
  hashed_password?: (Blob | File) | null;
  given_name: string;
  family_name: string;
  email: string;
  nickname?: string | null;
  locale?: string | null;
  fullname?: string | null;
};

export type CreateUserResponse = {
  token: string;
};

export type DebugInfo = {
  prompt: string;
  raw_generation: string;
  chat_trace_id: string;
};

export type DeleteAgent = unknown;

export type DeleteConversationFileResponse = unknown;

export type DeleteConversationResponse = unknown;

export type DeleteSnapshotLinkResponse = unknown;

export type DeleteSnapshotResponse = unknown;

export type DeleteTemplateResponse = {
  deleted: boolean;
};

export type DeleteToolAuth = unknown;

export type DeleteUser = unknown;

export type DeploymentWithModels = {
  id?: string | null;
  name: string;
  description?: string | null;
  is_available?: boolean;
  is_community?: boolean | null;
  env_vars: Array<string> | null;
  models: Array<ModelSimple>;
};

export type DocumentEdit = {
  highlight_text?: string | null;
  feedback?: string | null;
  message_before?: string | null;
  message_after?: string | null;
};

/**
 * Document edit feedback to be provided to the model
 */
export type DocumentEditItem = {
  highlight_text?: string | null;
  message_before?: string | null;
  message_after?: string | null;
  feedback?: string | null;
};

export type Feedback = {
  user_id: string;
  message_id: string | null;
  message: string | null;
  snapshot_link_id: string | null;
  feedback_type: FeedbackType;
  additional_details: string | null;
  created_at: string;
  raw_prompt: string | null;
  raw_generation: string | null;
  tool_plan: string | null;
};

export enum FeedbackType {
  POSITIVE = 'POSITIVE',
  NEGATIVE = 'NEGATIVE',
  BUG = 'BUG',
}

export type FileStatus = {
  file_id: string;
  display_name: string;
  error_message?: string;
};

export type GHUserPublic = {
  user_id: string;
  username: string;
};

export type GenerateTitleResponse = {
  title: string;
  error?: string | null;
};

export type GetFeedbackResponse = {
  feedback: Array<Feedback>;
};

export type GithubRegisterReq = {
  username: string;
  token: string;
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

export type Input = {
  id: string;
  label: string;
  description: string;
  type: 'string';
  required: boolean;
  format?: string | null;
  example: string;
  value: string;
};

export type InputDefinition = {
  id: string;
  label: string;
  description: string;
  type: 'string';
  required: boolean;
  format?: string | null;
  example: string;
};

export type JWTResponse = {
  token: string;
};

export enum JobState {
  CREATED = 'CREATED',
  RUNNING = 'RUNNING',
  FINISHED = 'FINISHED',
  FAILED = 'FAILED',
}

/**
 * Configuration for forcing the model output to adhere to the specified format. Supported on [Command R 03-2024](https://docs.cohere.com/docs/command-r), [Command R+ 04-2024](https://docs.cohere.com/docs/command-r-plus) and newer models.
 *
 * The model can be forced into outputting JSON objects (with up to 5 levels of nesting) by setting `{ "type": "json_object" }`.
 *
 * A [JSON Schema](https://json-schema.org/) can optionally be provided, to ensure a specific structure.
 *
 * **Note**: When using  `{ "type": "json_object" }` your `message` should always explicitly instruct the model to generate a JSON (eg: _"Generate a JSON ..."_) . Otherwise the model may end up getting stuck generating an infinite stream of characters and eventually run out of context length.
 * **Limitation**: The parameter is not supported in RAG mode (when any of `connectors`, `documents`, `tools`, `tool_results` are provided).
 */
export type JsonObjectResponseFormat = {
  type?: 'json_object';
  schema_?: {
    [key: string]: unknown | null;
  } | null;
  [key: string]: unknown | 'json_object';
};

export type ListAuthStrategy = {
  strategy: string;
  client_id: string | null;
  authorization_endpoint: string | null;
  pkce_enabled: boolean;
};

export type ListConversationFile = {
  id: string;
  created_at: string;
  updated_at: string;
  conversation_id: string;
  file_name: string;
  file_size?: number;
};

export type ListModelsResponse = {
  models: {
    [key: string]: Array<string>;
  };
};

export type Login = {
  strategy: string;
  payload: {
    [key: string]: string;
  };
};

export type Logout = unknown;

export type Message = {
  text: string;
  id: string;
  created_at: string;
  updated_at: string;
  generation_id: string | null;
  model?: string | null;
  deployment?: string | null;
  position: number;
  is_active: boolean;
  documents: Array<ResponseDocument>;
  citations: Array<Citation>;
  files: Array<ConversationFilePublic>;
  tool_calls: Array<ToolCall>;
  document_edits?: Array<DocumentEdit> | null;
  tool_plan: string | null;
  raw_prompt?: string | null;
  raw_generation?: string | null;
  error?: string | null;
  feedback?: FeedbackType | null;
  agent: MessageAgent;
};

export enum MessageAgent {
  USER = 'USER',
  CHATBOT = 'CHATBOT',
  SYSTEM = 'SYSTEM',
}

export type MicrosoftSubscription = {
  id: string;
  subscription_id: string;
  user_id: string;
  tool_id: string;
  expires_at_utc: string;
  created_at: string;
  updated_at: string;
};

export type ModelSimple = {
  id: string;
  name: string;
  cohere_name: string | null;
  description: string | null;
};

export type NonStreamedChatResponse = {
  id?: string | null;
  response_id: string | null;
  generation_id: string | null;
  chat_history: Array<ChatMessage> | null;
  finish_reason: string;
  text: string;
  citations?: Array<Citation> | null;
  documents?: Array<ResponseDocument> | null;
  search_results?: Array<{
    [key: string]: unknown;
  }> | null;
  search_queries?: Array<SearchQuery> | null;
  conversation_id: string | null;
  tool_calls?: Array<ToolCall> | null;
  error?: string | null;
};

export type PartialStreamEnd = {
  id?: string | null;
  response_id?: string | null;
  generation_id?: string | null;
  conversation_id?: string | null;
  finish_reason?: string | null;
  debug_info?: Array<DebugInfo> | null;
};

export type PostFeedbackRequest = {
  message_id: string;
  feedback_type: FeedbackType;
  additional_details: string | null;
};

export type PostFeedbackResponse = {
  id: string;
  snapshot_link_id: string;
};

export type PromptSuggestionRequest = {
  current_prompt: string;
};

export type PromptSuggestionResponse = {
  suggested_prompt: string | null;
};

export enum ProviderName {
  COHERE_PLATFORM = 'cohere_platform',
  SAGEMAKER = 'sagemaker',
  AZURE = 'azure',
  BEDROCK = 'bedrock',
  SINGLE_CONTAINER = 'single_container',
}

export type RecommendationItem = {
  id: string;
  document_ids: Array<string>;
  tool_name: string;
  operation: string;
  content: string;
  header: RecommendationItemHeader;
};

export type RecommendationItemHeader = {
  title: string;
  url: string;
};

export type RelevantRepoDetails = {
  owner_login: string;
  id: number;
  html_url: string;
  description?: string | null;
  full_name: string;
  name: string;
  private: boolean;
  clone_url: string;
  git_url: string;
  commits_url: string;
  branches_url: string;
  default_branch: string;
  archive_url: string;
  pushed_at: string;
  created_at: string;
  updated_at: string;
};

export type ResponseDocument = {
  text?: string | null;
  document_id: string;
  title?: string | null;
  url?: string | null;
  fields?: {
    [key: string]: unknown;
  } | null;
  tool_name?: string | null;
  did_user_have_access?: boolean | null;
};

export type RunBase = {
  id: string;
  name: string;
  description: string;
  agent_id: string;
  template_id: string;
  inputs: Array<Input>;
  created_at: string;
  status: WorkflowRunStatus;
};

export type RunDetails = {
  id: string;
  name: string;
  description: string;
  agent_id: string;
  template_id: string;
  inputs: Array<Input>;
  created_at: string;
  status: WorkflowRunStatus;
  tasks: Array<Array<Task>>;
  output_template: string;
  output: string | null;
  error: string | null;
};

export type SearchQuery = {
  text: string;
  generation_id: string;
};

export type SearchResponse = {
  connector_name: string;
  results: Array<{
    [key: string]: unknown;
  }>;
};

export type SnapshotData = {
  title: string;
  description: string | null;
  messages: Array<Message>;
};

export type SnapshotPublic = {
  conversation_id: string;
  id: string;
  last_message_id: string;
  version: number;
  created_at: string;
  updated_at: string;
  snapshot: SnapshotData;
  agent_id?: string | null;
};

export type SnapshotWithLinks = {
  conversation_id: string;
  id: string;
  last_message_id: string;
  version: number;
  created_at: string;
  updated_at: string;
  snapshot: SnapshotData;
  agent_id?: string | null;
  links: Array<string>;
};

export type StartRunRequest = {
  agent_id: string;
  template_id: string;
  inputs: {
    [key: string]: string;
  };
};

export type StartRunResponse = {
  id: string;
};

/**
 * Stream citation generation event.
 */
export type StreamCitationGeneration = {
  id?: string | null;
  citations?: Array<Citation>;
};

export type StreamEnd = {
  id?: string | null;
  response_id?: string | null;
  generation_id?: string | null;
  conversation_id?: string | null;
  text: string;
  citations?: Array<Citation>;
  documents?: Array<ResponseDocument>;
  search_results?: Array<{
    [key: string]: unknown;
  }>;
  search_queries?: Array<SearchQuery>;
  tool_calls?: Array<ToolCall>;
  finish_reason?: string | null;
  chat_history?: Array<ChatMessage> | null;
  error?: string | null;
  debug_info?: Array<DebugInfo> | null;
};

/**
 * Stream Events returned by Cohere's chat stream response.
 */
export enum StreamEvent {
  STREAM_START = 'stream-start',
  SEARCH_QUERIES_GENERATION = 'search-queries-generation',
  SEARCH_RESULTS = 'search-results',
  TOOL_INPUT = 'tool-input',
  TOOL_RESULTS = 'tool-results',
  TEXT_GENERATION = 'text-generation',
  CITATION_GENERATION = 'citation-generation',
  STREAM_END = 'stream-end',
  PARTIAL_STREAM_END = 'partial-stream-end',
  NON_STREAMED_CHAT_RESPONSE = 'non-streamed-chat-response',
  TOOL_CALLS_GENERATION = 'tool-calls-generation',
  TOOL_CALLS_CHUNK = 'tool-calls-chunk',
  DEBUG = 'debug',
}

/**
 * Stream query generation event.
 */
export type StreamQueryGeneration = {
  id?: string | null;
  query: string;
};

/**
 * Stream queries generation event.
 */
export type StreamSearchQueriesGeneration = {
  id?: string | null;
  search_queries?: Array<SearchQuery>;
};

export type StreamSearchResults = {
  id?: string | null;
  search_results?: Array<{
    [key: string]: unknown;
  }>;
  documents?: Array<ResponseDocument>;
};

/**
 * Stream start event.
 */
export type StreamStart = {
  id?: string | null;
  generation_id?: string | null;
  conversation_id?: string | null;
};

/**
 * Stream text generation event.
 */
export type StreamTextGeneration = {
  id?: string | null;
  text: string;
};

export type StreamToolCallsChunk = {
  id?: string | null;
  tool_call_delta?: ToolCallDelta | null;
  text: string | null;
};

/**
 * Stream tool calls generation event.
 */
export type StreamToolCallsGeneration = {
  id?: string | null;
  stream_search_results?: StreamSearchResults | null;
  tool_calls?: Array<ToolCall> | null;
  text: string | null;
};

export type StreamToolInput = {
  id?: string | null;
  input_type: ToolInputType;
  tool_name: string;
  input: string;
  text: string;
};

export type StreamToolResult = {
  id?: string | null;
  tool_results: Array<{
    [key: string]: unknown;
  }>;
};

export type SyncAgentToolResponse = unknown;

export type Task = {
  id: string;
  name: string;
  prompt: string;
  tools: Array<string>;
  status: WorkflowTaskStatus;
  results?: TaskResults | null;
};

export type TaskDefinition = {
  id: string;
  name: string;
  tools: Array<string>;
  prompt: string;
};

export type TaskResponse = {
  text: string;
  generation_id: string | null;
  documents: Array<{
    [key: string]: unknown;
  }> | null;
  citations: Array<{
    [key: string]: unknown;
  }> | null;
  is_search_required: boolean | null;
  search_queries: Array<{
    [key: string]: unknown;
  }> | null;
  search_results: Array<{
    [key: string]: unknown;
  }> | null;
  finish_reason: string | null;
  tool_calls: Array<{
    [key: string]: unknown;
  }> | null;
  chat_history: Array<{
    [key: string]: unknown;
  }> | null;
};

export type TaskResults = {
  task_id: string;
  response: TaskResponse | null;
  error?: string | null;
};

export type TemplateBase = {
  id: string;
  name: string;
  description: string;
  creator_id: string;
  creator_fullname: string;
  created_at: string;
  workflow_tools: Array<string>;
};

export type TemplateDetails = {
  id: string;
  name: string;
  description: string;
  creator_id: string;
  creator_fullname: string;
  created_at: string;
  workflow_tools: Array<string>;
  input_definitions: Array<InputDefinition>;
  task_definitions: Array<Array<TaskDefinition>>;
  output_template: string;
};

/**
 * Configuration for forcing the model output to adhere to the specified format. Supported on [Command R 03-2024](https://docs.cohere.com/docs/command-r), [Command R+ 04-2024](https://docs.cohere.com/docs/command-r-plus) and newer models.
 *
 * The model can be forced into outputting JSON objects (with up to 5 levels of nesting) by setting `{ "type": "json_object" }`.
 *
 * A [JSON Schema](https://json-schema.org/) can optionally be provided, to ensure a specific structure.
 *
 * **Note**: When using  `{ "type": "json_object" }` your `message` should always explicitly instruct the model to generate a JSON (eg: _"Generate a JSON ..."_) . Otherwise the model may end up getting stuck generating an infinite stream of characters and eventually run out of context length.
 * **Limitation**: The parameter is not supported in RAG mode (when any of `connectors`, `documents`, `tools`, `tool_results` are provided).
 */
export type TextResponseFormat = {
  type?: 'text';
  [key: string]: unknown | 'text';
};

export type ToolArtifacts = {
  artifacts: Array<unknown>;
  nextPage?: string | null;
};

export type ToolCall = {
  id?: string | null;
  name: string;
  parameters?: {
    [key: string]: unknown;
  };
};

export type ToolCallDelta = {
  name: string | null;
  index: number | null;
  parameters: string | null;
  text: string | null;
};

/**
 * Type of input passed to the tool
 */
export enum ToolInputType {
  QUERY = 'QUERY',
  CODE = 'CODE',
}

export enum ToolName {
  FILE_TOOLS = 'file_tools',
  SEARCH_FILE = 'search_file',
  READ_DOCUMENT = 'read_document',
  FILE_PEEK = 'file_peek',
  TOOLKIT_PYTHON_INTERPRETER = 'toolkit_python_interpreter',
  TOOLKIT_CALCULATOR = 'toolkit_calculator',
  GOOGLE_DRIVE = 'google_drive',
  WEB_SCRAPE = 'web_scrape',
  TAVILY_WEB_SEARCH = 'tavily_web_search',
  GOOGLE_WEB_SEARCH = 'google_web_search',
  BRAVE_WEB_SEARCH = 'brave_web_search',
  HYBRID_WEB_SEARCH = 'hybrid_web_search',
  GMAIL = 'gmail',
  GMAIL_COMPASS = 'gmail_compass',
  GITHUB = 'github',
  SLACK = 'slack',
  SALESFORCE = 'salesforce',
  SHAREPOINT = 'sharepoint',
  OUTLOOK = 'outlook',
  DIRECT_INJECTED_DOCUMENT = 'direct-injected-document',
}

export type ToolResponse = {
  name: string;
  display_name: string;
  stage?: ToolStage;
  description: string;
  category: Category;
  is_auth_required?: boolean;
  auth_url?: string | null;
  token?: string | null;
  email?: string | null;
  is_visible?: boolean;
  sync_available?: boolean;
  is_compass_bypassed?: boolean;
  private_agent_only?: boolean;
};

/**
 * A string to prepend to open chatbot turn
 */
export type ToolResponsePrefix = {
  tool_plan: string;
  tool_calls?: Array<ToolCall> | null;
  tool_name?: string | null;
};

export enum ToolStage {
  RELEASE = 'Release',
  ALPHA = 'Alpha',
  BETA = 'Beta',
}

export type UpdateAgentRequest = {
  name?: string | null;
  version?: number | null;
  description?: string | null;
  preamble?: string | null;
  temperature?: number | null;
  model?: string | null;
  deployment?: string | null;
  deployment_config?: {
    [key: string]: string;
  } | null;
  is_default_deployment?: boolean | null;
  is_default_model?: boolean | null;
  organization_id?: string | null;
  tools?: Array<string> | null;
  tools_metadata?: Array<CreateAgentToolMetadataRequest> | null;
  is_private?: boolean | null;
  type?: AgentType | null;
};

export type UpdateConversationRequest = {
  title?: string | null;
  description?: string | null;
  agent_id?: string | null;
};

export type UpdateMessage = {
  tool_calls?: Array<ToolCall> | null;
  tool_selection?: ToolCall | null;
  tool_plan?: string | null;
  text?: string | null;
  documents?: Array<ResponseDocument> | null;
  raw_prompt?: string | null;
  raw_generation?: string | null;
};

export type UpdateMessageResponse = unknown;

export type UpdateUser = {
  password?: string | null;
  hashed_password?: (Blob | File) | null;
  fullname?: string | null;
  email?: string | null;
  has_completed_onboarding?: boolean | null;
  department?: UserDepartment | null;
  locale?: string | null;
};

export type UploadAgentFileResponse = {
  id: string;
  created_at: string;
  updated_at: string;
  file_name: string;
  file_size?: number;
};

export type UploadConversationFileErrorResponse = {
  conversation_id: string;
  file_name: string;
  file_size?: number;
  error: string;
};

export type UploadConversationFileResponse = {
  id: string;
  created_at: string;
  updated_at: string;
  conversation_id: string;
  file_name: string;
  file_size?: number;
};

export type User = {
  fullname: string;
  locale?: string | null;
  nickname?: string | null;
  given_name?: string | null;
  family_name?: string | null;
  email?: string | null;
  role?: string;
  id: string;
  department?: UserDepartment | null;
  has_completed_onboarding?: boolean;
  created_at: string;
  updated_at: string;
};

export enum UserDepartment {
  SALES = 'sales',
  MARKETING = 'marketing',
  HUMAN_RESOURCES = 'human_resources',
  IT_SECURITY = 'it_security',
  GENERAL = 'general',
  FINANCE = 'finance',
  ENGINEERING = 'engineering',
}

export type UserStats = {
  daily_active_users: Array<ActiveUserCount>;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export enum WorkflowRunStatus {
  PENDING = 'PENDING',
  RUNNING = 'RUNNING',
  FAILED = 'FAILED',
  COMPLETED = 'COMPLETED',
}

export enum WorkflowTaskStatus {
  WAITING = 'WAITING',
  RUNNING = 'RUNNING',
  FAILED = 'FAILED',
  COMPLETED = 'COMPLETED',
  CANCELLED = 'CANCELLED',
}

export type MetricsMetricsGetResponse = unknown;

export type GetStrategiesV1AuthStrategiesGetResponse = Array<ListAuthStrategy>;

export type LoginV1LoginPostData = {
  requestBody: Login;
};

export type LoginV1LoginPostResponse = JWTResponse | null;

export type AuthorizeV1StrategyAuthPostData = {
  code?: string;
  strategy: string;
};

export type AuthorizeV1StrategyAuthPostResponse = JWTResponse;

export type LogoutV1LogoutGetResponse = Logout;

export type ToolAuthV1ToolAuthGetResponse = unknown;

export type DeleteToolAuthV1ToolAuthToolIdDeleteData = {
  toolId: string;
};

export type DeleteToolAuthV1ToolAuthToolIdDeleteResponse = DeleteToolAuth;

export type ChatStreamV1ChatStreamPostData = {
  conversationType?: ConversationType;
  requestBody: CohereChatRequest;
  stateless?: boolean;
};

export type ChatStreamV1ChatStreamPostResponse = Array<ChatResponseEvent>;

export type ChatV1ChatPostData = {
  conversationType?: ConversationType;
  requestBody: CohereChatRequest;
  stateless?: boolean;
};

export type ChatV1ChatPostResponse = NonStreamedChatResponse;

export type GetMeV1UsersMeGetResponse = User;

export type GetStatsV1UsersStatsGetData = {
  fromDate?: string;
  toDate?: string;
};

export type GetStatsV1UsersStatsGetResponse = UserStats;

export type GetMeSubscriptionsV1UsersMeToolIdSubscriptionsGetData = {
  toolId: string;
};

export type GetMeSubscriptionsV1UsersMeToolIdSubscriptionsGetResponse =
  Array<MicrosoftSubscription>;

export type UpdateUserV1UsersUserIdPutData = {
  requestBody: UpdateUser;
  userId: string;
};

export type UpdateUserV1UsersUserIdPutResponse = User;

export type DeleteUserV1UsersUserIdDeleteData = {
  userId: string;
};

export type DeleteUserV1UsersUserIdDeleteResponse = DeleteUser;

export type GetConversationV1ConversationsConversationIdGetData = {
  conversationId: string;
};

export type GetConversationV1ConversationsConversationIdGetResponse = ConversationPublic;

export type UpdateConversationV1ConversationsConversationIdPutData = {
  conversationId: string;
  requestBody: UpdateConversationRequest;
};

export type UpdateConversationV1ConversationsConversationIdPutResponse = ConversationPublic;

export type DeleteConversationV1ConversationsConversationIdDeleteData = {
  conversationId: string;
};

export type DeleteConversationV1ConversationsConversationIdDeleteResponse =
  DeleteConversationResponse;

export type ListConversationsV1ConversationsGetData = {
  agentId?: string;
  limit?: number;
  offset?: number;
};

export type ListConversationsV1ConversationsGetResponse = Array<ConversationWithoutMessages>;

export type SearchConversationsV1ConversationsSearchGetData = {
  agentId?: string | null;
  limit?: number;
  offset?: number;
  query: string;
};

export type SearchConversationsV1ConversationsSearchGetResponse =
  Array<ConversationWithoutMessages>;

export type BatchUploadFileV1ConversationsBatchUploadFilePostData = {
  formData: Body_batch_upload_file_v1_conversations_batch_upload_file_post;
};

export type BatchUploadFileV1ConversationsBatchUploadFilePostResponse = Array<
  UploadConversationFileResponse | UploadConversationFileErrorResponse
>;

export type ListFilesV1ConversationsConversationIdFilesGetData = {
  conversationId: string;
};

export type ListFilesV1ConversationsConversationIdFilesGetResponse = Array<ListConversationFile>;

export type DeleteFileV1ConversationsConversationIdFilesFileIdDeleteData = {
  conversationId: string;
  fileId: string;
};

export type DeleteFileV1ConversationsConversationIdFilesFileIdDeleteResponse =
  DeleteConversationFileResponse;

export type GetConversationJobsV1ConversationsConversationIdJobsGetData = {
  conversationId: string;
};

export type GetConversationJobsV1ConversationsConversationIdJobsGetResponse =
  Array<ConversationJobStatus>;

export type GenerateTitleV1ConversationsConversationIdGenerateTitlePostData = {
  conversationId: string;
};

export type GenerateTitleV1ConversationsConversationIdGenerateTitlePostResponse =
  GenerateTitleResponse;

export type GenerateRealTimePromptSuggestionV1ConversationsConversationIdSuggestPromptPostData = {
  conversationId: string;
  requestBody: PromptSuggestionRequest;
};

export type GenerateRealTimePromptSuggestionV1ConversationsConversationIdSuggestPromptPostResponse =
  PromptSuggestionResponse;

export type ListToolsV1ToolsGetData = {
  agentId?: string | null;
};

export type ListToolsV1ToolsGetResponse = Array<ToolResponse>;

export type CheckFileAccessV1ToolsToolIdCheckDocumentAccessPostData = {
  requestBody: CheckDocumentAccessRequest;
  toolId: string;
};

export type CheckFileAccessV1ToolsToolIdCheckDocumentAccessPostResponse = {
  [key: string]: boolean;
};

export type GetToolArtifactsV1ToolsToolIdArtifactsGetData = {
  toolId: ToolName;
};

export type GetToolArtifactsV1ToolsToolIdArtifactsGetResponse = ToolArtifacts;

export type CreateAgentV1AgentsPostData = {
  requestBody: CreateAgentRequest;
};

export type CreateAgentV1AgentsPostResponse = AgentPublic;

export type ListAgentsV1AgentsGetData = {
  limit?: number;
  offset?: number;
  organizationId?: string | null;
  visibility?: AgentVisibility;
};

export type ListAgentsV1AgentsGetResponse = Array<AgentPublic>;

export type GetAgentByIdV1AgentsAgentIdGetData = {
  agentId: string;
};

export type GetAgentByIdV1AgentsAgentIdGetResponse = AgentPublic;

export type UpdateAgentV1AgentsAgentIdPutData = {
  agentId: string;
  requestBody: UpdateAgentRequest;
};

export type UpdateAgentV1AgentsAgentIdPutResponse = AgentPublic;

export type DeleteAgentV1AgentsAgentIdDeleteData = {
  agentId: string;
};

export type DeleteAgentV1AgentsAgentIdDeleteResponse = DeleteAgent;

export type GetAgentJobsV1AgentsAgentIdJobsGetData = {
  agentId: string;
};

export type GetAgentJobsV1AgentsAgentIdJobsGetResponse = Array<AgentJobResponse>;

export type GetAgentConversationJobsV1AgentsAgentIdConversationJobsGetData = {
  agentId: string;
};

export type GetAgentConversationJobsV1AgentsAgentIdConversationJobsGetResponse =
  Array<AgentConversationJobResponse>;

export type SearchV1AgentsAgentIdSearchGetData = {
  agentId: string;
  q: string;
};

export type SearchV1AgentsAgentIdSearchGetResponse = Array<SearchResponse>;

export type SearchToolV1AgentsAgentIdSearchToolGetData = {
  agentId: string;
  checkTool: string;
  q: string;
};

export type SearchToolV1AgentsAgentIdSearchToolGetResponse = Array<SearchResponse>;

export type BatchUploadFileV1AgentsBatchUploadFilePostData = {
  formData: Body_batch_upload_file_v1_agents_batch_upload_file_post;
};

export type BatchUploadFileV1AgentsBatchUploadFilePostResponse = Array<UploadAgentFileResponse>;

export type AgentStatsV1AgentsAgentIdStatsGetData = {
  agentId: string;
};

export type AgentStatsV1AgentsAgentIdStatsGetResponse = AgentStats;

export type SyncAgentToolArtifactsV1AgentsAgentIdToolToolIdSyncPostData = {
  agentId: string;
  toolId: string;
};

export type SyncAgentToolArtifactsV1AgentsAgentIdToolToolIdSyncPostResponse = SyncAgentToolResponse;

export type CallToolV1AgentsAgentIdToolToolIdPostData = {
  agentId: string;
  requestBody: CallToolRequest;
  toolId: string;
};

export type CallToolV1AgentsAgentIdToolToolIdPostResponse = CallToolResponse;

export type RegisterGithubTokenV1GithubTokensPostData = {
  requestBody: GithubRegisterReq;
};

export type RegisterGithubTokenV1GithubTokensPostResponse = GHUserPublic;

export type DeleteGithubTokenV1GithubTokensDeleteResponse = unknown;

export type ListGithubReposV1GithubReposGetResponse = Array<RelevantRepoDetails>;

export type GetDefaultAgentV1DefaultAgentGetResponse = AgentPublic;

export type ResetAgentV1DefaultAgentResetPostResponse = AgentPublic;

export type CreateSnapshotV1SnapshotsPostData = {
  requestBody: CreateSnapshotRequest;
};

export type CreateSnapshotV1SnapshotsPostResponse = CreateSnapshotResponse;

export type ListSnapshotsV1SnapshotsGetData = {
  conversationId?: string | null;
};

export type ListSnapshotsV1SnapshotsGetResponse = Array<SnapshotWithLinks>;

export type GetSnapshotV1SnapshotsLinkLinkIdGetData = {
  linkId: string;
};

export type GetSnapshotV1SnapshotsLinkLinkIdGetResponse = SnapshotPublic;

export type DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteData = {
  linkId: string;
};

export type DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteResponse = DeleteSnapshotLinkResponse;

export type DeleteSnapshotV1SnapshotsSnapshotIdDeleteData = {
  snapshotId: string;
};

export type DeleteSnapshotV1SnapshotsSnapshotIdDeleteResponse = DeleteSnapshotResponse;

export type UpdateMessageV1MessagesMessageIdPostData = {
  messageId: string;
  requestBody: UpdateMessage;
};

export type UpdateMessageV1MessagesMessageIdPostResponse = UpdateMessageResponse;

export type HealthV1WebhooksHealthGetResponse = unknown;

export type ReceiveAzureWebhookV1WebhooksAzureUserIdPostData = {
  requestBody?: AzureWebhookPayload | null;
  userId: string;
  validationToken?: string | null;
};

export type ReceiveAzureWebhookV1WebhooksAzureUserIdPostResponse = string;

export type ReceiveAzureLifecycleWebhookV1WebhooksLifecycleAzurePostData = {
  requestBody?: AzureLifecyclePayload | null;
  validationToken?: string | null;
};

export type ReceiveAzureLifecycleWebhookV1WebhooksLifecycleAzurePostResponse = string;

export type ListAllRunsV1WorkflowsRunsGetResponse = Array<RunBase>;

export type GetRunDetailsV1WorkflowsRunsRunIdGetData = {
  runId: string;
};

export type GetRunDetailsV1WorkflowsRunsRunIdGetResponse = RunDetails;

export type StartRunV1WorkflowsRunsStartPostData = {
  requestBody: StartRunRequest;
};

export type StartRunV1WorkflowsRunsStartPostResponse = StartRunResponse;

export type ListAvailableTemplatesV1WorkflowsTemplatesGetResponse = Array<TemplateBase>;

export type CreateTemplateV1WorkflowsTemplatesPostData = {
  requestBody: CreateTemplateRequest;
};

export type CreateTemplateV1WorkflowsTemplatesPostResponse = CreateTemplateResponse;

export type GetTemplateDetailsV1WorkflowsTemplatesTemplateIdGetData = {
  templateId: string;
};

export type GetTemplateDetailsV1WorkflowsTemplatesTemplateIdGetResponse = TemplateDetails;

export type DeleteTemplateV1WorkflowsTemplatesTemplateIdDeleteData = {
  templateId: string;
};

export type DeleteTemplateV1WorkflowsTemplatesTemplateIdDeleteResponse = DeleteTemplateResponse;

export type GetRecommendationsV1RecommendationsGetResponse = Array<RecommendationItem>;

export type PostFeedbackV1FeedbackPostData = {
  requestBody: PostFeedbackRequest;
};

export type PostFeedbackV1FeedbackPostResponse = PostFeedbackResponse;

export type GetFeedbackV1FeedbackGetData = {
  fromDate?: string | null;
  toDate?: string | null;
};

export type GetFeedbackV1FeedbackGetResponse = GetFeedbackResponse;

export type CreateUserV1UsersPostData = {
  requestBody: CreateUser;
};

export type CreateUserV1UsersPostResponse = CreateUserResponse;

export type GetVersionV1VersionGetResponse = {
  [key: string]: unknown;
};

export type HealthHealthGetResponse = unknown;

export type ListModelsV1ModelsGetResponse = ListModelsResponse;

export type $OpenApiTs = {
  '/metrics': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
  '/v1/auth_strategies': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<ListAuthStrategy>;
      };
    };
  };
  '/v1/login': {
    post: {
      req: LoginV1LoginPostData;
      res: {
        /**
         * Successful Response
         */
        200: JWTResponse | null;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/{strategy}/auth': {
    post: {
      req: AuthorizeV1StrategyAuthPostData;
      res: {
        /**
         * Successful Response
         */
        200: JWTResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/logout': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Logout;
      };
    };
  };
  '/v1/tool/auth': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
  '/v1/tool/auth/{tool_id}': {
    delete: {
      req: DeleteToolAuthV1ToolAuthToolIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteToolAuth;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/chat-stream': {
    post: {
      req: ChatStreamV1ChatStreamPostData;
      res: {
        /**
         * Successful Response
         */
        200: Array<ChatResponseEvent>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/chat': {
    post: {
      req: ChatV1ChatPostData;
      res: {
        /**
         * Successful Response
         */
        200: NonStreamedChatResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/users/me': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: User;
      };
    };
  };
  '/v1/users/stats': {
    get: {
      req: GetStatsV1UsersStatsGetData;
      res: {
        /**
         * Successful Response
         */
        200: UserStats;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/users/me/{tool_id}/subscriptions': {
    get: {
      req: GetMeSubscriptionsV1UsersMeToolIdSubscriptionsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<MicrosoftSubscription>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/users/{user_id}': {
    put: {
      req: UpdateUserV1UsersUserIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: User;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteUserV1UsersUserIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteUser;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/{conversation_id}': {
    get: {
      req: GetConversationV1ConversationsConversationIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: ConversationPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: UpdateConversationV1ConversationsConversationIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: ConversationPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteConversationV1ConversationsConversationIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteConversationResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations': {
    get: {
      req: ListConversationsV1ConversationsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<ConversationWithoutMessages>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations:search': {
    get: {
      req: SearchConversationsV1ConversationsSearchGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<ConversationWithoutMessages>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/batch_upload_file': {
    post: {
      req: BatchUploadFileV1ConversationsBatchUploadFilePostData;
      res: {
        /**
         * Successful Response
         */
        200: Array<UploadConversationFileResponse | UploadConversationFileErrorResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/{conversation_id}/files': {
    get: {
      req: ListFilesV1ConversationsConversationIdFilesGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<ListConversationFile>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/{conversation_id}/files/{file_id}': {
    delete: {
      req: DeleteFileV1ConversationsConversationIdFilesFileIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteConversationFileResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/{conversation_id}/jobs': {
    get: {
      req: GetConversationJobsV1ConversationsConversationIdJobsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<ConversationJobStatus>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/{conversation_id}/generate-title': {
    post: {
      req: GenerateTitleV1ConversationsConversationIdGenerateTitlePostData;
      res: {
        /**
         * Successful Response
         */
        200: GenerateTitleResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/conversations/{conversation_id}/suggest-prompt': {
    post: {
      req: GenerateRealTimePromptSuggestionV1ConversationsConversationIdSuggestPromptPostData;
      res: {
        /**
         * Successful Response
         */
        200: PromptSuggestionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/tools': {
    get: {
      req: ListToolsV1ToolsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<ToolResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/tools/{tool_id}/check_document_access': {
    post: {
      req: CheckFileAccessV1ToolsToolIdCheckDocumentAccessPostData;
      res: {
        /**
         * Successful Response
         */
        200: {
          [key: string]: boolean;
        };
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/tools/{tool_id}/artifacts': {
    get: {
      req: GetToolArtifactsV1ToolsToolIdArtifactsGetData;
      res: {
        /**
         * Successful Response
         */
        200: ToolArtifacts;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents': {
    post: {
      req: CreateAgentV1AgentsPostData;
      res: {
        /**
         * Successful Response
         */
        200: AgentPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: ListAgentsV1AgentsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<AgentPublic>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/{agent_id}': {
    get: {
      req: GetAgentByIdV1AgentsAgentIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: AgentPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: UpdateAgentV1AgentsAgentIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: AgentPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteAgentV1AgentsAgentIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteAgent;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/{agent_id}/jobs': {
    get: {
      req: GetAgentJobsV1AgentsAgentIdJobsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<AgentJobResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/{agent_id}/conversation_jobs': {
    get: {
      req: GetAgentConversationJobsV1AgentsAgentIdConversationJobsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<AgentConversationJobResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/{agent_id}/search': {
    get: {
      req: SearchV1AgentsAgentIdSearchGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<SearchResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/{agent_id}/search_tool': {
    get: {
      req: SearchToolV1AgentsAgentIdSearchToolGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<SearchResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/batch_upload_file': {
    post: {
      req: BatchUploadFileV1AgentsBatchUploadFilePostData;
      res: {
        /**
         * Successful Response
         */
        200: Array<UploadAgentFileResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/{agent_id}/stats': {
    get: {
      req: AgentStatsV1AgentsAgentIdStatsGetData;
      res: {
        /**
         * Successful Response
         */
        200: AgentStats;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/{agent_id}/tool/{tool_id}/sync': {
    post: {
      req: SyncAgentToolArtifactsV1AgentsAgentIdToolToolIdSyncPostData;
      res: {
        /**
         * Successful Response
         */
        200: SyncAgentToolResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/agents/{agent_id}/tool/{tool_id}': {
    post: {
      req: CallToolV1AgentsAgentIdToolToolIdPostData;
      res: {
        /**
         * Successful Response
         */
        200: CallToolResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/github/tokens': {
    post: {
      req: RegisterGithubTokenV1GithubTokensPostData;
      res: {
        /**
         * Successful Response
         */
        200: GHUserPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
  '/v1/github/repos': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<RelevantRepoDetails>;
      };
    };
  };
  '/v1/default_agent/': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: AgentPublic;
      };
    };
  };
  '/v1/default_agent/reset': {
    post: {
      res: {
        /**
         * Successful Response
         */
        200: AgentPublic;
      };
    };
  };
  '/v1/snapshots': {
    post: {
      req: CreateSnapshotV1SnapshotsPostData;
      res: {
        /**
         * Successful Response
         */
        200: CreateSnapshotResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: ListSnapshotsV1SnapshotsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<SnapshotWithLinks>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/snapshots/link/{link_id}': {
    get: {
      req: GetSnapshotV1SnapshotsLinkLinkIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: SnapshotPublic;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteSnapshotLinkV1SnapshotsLinkLinkIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteSnapshotLinkResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/snapshots/{snapshot_id}': {
    delete: {
      req: DeleteSnapshotV1SnapshotsSnapshotIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteSnapshotResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/messages/{message_id}': {
    post: {
      req: UpdateMessageV1MessagesMessageIdPostData;
      res: {
        /**
         * Successful Response
         */
        200: UpdateMessageResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/webhooks/health': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
  '/v1/webhooks/azure/{user_id}': {
    post: {
      req: ReceiveAzureWebhookV1WebhooksAzureUserIdPostData;
      res: {
        /**
         * Successful Response
         */
        200: string;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/webhooks/lifecycle/azure': {
    post: {
      req: ReceiveAzureLifecycleWebhookV1WebhooksLifecycleAzurePostData;
      res: {
        /**
         * Successful Response
         */
        200: string;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/workflows/runs': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<RunBase>;
      };
    };
  };
  '/v1/workflows/runs/{run_id}': {
    get: {
      req: GetRunDetailsV1WorkflowsRunsRunIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: RunDetails;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/workflows/runs/start': {
    post: {
      req: StartRunV1WorkflowsRunsStartPostData;
      res: {
        /**
         * Successful Response
         */
        200: StartRunResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/workflows/templates': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<TemplateBase>;
      };
    };
    post: {
      req: CreateTemplateV1WorkflowsTemplatesPostData;
      res: {
        /**
         * Successful Response
         */
        200: CreateTemplateResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/workflows/templates/{template_id}': {
    get: {
      req: GetTemplateDetailsV1WorkflowsTemplatesTemplateIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: TemplateDetails;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteTemplateV1WorkflowsTemplatesTemplateIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: DeleteTemplateResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/recommendations': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<RecommendationItem>;
      };
    };
  };
  '/v1/feedback': {
    post: {
      req: PostFeedbackV1FeedbackPostData;
      res: {
        /**
         * Successful Response
         */
        200: PostFeedbackResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: GetFeedbackV1FeedbackGetData;
      res: {
        /**
         * Successful Response
         */
        200: GetFeedbackResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/users/': {
    post: {
      req: CreateUserV1UsersPostData;
      res: {
        /**
         * Successful Response
         */
        200: CreateUserResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/v1/version': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: {
          [key: string]: unknown;
        };
      };
    };
  };
  '/health': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
  '/v1/models': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: ListModelsResponse;
      };
    };
  };
};
